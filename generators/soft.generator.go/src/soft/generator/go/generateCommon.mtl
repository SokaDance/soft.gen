[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]

[**
 * File Comments 
*/]
[template public fileComment(aAny : OclAny)]
// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2019 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************
[/template]

[query public hasGenModel(aModelElement : EModelElement) : Boolean = eAnnotations->select( source = 'http://net.masagroup/soft/2019/GenGo' )->notEmpty() /]
[query public getGenModelAnnotation(aModelElement : EModelElement) : EAnnotation = eAnnotations->select( source = 'http://net.masagroup/soft/2019/GenGo' )->first() /]

[query public hasKey(aModelElement : EModelElement, aKey:String) : Boolean = if aModelElement.hasGenModel() then aModelElement.getGenModelAnnotation().details->select(key = aKey)->notEmpty() else false endif /]
[query public valueKey(aModelElement : EModelElement, aKey:String) : String = aModelElement.getGenModelAnnotation().details->select(key = aKey)->first().value /]
[query public valuesKey(aModelElement : EModelElement, aKey:String) : Collection(String) = aModelElement.getGenModelAnnotation().details->select(key = aKey).value /]


[query public hasExtension( aModelElement : EModelElement ) : Boolean = hasKey('extension') and valueKey('extension' )='true'/]
[query public isExported( aNamedElement : ENamedElement ) : Boolean = if ( hasKey('exported') ) then valueKey('exported') = 'true' else false endif/]

[**
 * Factory / Package / Classes Interfaces and Implementations Names  
*/]
[** search for an annotation in an element and in its ancestors if not present. **/]
[query private getAncestor( aElement : EModelElement ) : EModelElement = 
if aElement.oclIsKindOf(EOperation) then aElement.oclAsType(EOperation).eContainingClass
else if aElement.oclIsKindOf(EStructuralFeature) then aElement.oclAsType(EStructuralFeature).eContainingClass
else if aElement.oclIsKindOf(EClass) then aElement.oclAsType(EClass).ePackage
else null
endif endif endif 
/]

[query private getAncestors( aElement : EModelElement ) : Sequence(EModelElement) = 
    let ancestor : EModelElement = aElement.getAncestor() in
    if ( ancestor.oclIsUndefined() ) then
        Sequence(EModelElement){}
    else
        ancestor.getAncestors()->prepend( ancestor )
    endif
/]

[query private getAnnotationValue(aElement : EModelElement, aKey:String ) : String =
    if aElement.hasKey(aKey) then
        aElement.valueKey( aKey )
    else
        let ancestor : EModelElement = aElement.getAncestor() in
        if ancestor.oclIsUndefined() then
            null
        else
            ancestor.getAnnotationValue(aKey)
        endif
    endif     
/]
[** Retrieve a key in an element and its ancestors and then regexp replace the value with the default rule**/]
[query private getElementName( aElement : ENamedElement, aKey:String ) : String = aElement.getElementName(aElement.name, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String ) : String = aElement.getElementName(aName, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String , defaultRule : String ) : String =
    let value : String = aElement.getAnnotationValue( aKey ) in
    let rule : String = if value.oclIsUndefined() then defaultRule else value endif in
    if rule.oclIsUndefined() then
        aName
    else
        let index : Integer = rule.index( ':' ) in
        let pattern : String = if index = -1 then '(.*)' else rule.substring(1, index - 1) endif in
        let replacement : String = if index = -1 then rule else rule.substring(index + 1) endif in
        aName.replaceFirst( pattern , replacement )
    endif
/]

[** Factory Names **/]
[query public getFactoryName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'factoryName','$1Factory').toUpperFirst()/]
[query public getFactoryImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getFactoryName() )/]
[query public getFactoryInternalName( aPackage : EPackage ) : String = aPackage.name + 'FactoryInternal'/]
[query public getFactoryExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( aPackage.getFactoryName() )/]

[** Package Names **/]
[query public getPackageName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'packageName','$1Package').toUpperFirst()/]

[** Interface Names **/]
[query public getInterfaceName( aClass : EClass ) : String = aClass.getInterfaceName(aClass.name)/]
[query public getInterfaceName( aPackage : EPackage ) : String = aPackage.getInterfaceName( getPackageName() )/]
[query private getInterfaceName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceName').toUpperFirst() /]

[query public getQualifiedInterfaceName( aClass : EClass ) : String = aClass.ePackage.name + '.'  + aClass.getInterfaceName()/]
[query public getQualifiedInterfaceName( aPackage : EPackage ) : String = aPackage.name + '.' + aPackage.getInterfaceName()/]

[** Implementation Names **/]
[query public getImplementationName( aClass : EClass ) : String = aClass.getImplementationName( aClass.name )/]
[query public getImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getPackageName() ) /]
[query private getImplementationName( aNamedElement : ENamedElement , aName : String ) : String = 
    let name : String = aNamedElement.getElementName( aName, 'implementationName', '$1Impl') in
    if  aNamedElement.isExported() then 
        if ( aNamedElement.hasExtension() ) then
            name.toLowerFirst()
        else 
            name.toUpperFirst()
        endif
    else name.toLowerFirst() endif/]

[query public getQualifiedImplementationName( aClass : EClass ) : String = aClass.ePackage.name + '.' + aClass.getImplementationName()/]

[** Extension Names **/]
[query public getExtensionName( aClass : EClass ) : String = aClass.getExtensionName(aClass.name )/]
[query public getExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( getPackageName() )/]
[query private getExtensionName( aNamedElement : ENamedElement , aName : String ) : String = 
    let name : String = aNamedElement.getElementName( aName, 'extensionName', '$1Ext') in
    if  aNamedElement.isExported() then name.toUpperFirst()
    else name.toLowerFirst() endif/]


[query public getQualifiedExtensionName( aClass : EClass ) : String = aClass.ePackage.name + '.' + aClass.getExtensionName()/]

[** FileNames **/]
[query public getInterfaceFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceFileName', '$1.go').toLower()/]
[query public getImplementationFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationFileName', '$1_impl.go').toLower()/]
[query public getImplementationTestFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationTestFileName', '$1_impl_test.go').toLower()/]
[query public getFactoryTestFileName( aNamedElement : ENamedElement, packageName : String ) : String = aNamedElement.getElementName( packageName + 'factory', 'implementationTestFileName', '$1_impl_test.go').toLower()/]

[query public getElementInstanceName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName()/]

[query private getElementTypeName(anENamedElement : ENamedElement) : String =
if anENamedElement.oclIsTypeOf(EClass) then 'Class'
else if anENamedElement.oclIsTypeOf(EAttribute) then 'Attribute'
else if ( anENamedElement.oclIsTypeOf(EOperation) ) then 'Operation'
else if ( anENamedElement.oclIsTypeOf(EReference) ) then 'Reference'
else ''
endif endif endif endif
/]

[query public getReflectiveGetterName(anENamedElement : ENamedElement) : String = 
let getterName : String = 'get' + anENamedElement.getElementAccessorName() in
let ecorePackageClass : EClass = anENamedElement.eClass().ePackage.eClass() in
let methodName : String = if ecorePackageClass.eAllOperations->exists( name = getterName ) then getterName + anENamedElement.getElementTypeName() else getterName endif in
methodName.toUpperFirst()
/]

[** Accessors Names **/]
[query public getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'Is' else 'Get' endif/]

[query public getSetterName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'setterName', 'Set$1')/]
[query public getGetterName(feature : EStructuralFeature) : String =  feature.getElementName( name.toUpperFirst(), 'getterName', feature.getterPrefix() + '$1')/]
[query public getUnSetterName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'unSetterName', 'Unset$1')/]
[query public getIsSetName(feature : EStructuralFeature) : String = feature.getElementName( name.toUpperFirst(), 'isSetName', 'IsSet$1')/]

[query public getThisPtrName(anEClass : EClass) : String = 'thisPtr'/]
[query public getThisPtrSetterName(anEClass : EClass) : String = 'Set' + getThisPtrName().toUpperFirst()/]
[query public getThisPtrGetterName(anEClass : EClass) : String = 'Get' + getThisPtrName().toUpperFirst()/]

[query public getFunctionName(aOperation : EOperation ) : String = aOperation.getElementName( aOperation.name , 'operationName' ).toUpperFirst()/]

[query public getMetaType(aPackage : EPackage , anENamedElement : ENamedElement) : String = getShortQualifiedName( anENamedElement.eClass().getQualifiedInterfaceName(), aPackage.name ) /]

[query public getShortQualifiedName( aQualifiedName : String , aNamespaceName : String ) : String =
    let aQualifiedNames : Sequence(String) = aQualifiedName.tokenize('.') in
    let aNamespaceNames : Sequence(String) = aNamespaceName.tokenize('.') in
    let shortQualifiedNames : Sequence(String) = Sequence{1..aQualifiedNames->size()}->iterate( index ; res : Sequence(String) = Sequence{} |
        let n : String = aQualifiedNames->at(index) in
        if ( res->isEmpty() and index <= aNamespaceNames->size() and (n = aNamespaceNames->at(index)) ) then
            res
        else
            res->append(n)
        endif
    ) in
    shortQualifiedNames->join('.')
/]

[query public getUnQualifiedName( aQualifiedName : String ) : String =
    let index : Integer = aQualifiedName.lastIndex('.') in
    if index = -1 then
        aQualifiedName
    else
        aQualifiedName.substring(index+1)
    endif
/]


[query public getQualification( any : OclAny , aQualifiedName : String ) : String = 
    let index : Integer = aQualifiedName.lastIndex('.') in
    if index = -1 then
        ''
    else
        aQualifiedName.substring(1,index-1)
    endif 
/]

[query public getQualifiedIDName( aClass : EClass, aStructuralFeature : EStructuralFeature ) : String =
    aClass.getFeatureIDName( aStructuralFeature )
/]
[query public getPackageName(aStructural : EStructuralFeature,aClass: EClass) : String = if( aStructural.eContainingClass.ePackage = aClass.ePackage  ) then aStructural.eContainingClass.ePackage.getInterfaceName() else aStructural.eContainingClass.ePackage.getQualifiedInterfaceName() endif/]
