[comment encoding = UTF-8 /]
[module generateFactoryTest('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::common::generateCommon/]

[template public generateFactoryTest(ePackage : EPackage)]
[file (ePackage.getOutputDirectory() + '/' + ePackage.getFactoryTestFileName(), false, 'UTF-8')]
[fileComment()/]

package [ePackage.name/]

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestFactoryCreate(t *testing.T) {
	factory := newEcoreFactoryImpl()
    [for (aClass : EClass | ePackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return([aClass.getClassifierIDName()/])
		assert.NotNil(t, factory.Create(mockEClass))
	}
    [/for]
}

func TestFactoryPanics(t *testing.T) {
	factory := newEcoreFactoryImpl()
	[for (aDataType : EDataType | ePackage.eAllContents(EDataType)->select( serializable )->sortedBy(name))]
    {
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
    }
	[/for]
	[for (aDataType : EDataType | ePackage.eAllContents(EDataType)->select( serializable )->sortedBy(name))]
    {
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, "") })
    }
	[/for]
}
[/file]
[/template]