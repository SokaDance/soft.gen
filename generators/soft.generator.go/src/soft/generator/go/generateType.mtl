[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]


[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[query private getEPackage( eElement : ETypedElement ) : EPackage =
    let containingClass : EClass = 
    if eElement.oclIsKindOf(EStructuralFeature) then  eElement.oclAsType(EStructuralFeature).eContainingClass
    else if eElement.oclIsKindOf(EOperation) then  eElement.oclAsType(EOperation).eContainingClass
    else if eElement.oclIsKindOf(EParameter) then  eElement.oclAsType(EParameter).eOperation.eContainingClass
    else null endif endif endif in
    if containingClass.oclIsUndefined() then null
    else containingClass.ePackage
    endif
/] 

[template public generateEffectiveType(aElement : ETypedElement) post(trim())]
[let aPackage : EPackage = aElement.getEPackage()]
[if (aElement.isListType())]
[getShortQualifiedName('ecore.EList', aPackage.name )/]
[else]
[aElement.eGenericType.generateType(aPackage)/]
[/if]
[/let]
[/template]

[template public generateType(aElement : ETypedElement) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
[else]
    [let aPackage : EPackage = aElement.getEPackage()]
    [if aElement.isListType()]
        [getShortQualifiedName('ecore.EList', aPackage.name )/]
    [else]
        [aElement.eGenericType.generateType(aPackage)/]
    [/if]
    [/let]
[/if]
[/template]

[template public generateType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
[else]
[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.generateType()/][/for]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'EBoolean' , 'EBooleanObject' , 'Boolean'  , 'bool' , 'false' , ''},
        Sequence{ 'EInt' , 'EIntegerObject' , 'EBigInteger' , 'Integer'  , 'int' , '0' , ''},
        Sequence{ 'EDouble' , 'EDoubleObject' , 'EBigDecimal' , 'Real'  , 'float64' , '0.0' , ''},
        Sequence{ 'ELong' , 'ELongObject' , 'int64' , '0' , ''},
        Sequence{ 'EByte' , 'EByteObject' 'EChar' , 'ECharacterObject', 'byte' , '\'\'', ''},
        Sequence{ 'EByteArray' , '[]byte' , 'nil' , ''},
        Sequence{ 'EFloat' , 'EFloatObject', 'float32' , '0.0', ''},
        Sequence{ 'EEList' , 'ecore.EList', 'nil', ''},
        Sequence{ 'EDate' , 'time.Time', '' , 'IsZero'},
        Sequence{ 'EMap' , 'map[interface{}]interface{}', 'nil' , ''},
        Sequence{ 'EFeatureMap', 'interface{}', 'nil', ''},
        Sequence{ 'EFeatureMapEntry' , 'interface{}' , 'nil', ''},
        Sequence{ 'EJavaObject', 'EEnumerator' , 'EDiagnosticChain' , 'interface{}', 'nil', ''},
        Sequence{ 'EJavaClass' , 'reflect.Type', 'nil', ''},
        Sequence{ 'EString' , 'String', 'string', '""' , ''},
        Sequence{ 'ETreeIterator' , 'ecore.EIterator', 'nil' , ''},
        Sequence{ 'EResource' , 'ecore.EResource', 'nil' , ''}
    }
/]

[query public getType( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'interface{}'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceName()/]
[query private getType( aEnum : EEnum ) : String = aEnum.ePackage.name + '.' + aEnum.name/]
[query private getType( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 2 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/] 

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]


[query public getDefaultValue(aClassifier : EClassifier) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue()
    else 'nil' endif endif
/]

[query public getDefaultValue(aEnum : EEnum) : String = if aEnum.eLiterals->notEmpty() then aEnum.eLiterals->at(1).name.toUpperCase() else 0 endif/]

[query public getDefaultValue(aDataType : EDataType) : String =
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() -1 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]

[query public getComparisonFunction( aDataType : EDataType) : String = 
	getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() )
        else
            res
        endif
    else 
        res 
    endif
	)
/] 

[query public getAllImports(any : OclAny) : Sequence( String ) = 
    Sequence {
        'ecore' , 'github.com/masagroup/soft/go/ecore'
    }
/]

[query public getImportForPackage(aPackageName : String ) : String = 
    let index : Integer = getAllImports()->indexOf( aPackageName ) in
    if index.oclIsUndefined() or index = -1 then
        ''
    else
        getAllImports()->at( index + 1)
    endif
/]


[query public getImport( aPackage : EPackage , qualifiedName : String ) : String =
    let q : String = getQualification( qualifiedName ) in
    if q = '' then 
        ''
    else 
        if aPackage.name = q then 
            ''
        else
            let import : String = getImportForPackage( q ) in
            if import = '' then
                q
            else
                import
            endif
        endif 
    endif
    
/]

[query public getImport( aPackage : EPackage , aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 
        ''
    else
        aPackage.getImport(aClassifier.getType())
    endif
/]

