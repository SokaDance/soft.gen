[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]


[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[template public generateEffectiveType(eElement : ETypedElement) post(trim())]
[if (isListType())]
EList
[else]
[eElement.eGenericType.generateType()/]
[/if]
[/template]

[template public generateType(eElement : ETypedElement) post (trim())]
[if eElement.oclIsUndefined() or eElement.eGenericType.oclIsUndefined()]
[elseif eElement.isListType()]
EList
[else]
[eElement.eGenericType.generateType()/]
[/if]
[/template]

[template public generateType(anEDataType : EGenericType) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
[else]
[anEDataType.eClassifier.generateType()/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.generateType()/][/for]
[/template]

[**
 * Transformation Java Types to Go
*/]
[template public generateType(anEClassifier : EClassifier) ? (oclIsUndefined())]
interface{}
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EBoolean') or (name = 'EBooleanObject') or (name = 'Boolean'))]
bool
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'UnlimitedNatural' ))]
int
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EResource')]
EResource
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EInt') or (name = 'EIntegerObject') or (name = 'EBigInteger') or (name = 'Integer'))]
int
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EDouble') or (name = 'EDoubleObject')or (name = 'EBigDecimal') or (name = 'Real'))]
float64
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'ELong') or (name = 'ELongObject') )]
int32
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EByte') or (name = 'EByteObject') )]
byte
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EByteArray'))]
byte
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EChar') or (name = 'ECharacterObject') )]
byte
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EFloat') or (name = 'EFloatObject') )]
float32
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EEList')]
EList
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EDate')]
Time
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EMap')]
map
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EJavaObject')]
interface{}
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'ETreeIterator')]
EList
[/template]

[template public generateType(anEClassifier : EClassifier) ? (name = 'EJavaClass')]
interface{}
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EEnumerator') or (name = 'EDiagnosticChain'))]
interface{}
[/template]

[template public generateType(anEClassifier : EClassifier) ? ((name = 'EString') or (name = 'String'))]
string
[/template]

[template public generateType(anEClassifier : EClassifier) ? (oclIsKindOf(EClass))]
[anEClassifier.name/]
[/template]

[template public generateType(anEClassifier : EClassifier) ? (oclIsKindOf(EEnum))]
[anEClassifier.name/]
[/template]

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]


[query public getDefaultValue(anEClassifier : EClassifier) : String = 
        if ((name = 'EBoolean' ) or 
            (name = 'EBooleanObject' ) or 
            (name = 'Boolean' )) 
        then getDefaultBooleanValue()
        else getDefaultValueCheckString()
        endif
/]
[query private getDefaultValueCheckString(anEClassifier : EClassifier) : String = 
        if ((name = 'EString') or 
            (name = 'String')) 
        then getDefaultStringValue() 
        else getDefaultValueCheckInteger()
        endif
/]
[query private getDefaultValueCheckInteger(anEClassifier : EClassifier) : String = 
        if ((name = 'UnlimitedNatural') or 
            (name = 'EResource') or 
            (name = 'EInt') or 
            (name = 'EIntegerObject') or 
            (name = 'EBigInteger') or 
            (name = 'Integer') or 
            (name = 'EDouble') or 
            (name = 'EDoubleObject') or 
            (name = 'EBigDecimal') or 
            (name = 'Real') or 
            (name = 'ELong') or 
            (name = 'ELongObject') or 
            (name = 'EFloat') or 
            (name = 'EFloatObject') or 
            (name = 'EDate')) 
        then getDefaultNumberValue() 
        else getDefaultValueCheckChar() 
        endif
/]
[query private getDefaultValueCheckChar(anEClassifier : EClassifier) : String = 
        if ((name = 'EByte') or 
            (name = 'EByteObject') or 
            (name = 'EByteArray') or 
            (name = 'EChar') or 
            (name = 'ECharacterObject')) 
        then getDefaultCharValue() 
        else getDefaultValueCheckAny()
        endif
/]

[query private getDefaultValueCheckAny(anEClassifier : EClassifier) : String = 
        if ((name = 'EJavaObject') or
            (name = 'EEnumerator') or
            (name = 'EDiagnosticChain') ) 
        then getDefaultAnyValue() 
        else getDefaultPointerValue()
        endif
/]

[query private getDefaultBooleanValue(anEClassifier : EClassifier) : String = 'false'/]
[query private getDefaultCharValue(anEClassifier : EClassifier) : String = '\'\''/]
[query private getDefaultNumberValue(anEClassifier : EClassifier) : String = '0'/]
[query private getDefaultPointerValue(anEClassifier : EClassifier) : String = 'nil'/]
[query private getDefaultAnyValue(anEClassifier : EClassifier) : String = 'nil'/]
[query private getDefaultStringValue(anEClassifier : EClassifier) : String = '""'/]

