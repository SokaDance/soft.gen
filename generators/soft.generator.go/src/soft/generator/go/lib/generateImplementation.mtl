[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateReflectives/]

[template public generateImplementation(aClass : EClass) { implementationName : String = aClass.getImplementationName(); aPackage : EPackage = aClass.ePackage } ]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getImplementationFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

[let imports : OrderedSet(String) = Set { aClass.getInterfaceExtends()->collect( extend | aPackage.getImport( extend ) )->asSet()
                                        , aClass.getReferencedTypes()->collect( cls | aPackage.getImport(cls) )->asSet()
                                        , if aPackage.name <> 'ecore' and aClass.requiresList() then Set { getImport('ecore') } else Set{} endif 
                                        }->flatten()->select( s | s <> '')->asOrderedSet()->sortedBy( s | s) ]
[for ( i : String | imports )]
import "[i/]"
[/for]
[/let]

// [implementationName/] is the implementation of the model object '[aClass.name/]'
type [implementationName/] struct {
[for ( qualifiedExtend : String | aClass.getClassExtends() )]
    *[getShortQualifiedName(qualifiedExtend,aPackage.name)/]
[/for]
[let features : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->select( isField() )]
    [features.generateVariableDeclaration()/]
[/let]
}

[let initializerFeatures : OrderedSet(EStructuralFeature) = aClass.getVariableInitializationFeatures()]
[if initializerFeatures->notEmpty()]
type [aClass.getVariableInitializersInterface()/] interface {
    [initializerFeatures.generateVariableInitializationMethodDeclaration()/]
}
[/if]
[/let]

// [aClass.getConstructorName()/] is the constructor of a [aClass.getImplementationName()/]
func [aClass.getConstructorName()/]() *[aClass.getImplementationName()/] {
    [aClass.getReceiverName()/] := new([aClass.getImplementationName()/])
[for ( qualifiedExtend : String | aClass.getClassExtends() )]
    [aClass.getReceiverName()/].[getShortQualifiedName(qualifiedExtend,aClass.ePackage.name)/] = [getShortQualifiedName(getConstructorName(qualifiedExtend), aClass.ePackage.name)/]()
[/for]
    [aClass.getReceiverName()/].interfaces = [aClass.getReceiverName()/] 
[let features : OrderedSet(EAttribute) = aClass.eStructuralFeatures->select( isField() )]
[if features->notEmpty()]
    [features.generateVariableInitialization()/]
[/if]
[/let]
    return [aClass.getReceiverName()/]
}

[aClass.eOperations.generateImplementation()/]
[aClass.eStructuralFeatures.generateImplementation()/]
[aClass.getVariableInitializationFeatures().generateVariableInitializationMethodDefinition()/]
[aClass.generateReflectivesDefinition()/]
[/file]
[/template]
