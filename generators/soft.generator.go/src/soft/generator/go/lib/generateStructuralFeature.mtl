[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]

[**
 * lazy property can be defined as follow lazy = no|function|action
 **]
[query private getLazy( aStructuralFeature : EStructuralFeature ) : String =
if aStructuralFeature.hasKey('lazy') then 
    aStructuralFeature.valueKey('lazy')
else
    let aPackage : EPackage = aStructuralFeature.eContainingClass.ePackage in
    if aStructuralFeature.isListType() then
        aPackage.getLazy('list')
    else if aStructuralFeature.isProxy() then
        aPackage.getLazy('proxy')
    else 
        aPackage.getLazy('')
    endif
    endif
endif/]

[**
 * lazy property can be defined as follow lazy = ((*|list|proxy):(no|function|action))+
 **]
[query private getLazy( aPackage : EPackage , type : String ) : String =
if aPackage.hasKey('lazy') then
    let lazy : String = aPackage.valueKey('lazy') in
    let value : String = lazy.tokenize()->iterate( s ; res: String = '' | (
        if res = '' then 
            let index : Integer = s.index( ':' ) in 
            if index = -1 then
                s
            else
                let t : String = s.substring(1 , index - 1 ) in
                if t = type then
                    s.substring( index + 1 )
                else
                    ''
                endif
            endif
        else
            res
        endif
    )) in
    if value = '' then
        'no'
    else
        value
    endif
else 
    'no'
endif
/]

[query public isLazy( aStructuralFeature : EStructuralFeature ) : Boolean = aStructuralFeature.getLazy() <> 'no'/] 

[query public isInitializationDefered( aStructuralFeature : EStructuralFeature ) : Boolean = isListType() or isProxy()/]

[query public hasInitializationMethod( aStructuralFeature : EStructuralFeature ) : Boolean = 
not isVolatile() and isLazy() and ( let lazyType : String = aStructuralFeature.getLazy() in lazyType = 'action' or lazyType = 'function')/]

[query public getInitializersInterface( aClass : EClass ) : String = aClass.getImplementationName() + 'Initializers'/]

[query private getMethodInitializationName(feature : EStructuralFeature) : String = 
if hasKey('initializationName') then 
    valueKey('initializationName') 
else 
    'init'.concat(name.toUpperFirst()) 
endif/]

[template public generateDeclaration(aStructuralFeature : EStructuralFeature)]
[if isGet()]
[aStructuralFeature.generateGetDeclaration()/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetDeclaration()/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetDeclaration()/]
[/if]

[/template]

[template public generateGetDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getGetterName()/]() [aStructuralFeature.generateType()/]
[/template]

[template public generateSetDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getSetterName()/]( [aStructuralFeature.generateType()/] )
[/template]

[template public generateUnSetDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getUnSetterName()/]()
[/template]

[template private getListConstructor( anEAttribute : EStructuralFeature , aClass : EClass) post(trim())]
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass ) post(trim())]
NewArrayEList([anEAttribute.unique/])
[/template]

[template private getListConstructor( anEReference : EReference , aClass : EClass ) post(trim())]
[let aPackage : EPackage = aClass.ePackage]
[let receiverName : String = aClass.getReceiverName()]
[if (anEReference.containment)]
    [if anEReference.eOpposite.oclIsUndefined() ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewEObjectEList([receiverName/].GetEObjectInternal() , [aClass.getFeatureIDName(anEReference)/] , -1, true , true , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewEObjectEList([receiverName/].GetEObjectInternal() , [aClass.getFeatureIDName(anEReference)/] , [reverseClass.getFeatureIDName(reverseFeature)/], true , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
        [/let]
    [/if]
[else]
    [if anEReference.eOpposite.oclIsUndefined() ]
        [let featureID : String = anEReference.eContainingClass.getFeatureIDName( anEReference )]
[if not aPackage.isEcorePackage()]ecore.[/if]NewEObjectEList([receiverName/].GetEObjectInternal() , [featureID/] , -1 , false , false , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewEObjectEList([receiverName/].GetEObjectInternal() , [aClass.getFeatureIDName(anEReference)/] , [reverseClass.getFeatureIDName(reverseFeature)/] , false , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/]  )
        [/let]
        [/let]
    [/if]
[/if]
[/let]
[/let]
[/template]

[template public generateVariableDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getVariableName()/] [aStructuralFeature.generateType()/]

[/template]

[template public generateVariableInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass )]
[if aStructuralFeature.oclIsKindOf(EAttribute) ]
[aClass.getReceiverName()/].[aStructuralFeature.getVariableName()/] = [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/]
[elseif aStructuralFeature.isListType() and not aStructuralFeature.isLazy()]
[aClass.getReceiverName()/].[aStructuralFeature.getVariableName()/] = [aStructuralFeature.getListConstructor(aClass)/]
[else]
[/if]
[/template]

[template public generateVariableInitializationMethodDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getMethodInitializationName()/]()[if aStructuralFeature.getLazy() = 'function'] [aStructuralFeature.generateType()/][/if]

[/template]

[template public generateVariableInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'function' )]
[aClass.generateFunctionReceiver()/] [aStructuralFeature.getMethodInitializationName()/]() [aStructuralFeature.generateType()/] {
[if isListType()]
    return [getListConstructor(aClass)/];
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    return [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/];
[else]
    panic("[aStructuralFeature.getMethodInitializationName()/] not implemented")
[/if]
}


[/template]

[template public generateVariableInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'action' )]
[aClass.generateFunctionReceiver()/] [aStructuralFeature.getMethodInitializationName()/]() {
[let varName : String = aStructuralFeature.getVariableName() ]
[let receiverName : String = aStructuralFeature.eContainingClass.getReceiverName()]
[if isListType()]
    [receiverName/].[varName/] = [getListConstructor(aClass)/];
[elseif isProxy()]
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    [receiverName/].[varName/] = [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/];
[else]
    panic("[aStructuralFeature.getMethodInitializationName()/] not implemented")
[/if]
}
[/let]
[/let]


[/template]


[template public generateImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass)]
[if isGet()]
[aStructuralFeature.generateGetImplementation(aClass)/]
[/if]
[if isBasicGet()]
[aStructuralFeature.generateBasicGetImplementation(aClass)/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetImplementation(aClass)/]
[/if]
[if isBasicSet()]
[aStructuralFeature.generateBasicSetImplementation(aClass)/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetImplementation(aClass)/]
[/if]
[if isBasicUnSet()]
[aStructuralFeature.generateBasicUnSetImplementation(aClass)/]
[/if]
[/template]


[template public generateGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
// [aStructuralFeature.getGetterName()/] get the value of [aStructuralFeature.getVariableName()/]
[aClass.generateFunctionReceiver()/] [aStructuralFeature.getGetterName()/]() [aStructuralFeature.generateType()/] {
[aStructuralFeature.generateCommonGetImplementation(aClass)/]
}

[/template]

[template public generateBasicGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[aClass.generateFunctionReceiver()/] basic[aStructuralFeature.getGetterName().toUpperFirst()/]() [aStructuralFeature.generateType()/] {
[aStructuralFeature.generateCommonGetImplementation(aClass)/]
}

[/template]

[template public generateCommonGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let varName : String = aStructuralFeature.getVariableName() ]
[let receiverName : String = aClass.getReceiverName()]
[if isContainer()]
    if [receiverName/].eContainerFeatureID() == [aClass.getFeatureIDName(aStructuralFeature)/] {
        return [receiverName/].EContainer().([aStructuralFeature.generateType()/]);
    } 
    return nil
[elseif not isVolatile()]
    [let lazy : String = aStructuralFeature.getLazy()]
    [if lazy <> 'no']
        [if  lazy = 'function']
            [if aStructuralFeature.oclIsKindOf(EAttribute)]
    if [receiverName/].[varName/] == [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/] {
            [else]
    if [receiverName/].[varName/] == nil {
            [/if]
        [receiverName/].[varName/] = [receiverName/].getInitializers().[aStructuralFeature.getMethodInitializationName()/]()
    }
        [elseif lazy = 'action']
    [receiverName/].getInitializers().[aStructuralFeature.getMethodInitializationName()/]()
        [/if]
    [/if]
    [/let]
    return [receiverName/].[varName/]
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
    panic("[aStructuralFeature.getGetterName()/] not implemented")
[/if]
[/let]
[/let]
[/template]



[template public generateSetImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[let methodName : String = aStructuralFeature.getSetterName()]
[let receiverName : String = aClass.getReceiverName() ]
[let varName : String = aStructuralFeature.getVariableName() ]
[let newVarName : String = 'new' + varName.toUpperFirst() ]
[let oldVarName : String = 'old' + varName.toUpperFirst() ]
// [methodName/] set the value of [varName/]
[aClass.generateFunctionReceiver()/] [methodName/]( [newVarName/] [aStructuralFeature.generateType()/] ) {
[if not isVolatile()]
    [if isContainer()]
    if ( [newVarName/] != [receiverName/].EContainer() || ([newVarName/] != nil && [receiverName/].eContainerFeatureID() !=  [aClass.getFeatureIDName(aStructuralFeature)/])) {
        var notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        if ( [receiverName/].EContainer() != nil) {
            notifications = [receiverName/].EBasicRemoveFromContainer(notifications)
        }
        if ( [newVarName/] != nil ) {
            notifications = [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseAdd( [receiverName/] , [aClass.getFeatureIDName(aStructuralFeature)/], notifications )
        }
        notifications = [receiverName/].basic[methodName.toUpperFirst()/]( [newVarName/], notifications )
        if ( notifications != nil ) {
            notifications.Dispatch()
        }
    } else if ( [receiverName/].ENotificationRequired() ) {
        [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getFeatureIDName(aStructuralFeature)/], [newVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX) )
    }
    [elseif isBidirectional() or isContains()]
    if ( [newVarName/] != [receiverName/].[varName/] ) {
        var notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        if ( [receiverName/].[varName/] != nil ) {
        [if not isBidirectional()]
            notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications )
        }
        if ( [newVarName/] != nil ) {
            notifications = [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseAdd( [receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications )
        }
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
            [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/], [reverseClass.getFeatureIDName(reverseFeature)/] , notifications )
        }
        if ( [newVarName/] != nil ) {
            notifications = [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseAdd( [receiverName/], [reverseClass.getFeatureIDName(reverseFeature)/] , notifications )
        }
            [/let]
            [/let]
        [/if]
        notifications = [receiverName/].basic[methodName.toUpperFirst()/]([newVarName/],notifications)
        if (notifications != nil) {
            notifications.Dispatch()
        }
    }
        [if isUnSettable()]
        [/if]
    [else]
    [oldVarName/] := [aClass.getReceiverName()/].[varName/]
    [aClass.getReceiverName()/].[varName/] = [newVarName/]
    if [aClass.getReceiverName()/].ENotificationRequired() {
        [aClass.getReceiverName()/].ENotify([if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getFeatureIDName(aStructuralFeature)/], [oldVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
    }
    [/if]
[elseif hasKey('setterBody')]
    [valueKey('setterBody')/]
[else]
    panic("[aStructuralFeature.getSetterName()/] not implemented")
[/if]
}
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]

[/template]

[template public generateBasicSetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[let receiverName : String = aClass.getReceiverName() ]
[let varName : String = aStructuralFeature.getVariableName() ]
[let newVarName : String = 'new' + varName.toUpperFirst()]
[aClass.generateFunctionReceiver()/] basic[aStructuralFeature.getSetterName().toUpperFirst()/]( [newVarName/] [aStructuralFeature.generateType()/] , msgs [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain )  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
[if isContainer()]
    return [receiverName/].EBasicSetContainer([newVarName/],[aClass.getFeatureIDName(aStructuralFeature)/],msgs) 
[elseif not isVolatile()]
    [let oldVarName : String = 'old' + varName.toUpperFirst()]
    [oldVarName/] := [receiverName/].[varName/]
    [receiverName/].[varName/] = [newVarName/]
    notifications := msgs
    if ( [receiverName/].ENotificationRequired() ) {
        notification := [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getFeatureIDName(aStructuralFeature)/], [oldVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX)
        if (notifications != nil ) {
            notifications.Add( notification );
        } else {
            notifications = notification;
        }
    }
    return notifications
    [/let]
[elseif (hasKey('setterBody'))]
    [valueKey('setterBody')/]
[else]
    panic("[aStructuralFeature.getSetterName()/] not implemented")
[/if]
}
[/let]
[/let]
[/let]
[/let]
[/template]

[template public generateUnSetImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[let receiverName : String = aClass.getReceiverName()]
[let varName : String = aStructuralFeature.getVariableName() ]
[let oldVarName : String = 'old' + aStructuralFeature.getVariableName().toUpperFirst() ]
// [aStructuralFeature.getUnSetterName()/] unset the value of [varName/]
[aClass.generateFunctionReceiver()/] [aStructuralFeature.getUnSetterName()/]() {
[if not isVolatile()]
    [if isListType()]
        [receiverName/].[varName/].Clear()
    [elseif isBidirectional() or isContains()]
    if ( [receiverName/].[varName/] != nil ) {
        notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        [if not isBidirectional()]
        notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications )
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
        notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/].GetEObject(), [reverseFeature.eContainingClass.getFeatureIDName(reverseFeature)/] , notifications )
            [/let]
        [/if]
        notifications = basic[aStructuralFeature.getUnSetterName().toUpperFirst()/](notifications)
        if ( notifications != nil ) {
            notifications.Dispatch()
        }
    } else if [receiverName/].ENotificationRequired() {
        [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getFeatureIDName(aStructuralFeature)/],nil,nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
    }
    [else]
        if [receiverName/].ENotificationRequired() {
            [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getFeatureIDName(aStructuralFeature)/],nil,nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
        }
    [/if]
[elseif hasKey('unsetterBody')]
    [valueKey('unsetterBody')/] 
[else]
    panic("[aStructuralFeature.getUnSetterName()/] not implemented")
[/if]
}
[/let]
[/let]
[/let]
[/let]

[/template]

[template public generateBasicUnSetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[let receiverName : String = aClass.getReceiverName()]
[let varName : String = aStructuralFeature.getVariableName()]    
[let oldVarName : String = 'old' + varName.toUpperFirst()]
[aClass.generateFunctionReceiver()/] basic[aStructuralFeature.getUnSetterName().toUpperFirst()/]( msgs [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain )  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
[if not isVolatile()]
    [oldVarName/] := [receiverName/].[varName/]
    [receiverName/].[varName/] = nil
    notifications := msgs;
    if [receiverName/].ENotificationRequired() {
        notification := [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].GetEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getFeatureIDName(aStructuralFeature)/], [oldVarName/], nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX)
        if ( notifications != nil ) {
            notifications.Add( notification )
        } else {
            notifications = notification
        }
    }
    return notifications
[else]
    panic("basic[aStructuralFeature.getUnSetterName().toUpperFirst()/] not implemented")
[/if] 
}
[/let]
[/let]
[/let]
[/let]
[/template]




