[comment encoding = UTF-8 /]
[module generateMock('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::tests::generateCommon/]

[template public generateMock(aClass : EClass) { className : String = aClass.getMockName(); namespaceName : String = aClass.ePackage.getTestsNamespaceName();guardName : String = '_'.concat(className); }  ]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getTestsFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

[for (implInclude : String | aClass.getMockImplements()->asOrderedSet()->sortedBy(s | s))]
#include "[namespaceToFolder(implInclude)/].hpp"
[/for]
#include "[namespaceToFolder(aClass.getMockExtends())/].hpp"

namespace [namespaceName/]
{

    class [className/] : public virtual [getShortQualifiedName(aClass.getMockExtends(),namespaceName)/],[for ( implClass : String | aClass.getMockImplements()->asOrderedSet()->sortedBy(s | s)) separator (', ')] public virtual [getShortQualifiedName(implClass, namespaceName)/][/for] 
    {
    public:
        typedef [aClass.name.toUpperFirst()/] base_type;
        [aClass.eOperations.generateMock()/]
        [aClass.eStructuralFeatures.generateMock()/]
        // [protected (className)]
        // [/protected]
    };
} 

[endGuard(guardName)/]
[/file]
[/template]
