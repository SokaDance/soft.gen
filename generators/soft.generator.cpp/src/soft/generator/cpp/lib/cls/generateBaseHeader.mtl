[comment encoding = UTF-8 /]
[module generateBaseHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateStructuralFeature /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::cls::generateReflectives /]

[template public generateBaseHeader(aClass : EClass){ className : String = aClass.getBaseImplementationName() ; namespaceName : String = aClass.ePackage.getImplementationNamespaceName(); guardName : String = '_'.concat(className); }]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

[if aClass.isExported()]
#include "[aClass.ePackage.getInterfaceFolder()/]/Exports.hpp"
[/if]
[for (implInclude : String | aClass.getClassImplements()->asOrderedSet()->sortedBy(s | s))]
#include "[namespaceToFolder(implInclude)/].hpp"
[/for]
#include "[namespaceToFolder(aClass.getClassExtends())/].hpp"
[if aClass.eStructuralFeatures->exists( isLazy())]
#include "ecore/impl/Lazy.hpp"
[/if]
[if aClass.eStructuralFeatures->exists( isProxy())]
#include "ecore/impl/Proxy.hpp"
[/if]


// [protected (className + ' [declaration-includes]')]
// [/protected]

namespace [namespaceName/] 
{
    template <typename... I>
    class [className/] : public [aClass.getClassExtends()/]<I...> 
    {
    private:
        [className/]& operator=([className/] const&) = delete;
    
    protected:
        friend class [ aClass.ePackage.getFactoryImplementationName() /];
        [className/]();
        std::shared_ptr<[className/]> [getThisPtrGetterName()/]() const;
        void [getThisPtrSetterName()/](const std::shared_ptr<[className/]>& [getThisPtrName()/]);

    public:
        virtual ~[className/]();
        
[let operations : OrderedSet(EOperation) = aClass.eOperations->select( isPublic(true) )]
[if operations->notEmpty()]
        //*********************************
        // Operations
        //*********************************
        [operations.generateDeclaration(true)/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EAttribute)->select( hasSetter('public',true) or hasGetter('public',true) )]
[if attributes->notEmpty()]
        //*********************************
        // Attributes
        //*********************************
        [attributes.generateDeclaration(true)/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EReference)->select( hasSetter('public',true) or hasGetter('public',true)  )]
[if references->notEmpty()]
        //*********************************
        // References
        //*********************************
        [references.generateDeclaration(true)/]
[/if]
[/let]

    protected:
        virtual std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]> eStaticClass() const;
[let basicFeatures : OrderedSet(EAttribute) = aClass.eStructuralFeatures->select( isBasicGet() or isBasicSet() )]
[if basicFeatures->notEmpty()]

        //*********************************
        // Basics
        //*********************************
        [basicFeatures.generateBasicDeclaration()/]
[/if]
[/let]

        [aClass.generateReflectivesDeclaration()/]

[let dataInitializationFeatures : OrderedSet(EStructuralFeature) = aClass.getDataInitializationFeatures()]
[if dataInitializationFeatures->notEmpty()]
        //*********************************
        // Initializers
        //*********************************
        [dataInitializationFeatures.generateDataInitializationMethodDeclaration()/]
[/if]
[/let]

[let dataDeclarationFeatures : OrderedSet(EAttribute) = aClass.eStructuralFeatures->select( isField() )]
[if dataDeclarationFeatures->notEmpty()]
    protected:
        [dataDeclarationFeatures.generateDataDeclaration()/]
[/if]
[/let]
    private:
        std::weak_ptr<[className/]> [getThisPtrName()/]_;
    
        // [protected (className + ' [declaration-methods]')]
        // [/protected]
    };
}

#include "[aClass.ePackage.getImplementationFolder() + '/' + className +'.inl'/]"

[endGuard(guardName)/]
[/file]
[/template]
