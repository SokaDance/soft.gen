[comment encoding = UTF-8 /]
[module generateInternal('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::lib::generateCommon/]

[template public generateInternalHeader(aClass : EClass) ? ( not hasOnlyImplementationFeatures() ) ] 
[/template]

[template public generateInternalHeader(aClass : EClass) ? ( hasOnlyImplementationFeatures() ) { 
    className : String = aClass.getInternalName(); 
    classNamespace : String = aClass.ePackage.getImplementationNamespaceName();
    guardName : String = '_' + className; } 
]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

namespace [classNamespace/] 
{
    class [className/]  {
    public:
    [for ( aFeature : EStructuralFeature | aClass.eStructuralFeatures->select(isOnlyImplementation()) )]
        [if aFeature.hasGetter('public',true) and not aFeature.hasGetter('public',false)]
            [aFeature.generateGetDeclaration(false)/]

        [/if]
        [if aFeature.hasSetter('public',true) and not aFeature.hasSetter('public',false)]
            [aFeature.generateSetDeclaration(false)/]

        [/if]
        [if aFeature.hasUnSetter('public',true) and not aFeature.hasUnSetter('public',false)]
            [aFeature.generateUnSetDeclaration(false)/]

        [/if]
    [/for]
    };
}

[endGuard(guardName)/]
[/file]
[/template]