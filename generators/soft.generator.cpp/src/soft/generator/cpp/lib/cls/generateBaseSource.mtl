[comment encoding = UTF-8 /]
[module generateBaseSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateStructuralFeature /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::cls::generateReflectives /]
[import soft::generator::cpp::lib::cls::generateInternal /]


[template public generateBaseSource(aClass : EClass) { 
	className : String = aClass.getBaseName(); 
	namespaceName : String = aClass.ePackage.getImplementationNamespaceName();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
 	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( name );
	guardName : String = '_'.concat(className);}]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className + '.inl', false, 'UTF-8')]
[fileComment()/]

#ifndef [getGuardName(guardName)/]
#error This file may only be included from [className/].hpp
#endif

[let includes : OrderedSet(String) = Set{ aClass.getReferencedTypes()->selectByKind(EClass)->collect( c | c.getInclude())->asSet()
                                        , Set { 
                                                '"ecore/Any.hpp"',
                                                '"ecore/AnyCast.hpp"',
                                                '"ecore/EClass.hpp"',
												'"ecore/SmartPtr.hpp"',
												'"ecore/TypeTraits.hpp"',
                                                '"ecore/impl/EObjectEList.hpp"'
                                              }
                                        , Set {
                                                aClass.ePackage.getQualifiedInterfaceName(),
                                                aClass.ePackage.getFactoryQualifiedInterfaceName(),
                                                aClass.eClass().ePackage.getQualifiedInterfaceName(),
                                                aClass.eClass().ePackage.getFactoryQualifiedInterfaceName()
                                              }-> collect( c | '"' + namespaceToFolder(c) + '.hpp"' ) 
                                        }->flatten()->asOrderedSet()->sortedBy( s | s)]
[for ( include : String | includes )]
#include [include/]
[/for]
[/let]
[if hasOnlyImplementationFeatures()]
#include "[namespaceToFolder(aClass.getQualifiedInternalName())/].hpp"
[/if]

#include <cassert>
#include <iostream>
#include <sstream>

//[protected (className + ' [definition-includes]')]
//[/protected]

//[protected (className + ' [definition-begin]')]
//[/protected]

namespace [namespaceName/] 
{

    //*********************************
    // Constructor / Destructor
    //*********************************
    template <typename... I>
    [className/]<I...>::[className/]()
    [let dataFeatures : OrderedSet(EStructuralFeature) = features->select(isField())]
    [for ( aFeature : EStructuralFeature | dataFeatures ) before(':') separator(',')]
       [aFeature.generateDataInitialization(aClass)/]
    [/for]
    [/let]
    //[protected (className+ '::' + className)]
    {
    }
    //[/protected]

    template <typename... I>
    [className/]<I...>::~[className/]()
    {
    [if not aClass.ePackage.eClassifiers->exists( c | c.oclIsKindOf(EClass) and c <> aClass and aClass.isSuperTypeOf(c.oclAsType(EClass)))]
    #ifdef SHOW_DELETION
        std::string name;
        if ( auto named = dynamic_cast<ENamedElement*>( this ) )
            name = named->getName();
        std::cout << "delete [className/] ['['/]"<< this << "[']'/] " << name << std::endl;
    #endif
    [/if]
    //[protected (className+ '::~' + className)]
    //[/protected]
    }

	[if features->exists( isNotLazy() and isDataInitializationDefered() )]
    template <typename... I>
    inline std::shared_ptr<[className/]<I...>> [className/]<I...>::[getThisPtrGetterName()/]() const
    {
	    return std::static_pointer_cast<[className/]<I...>>([removeNamespace(aClass.getClassExtends())/]::[getThisPtrGetterName()/]());
    }
    
    template <typename... I>
    void [className/]<I...>::[getThisPtrSetterName()/](const std::shared_ptr<[className/]<I...>>& [getThisPtrName()/])
    {
		[removeNamespace(aClass.getClassExtends())/]::[getThisPtrSetterName()/]([getThisPtrName()/]);
	[let dataFeatures : OrderedSet(EStructuralFeature) = features->select(isField()) ]
		[dataFeatures.generateDataInitializationDefered(aClass)/]
    [/let]
    }
	[/if]

    template <typename... I>
    std::shared_ptr<[getShortQualifiedName('ecore::EClass', aClass.ePackage.name)/]> [className/]<I...>::eStaticClass() const
    {
        return [aClass.ePackage.getInterfaceName()/]::eInstance()->get[aClass.getElementAccessorName()/]();
    }

[let publicOperations : OrderedSet(EOperation) = operations->select( isPublic(true) )]
[if publicOperations->notEmpty()]
    //*********************************
    // Operations
    //*********************************
    [publicOperations.generateDefinition()/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = features->selectByKind(EAttribute)->select( hasSetter('public',true) or hasGetter('public',true) )]
[if attributes->notEmpty()]
    //*********************************
    // Attributes
    //*********************************
    [attributes.generateDefinition(aClass)/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = features->selectByKind(EReference)->select( hasSetter('public',true) or hasGetter('public',true)  )]
[if references->notEmpty()]
    //*********************************
    // References
    //*********************************
    [references.generateDefinition(aClass)/]
[/if]
[/let]
[let basicFeatures : OrderedSet(EAttribute) = features->select( isBasicGet() or isBasicSet() )]
[if basicFeatures->notEmpty()]
    //*********************************
    // Basics
    //*********************************
    [basicFeatures.generateBasicDefinition(aClass)/]
[/if]
[/let]
	[aClass.generateReflectivesDefinition()/]
[let dataFeatures : OrderedSet(EStructuralFeature) = features->select( not isVolatile() and hasDataInitializationMethod() )]
[if dataFeatures->notEmpty()]
    //*********************************
    // Initializations
    //*********************************
    [dataFeatures.generateDataInitializationMethodDefinition(aClass)/]
[/if]
[/let]
[if hasOnlyImplementationFeatures()]
    [generateInternalAdapterDefinition()/]
[/if]    
}
// [protected (className + ' [definition-end]') ]
// [/protected]

[/file]
[/template]
