[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::ts::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[template public generateType(aElement : ETypedElement) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
void
[else]
    [let aPackage : EPackage = aElement.getEPackage()]
    [if aElement.isListType()]
        EList<[aElement.eGenericType.generateType(aPackage)/]>
    [else]
        [aElement.eGenericType.generateType(aPackage)/][if aElement.eGenericType.eClassifier.name <> 'EJavaClass' and aElement.eGenericType.eTypeArguments->notEmpty()]<[for (g : EGenericType | aElement.eGenericType.eTypeArguments) separator (',')][g.eClassifier.getTypeName()/][/for]>[/if]
    [/if]
    [/let]
[/if]
[/template]

[template public generateType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
void
[else]
[anEDataType.eClassifier.getTypeName()/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.getParameterName()/] : [sParameter.generateType()/][/for]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'EBoolean' , 'EBooleanObject' , 'Boolean'  , 'boolean' , 'false' ,''},
        Sequence{ 'EInt' , 'EIntegerObject' , 'EBigInteger' , 'Integer'  , 'number' , '0' ,''},
        Sequence{ 'EDouble' , 'EDoubleObject' , 'EBigDecimal' , 'Real'  , 'number' , '0.' ,''},
        Sequence{ 'ELong' , 'ELongObject' , 'number' , '0' ,''},
        Sequence{ 'EByte' , 'EByteObject' 'EChar' , 'ECharacterObject', 'number' , '0', ''},
        Sequence{ 'EByteArray' , 'string' , '' ,''},
		Sequence{ 'EFeatureMapEntry' , 'EFeatureMapEntry' , 'null' ,'"./EFeatureMap"'},
        Sequence{ 'EFloat' , 'EFloatObject', 'number' , '0.0',''},
        Sequence{ 'EEList' , 'EList', '','"./EList"'},
        Sequence{ 'EDate' , 'std::time_t', 'std::time_t(-1)' , '<ctime>'},
        Sequence{ 'EMap' , 'Map', '' , ''},
        Sequence{ 'EJavaObject', 'EEnumerator' , 'EDiagnosticChain' , 'any', 'null' , ''},
        Sequence{ 'EJavaClass' , 'any', 'null' , ''},
        Sequence{ 'EString' , 'String', 'string', '""' , ''},
        Sequence{ 'ETreeIterator' , 'IterableIterator', '' , ''},
        Sequence{ 'EResource' , 'EResource', '' , '"./EResource"'}
    }
/]

[query public getTypeName(aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'any'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getTypeName()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getTypeName()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getTypeName()
    else '' endif endif endif endif
/]
[query private getTypeName( aClass : EClass ) : String = aClass.getInterfaceName()/]
[query private getTypeName( aEnum : EEnum ) : String = aEnum.name/]
[query private getTypeName( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 2 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/] 


[query public getTypeImport( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then ''
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getTypeImport()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getTypeImport()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getTypeImport()
    else '' endif endif endif endif
/]
[query public getTypeImport( aName : String ) : String = '"./' + aName + '"'/]

[query private getTypeImport( aClass : EClass ) : String = getTypeImport(aClass.getInterfaceName()) /]
[query private getTypeImport( aEnum : EEnum ) : String = getTypeImport(aEnum.name)/]
[query private getTypeImport( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]


[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]


[query public getDefaultValue(aClassifier : EClassifier) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue()
    else 'null' endif endif
/]

[query public getDefaultValue(aEnum : EEnum) : String = if aEnum.eLiterals->notEmpty() then aEnum.eLiterals->at(1).name.toUpperCase() else 0 endif/]

[query public getDefaultValue(aDataType : EDataType) : String =
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 1 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]