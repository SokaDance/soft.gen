[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateModule/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[query private getQualifiedIdentifier( qualification : String, identifier : String ) : String = qualification + '/' + identifier/] 

[query public getQualifiedIdentifier( aPackage : EPackage, identifier : String ) : String = getQualifiedIdentifier(aPackage.getPackageModule(),identifier)/]

[query public getQualifiedInterfaceIdentifier( aClassifier : EClassifier ) : String =
	if aClassifier.oclIsUndefined() then 'any'
	else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getQualifiedInterfaceIdentifier()
	else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getQualifiedInterfaceIdentifier()
	else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getQualifiedInterfaceIdentifier()
	else '' endif endif endif endif
 /]

[query public getQualifiedInterfaceIdentifier( aDataType : EDataType ) : String = aDataType.getType()/]

[query public getQualifiedInterfaceIdentifier( aClass : EClass ) : String = aClass.ePackage.getQualifiedIdentifier( aClass.getInterfaceName() ) /]

[query public getQualifiedImplementationIdentifier( aClass : EClass ) : String = aClass.ePackage.getQualifiedIdentifier( aClass.getImplementationName() ) /]

[query public getQualifiedExtensionIdentifier( aClass : EClass ) : String = aClass.ePackage.getQualifiedIdentifier( aClass.getExtensionName() ) /]

[query public getQualifiedInterfaceIdentifier( aEnum : EEnum ) : String = aEnum.ePackage.getQualifiedIdentifier( aEnum.name ) /]

[query public getImportedIdentifier( qualifiedIdentifier : String, modules : OclAny ) : String =
	if modules.oclIsUndefined() then
		qualifiedIdentifier
	else
		let indexSlash : Integer = qualifiedIdentifier.lastIndex('/') in
		if indexSlash = -1 then
			qualifiedIdentifier
		else
			let q : String = qualifiedIdentifier.substring(1, indexSlash-1) in
			let o : String = qualifiedIdentifier.substring(indexSlash+1) in
			let n : OclAny = mapGet(modules,q) in		
			if n.oclIsUndefined() then
				o
			else
				if n = '' then
					o
				else
					n.oclAsType(String) + '.' + o
				endif
			endif
		endif
	endif
/]


[query public getSimpleIdentifier( qualifiedIdentifier : String ) : String = 
	let index : Integer = qualifiedIdentifier.lastIndex('/') in
	if index = -1 then
		qualifiedIdentifier
	else
		qualifiedIdentifier.substring(index+1)
	endif
/]


[query public getIdentifierModule( qualifiedIdentifier : String ) : String =
	let index : Integer = qualifiedIdentifier.lastIndex('/') in
	if index = -1 then
		''
	else
		qualifiedIdentifier.substring(1,index-1)
	endif
/]

[query public getImportedIDName( aClass : EClass, aFeature : EStructuralFeature, modules : OclAny) : String =
	getImportedIdentifier(aClass.ePackage.getQualifiedIdentifier(aClass.ePackage.getConstantsName()+'.'+ aClass.getFeatureIDName(aFeature)),modules)
/]

[query public getImportedIDName( aClass : EClass, aOperation : EOperation, modules : OclAny) : String =
	getImportedIdentifier(aClass.ePackage.getQualifiedIdentifier(aClass.ePackage.getConstantsName()+'.'+ aClass.getOperationIDName(aOperation)),modules)
/]

[query public getImportedIDName( aClassifier : EClassifier, modules : OclAny) : String =
	getImportedIdentifier(aClassifier.ePackage.getQualifiedIdentifier(aClassifier.ePackage.getConstantsName()+'.'+ aClassifier.getClassifierIDName()),modules)
 /]

[template public generateType(aElement : ETypedElement, modules : OclAny) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
void
[else]
	[let aDataType : EGenericType = aElement.eGenericType]
    [let aPackage : EPackage = aElement.getEPackage()]
	[let ecore : EPackage = getEcorePackage()]
    [if aElement.isMapType()]
		[getImportedIdentifier( ecore.getQualifiedIdentifier('EMap'), modules)/]<[aDataType.generateMapKeyType(modules)/], [aDataType.generateMapValueType(modules)/]>
	[elseif aElement.isListType()]
        [getImportedIdentifier( ecore.getQualifiedIdentifier('EList'), modules)/]<[aDataType.generateListTypeParameters(modules)/]>
    [else]
        [aDataType.generateType(modules)/][if aDataType.eClassifier.name <> 'EJavaClass' and aDataType.eTypeArguments->notEmpty()]<[for (g : EGenericType | aDataType.eTypeArguments) separator (',')][getImportedIdentifier(g.eClassifier.getType(),modules)/][/for]>[/if]
    [/if]
    [/let]
	[/let]
	[/let]
[/if]
[/template]

[template public generateMapTypeParameters(anEDataType : EGenericType, modules : OclAny ) post(trim())]
[anEDataType.generateMapKeyType(modules)/], [anEDataType.generateMapValueType(modules)/]	
[/template]

[template public generateListTypeParameters(anEDataType : EGenericType, modules : OclAny) post(trim())]
[anEDataType.generateType(modules)/]
[/template]

[template private generateMapKeyType(anEDataType : EGenericType, modules : OclAny) post(trim())]
[anEDataType.generateMapTypeParameter(modules,1,'key')/]
[/template]

[template private generateMapValueType(anEDataType : EGenericType, modules : OclAny) post(trim())]
[anEDataType.generateMapTypeParameter(modules,2,'value')/]
[/template]

[template private generateMapTypeParameter(anEDataType : EGenericType , modules : OclAny, index : Integer, featureName : String) post(trim())]
[if anEDataType.eTypeArguments->size() = 2]
[let keyType : EGenericType = anEDataType.eTypeArguments->at(index)]
[getImportedIdentifier( keyType.eClassifier.getType(), modules)/]
[/let]
[elseif anEDataType.eClassifier.oclIsKindOf(EClass) and anEDataType.eClassifier.oclAsType(EClass).isMapEntry()]
[let mapEntryClass : EClass = anEDataType.eClassifier.oclAsType(EClass)]
[let keyFeature : EStructuralFeature = mapEntryClass.getEStructuralFeature(featureName)]
[let keyType : EGenericType = keyFeature.eGenericType]
[getImportedIdentifier( keyType.eClassifier.getType(), modules)/]
[/let]
[/let]
[/let]
[else]
any
[/if]
[/template]


[template public generateType(anEDataType : EGenericType, modules : OclAny ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
void
[else]
[getImportedIdentifier( anEDataType.eClassifier.getType(), modules)/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation, modules : OclAny ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.getParameterName()/]: [sParameter.generateType(modules)/][/for]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) =
	let ecore : EPackage = getEcorePackage() in 
    Sequence {
        Sequence{ 'java.lang.Boolean', 'boolean', 'boolean', 'false' , 'true'},
        Sequence{ 'java.lang.Integer', 'int', 'number' , '0', '45'},
		Sequence{ 'java.lang.Byte','java.lang.Character', 'char', 'number' ,'\'\'', '\'a\''},
		Sequence{ 'byte[]','Uint8Array' , 'nil', 'nil'},
		Sequence{ 'java.util.Date', 'Date', 'null', 'new Date()'},
		Sequence{ 'java.lang.Double', 'java.math.BigDecimal', 'double', 'number' , '0.0' , '3.5'},
		Sequence{ 'java.lang.Float' , 'float' , 'number' , '0.0', '1.2'},
		Sequence{ 'java.lang.Class' , 'any', 'null', ''},
		Sequence{ 'java.lang.Object', 'any', 'null', 'null'},
		Sequence{ 'java.lang.Long' , 'java.math.BigInteger', 'long' , 'number' , '0', '45'},
        Sequence{ 'java.util.Map' , ecore.getQualifiedIdentifier('EMap'), 'null', 'null'},
        Sequence{ 'java.util.Map$Entry' , ecore.getQualifiedIdentifier('EMapEntry'), 'null' , 'null'},
		Sequence{ 'java.lang.Short' , 'short' , 'number' , '0', '2'},
        Sequence{ 'java.lang.String' , 'string', '""' , '"Test String"'},
		

		Sequence{ 'org.eclipse.emf.common.util.DiagnosticChain', ecore.getQualifiedIdentifier('EDiagnosticChain'), 'null', 'null'},
		Sequence{ 'org.eclipse.emf.common.util.EList', ecore.getQualifiedIdentifier('EList'), 'null', 'null'},
		Sequence{ 'org.eclipse.emf.common.util.Enumerator', 'any', 'null', 'null'},
		Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap', 'any', 'null', 'null'},
        Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap$Entry', 'any', 'null', 'null'},
        Sequence{ 'org.eclipse.emf.ecore.resource.Resource', ecore.getQualifiedIdentifier('EResource'), 'null' , 'null'},
        Sequence{ 'org.eclipse.emf.ecore.resource.ResourceSet', ecore.getQualifiedIdentifier('EResourceSet'), 'null' , 'null'},
		Sequence{ 'org.eclipse.emf.common.util.TreeIterator', 'IterableIterator', 'null' , 'null'}
    }
/]

[query public getInstanceTypeName( aClassifier : EClassifier ) : String =
	let instanceTypeName : String = 
	if hasKey(aClassifier, 'instanceTypeName') then
		aClassifier.valueKey('instanceTypeName')
	else if not aClassifier.instanceTypeName.oclIsUndefined() then
		aClassifier.instanceTypeName
	else if aClassifier.oclIsKindOf(EClass) then
		aClassifier.oclAsType(EClass).getQualifiedInterfaceIdentifier()
	else
		''
	endif endif endif in
	let tsTypeName : String = getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = instanceTypeName) then
            s->at( s->size() - 2 )
        else
            res
        endif
    else 
        res 
    endif
	) in
	if tsTypeName = '' then
		instanceTypeName
	else
		tsTypeName
	endif
/] 


[query public getType(aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'any'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceIdentifier()/]
[query private getType( aEnum : EEnum ) : String = aEnum.getQualifiedInterfaceIdentifier()/]
[query private getType( aDataType : EDataType ) : String = aDataType.getInstanceTypeName()/]

[query public getDefaultValue(anEAttribute : EAttribute , modules : OclAny) : String = 
	if anEAttribute.many then 
		'' 
	else 
		if (defaultValueLiteral->notEmpty()) then 
			eType.getDefaultValueFromLiteral(defaultValueLiteral,modules) 
		else 
			eType.getDefaultValue( modules) 
		endif 
	endif
/]


[query private getDefaultValueFromLiteral(aClassifier : EClassifier, literal : String , modules : OclAny) : String =
	 if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValueFromLiteral(literal,modules)
	 else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValueFromLiteral(literal,modules)
	 else literal endif endif
/]

[query private getDefaultValueFromLiteral(aEnum : EEnum, literal : String, modules : OclAny) : String =
	let eLiterals : OrderedSet(EEnumLiteral) = aEnum.eLiterals->select( el : EEnumLiteral | el.name = literal ) in
	if eLiterals->isEmpty() then
		literal 
	else
		getImportedIdentifier( aEnum.ePackage.getQualifiedIdentifier(eLiterals->first().getConstantsName()),modules)
	endif
/]

[query private getDefaultValueFromLiteral(aDataType : EDataType, literal : String , modules : OclAny) : String = 
	literal
/]


[query public getDefaultValue(aClassifier : EClassifier, modules : OclAny) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue(modules)
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue(modules)
    else 'null' endif endif
/]

[query public getDefaultValue(aEnum : EEnum, modules : OclAny) : String = 
	if aEnum.eLiterals->notEmpty() then
		getImportedIdentifier( aEnum.ePackage.getQualifiedIdentifier(aEnum.eLiterals->at(1).getConstantsName()), modules) 
	else 
		0 
	endif
/]

[query public getDefaultValue(aDataType : EDataType, modules : OclAny) : String =
	if hasKey(aDataType, 'defaultValue') then
		aDataType.valueKey('defaultValue')
	else if aDataType.name <> 'EChar' and not aDataType.defaultValue.oclIsUndefined() then
		aDataType.defaultValue.toString()
	else
		let typeName : String = aDataType.getInstanceTypeName() in
		let aPackage : EPackage = aDataType.ePackage in 
		    aPackage.getAllDataTypes()->iterate( s ; res : String = '' |
		    if res = '' then
		        if s->exists(n : String | n = typeName) then
					getImportedIdentifier( s->at( s->size() - 1 ),modules)
		        else
		            res
		        endif
		    else 
		        res 
		    endif	
	 		)
	endif endif
/]

[query public getTestValue(aClassifier : EClassifier, modules : OclAny) : String =
	if aClassifier.oclIsUndefined() then 'null'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getTestValue(modules)
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getTestValue(modules)
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getTestValue(modules)
    else '' endif endif endif endif	
/]

[query private getTestValue( aClass : EClass , modules : OclAny) : String =
	'// must be defined'
/]


[query private getTestValue( aEnum : EEnum , modules : OclAny ) : String =
	if aEnum.eLiterals->size() >= 1 then
		let constant : String = aEnum.eLiterals->at(if aEnum.eLiterals->size() > 1 then 2 else 1 endif).getConstantsName() in
		getImportedIdentifier( aEnum.ePackage.getQualifiedIdentifier(constant), modules)
	else 0 endif/]

[query private getTestValue( aDataType : EDataType, modules : OclAny) : String = 
	if hasKey(aDataType, 'testValue') then
		aDataType.valueKey('testValue')
	else
		let typeName : String = aDataType.getInstanceTypeName() in
		let aPackage : EPackage = aDataType.ePackage in 
			aPackage.getAllDataTypes()->iterate( s ; res : String = '' |
		    if res = '' then
		        if s->exists(n : String | n = typeName) then
					getImportedIdentifier( s->at( s->size() ), modules)
				else
					res
		        endif
		    else 
		        res 
		    endif
		 	) 
	endif
/]

[query public getModule( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 
        ''
	else if aClassifier.oclIsKindOf(EEnum) then
		aClassifier.ePackage.getPackageModule()
	else if aClassifier.oclIsKindOf(EDataType) then
		let aDataType : EDataType = aClassifier.oclAsType(EDataType) in
		let tsType : String = aDataType.getInstanceTypeName() in
		getIdentifierModule(tsType)
	else
		aClassifier.ePackage.getPackageModule()
	endif endif endif
/]

[query public getModules(element : ENamedElement, type :String, types : Set(String)) : OclAny =
	types->iterate( t : String ; res : OclAny = mapNew('getElementModules_'+ type+ '_'+ element.name) |
						let typeModule : String = getIdentifierModule(t) in
						if res.mapContainsKey(typeModule) then
							let namespaceModule : String = getModuleNamespace(typeModule) in
							res.mapPut(typeModule,namespaceModule)
						else 
							res
						endif 					    
				  )
/]

[template public generateImports(element : ENamedElement, type :String, types : Set(String), modules : OclAny)]
[let modulesToTypes : OclAny = types->iterate( type : String ; res : OclAny = mapNew('modulesToTypes_'+type+'_'+element.name) | (
   let module : String = getIdentifierModule(type) in
    if (module <> '') then
        let typeName : String = getSimpleIdentifier(type) in
        let types : Sequence(OclAny) = res.mapGetOrDefault(module, Sequence{}).asSequence() in
        res.mapPut( module , types->append(typeName) )
    else
        res
    endif
))]
[for (moduleAny : OclAny | modulesToTypes.mapKeys()->sortedBy(oclAsType(String)))]
[let moduleStr : String = moduleAny.oclAsType(String)]
[let namespace : OclAny =  modules.mapGet(moduleAny)]
[if namespace.oclIsUndefined()]
import {
[for ( type : OclAny | modulesToTypes.mapGet(moduleAny).asSequence()->asOrderedSet()->sortedBy(t |t.oclAsType(String)))]
    [type.oclAsType(String)/],
[/for]    
} from "[moduleStr/]"
[else]
import * as [namespace/] from "[moduleStr/]"
[/if]
[/let]
[/let]
[/for]
[/let]
[/template]




