[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils]
[import soft::generator::ts::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[template public generateType(aElement : ETypedElement) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
void
[else]
    [let aPackage : EPackage = aElement.getEPackage()]
    [if aElement.isListType()]
        [getShortQualifiedName('ecore.EList', aPackage.name )/]<[aElement.eGenericType.generateType(aPackage)/]>
    [else]
        [aElement.eGenericType.generateType(aPackage)/][if aElement.eGenericType.eClassifier.name <> 'EJavaClass' and aElement.eGenericType.eTypeArguments->notEmpty()]<[for (g : EGenericType | aElement.eGenericType.eTypeArguments) separator (',')][getShortQualifiedName(g.eClassifier.getType(),aPackage.name)/][/for]>[/if]
    [/if]
    [/let]
[/if]
[/template]

[template public generateType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
void
[else]
[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.getParameterName()/] : [sParameter.generateType()/][/for]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'EBoolean' , 'EBooleanObject' , 'Boolean'  , 'boolean' , 'false'},
        Sequence{ 'EInt' , 'EIntegerObject' , 'EBigInteger' , 'Integer'  , 'number' , '0'},
        Sequence{ 'EDouble' , 'EDoubleObject' , 'EBigDecimal' , 'Real'  , 'number' , '0.'},
        Sequence{ 'ELong' , 'ELongObject' , 'number' , '0' },
        Sequence{ 'EByte' , 'EByteObject' 'EChar' , 'ECharacterObject', 'number' , '0'},
        Sequence{ 'EByteArray' , 'string' , ''},
		Sequence{ 'EFeatureMapEntry' , 'ecore.EFeatureMapEntry' , 'null' },
        Sequence{ 'EFloat' , 'EFloatObject', 'number' , '0.0'},
        Sequence{ 'EEList' , 'ecore.EList', 'null'},
        Sequence{ 'EDate' , 'Date', 'null'},
        Sequence{ 'EMap' , 'Map', ''},
        Sequence{ 'EJavaObject', 'EEnumerator' , 'EDiagnosticChain' , 'any', 'null' },
        Sequence{ 'EJavaClass' , 'any', 'null'},
        Sequence{ 'EString' , 'String', 'string', '""' },
        Sequence{ 'ETreeIterator' , 'IterableIterator', ''},
        Sequence{ 'EResource' , 'ecore.EResource', ''}
    }
/]

[query public getType(aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'any'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceName()/]
[query private getType( aEnum : EEnum ) : String = aEnum.ePackage.name + '.' + aEnum.name/]
[query private getType( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 1 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/] 


[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]


[query public getDefaultValue(aClassifier : EClassifier) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue()
    else 'null' endif endif
/]

[query public getDefaultValue(aEnum : EEnum) : String = if aEnum.eLiterals->notEmpty() then aEnum.name + '.' + aEnum.eLiterals->at(1).name.toUpperCase() else 0 endif/]

[query public getDefaultValue(aDataType : EDataType) : String =
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]

[query private getAllImportModules(aPackage : EPackage) : OclAny =
    let namespacesToPackages : OclAny = 
    if (aPackage.hasGenAnnotation()) then
        let annotations : Sequence(String) = aPackage.getGenAnnotation().details->select(key = 'importModule').value in
        annotations->iterate( annotation : String ; res : OclAny = mapNew('getNamespaceToModule_' + aPackage.name) | (
            let index : Integer = annotation.index(':') in 
            if index = -1 then
                res
            else
                res.mapPut(annotation.substring(1,index-1),annotation.substring(index+1)) 
            endif
        ))
    else
        mapNew('getNamespaceToModule_' + aPackage.name)
    endif in
    namespacesToPackages.mapPut('ecore','@masagroup/ecore')
/]

[query public getImportModule(aPackage : EPackage, namespace : String ) : String =
    getAllImportModules().mapGetOrDefault(namespace, namespace)
/]

[template public generateImports(aPackage : EPackage ,allTypes : OrderedSet(String), aElementName : String)]
[let namespaceToTypes : OclAny = allTypes->iterate( type : String ; res : OclAny = mapNew(aElementName) | (
   let namespace : String = getQualification(type) in
    if (namespace <> '') then
        let typeName : String = getUnQualifiedName(type) in
        let types : Sequence(OclAny) = res.mapGetOrDefault(namespace, Sequence{}).asSequence() in
        res.mapPut( namespace , types->append(typeName) )
    else
        res
    endif
))]
[for (namespace : OclAny | namespaceToTypes.mapKeys()->sortedBy(oclAsType(String)))]
[if (namespace = aPackage.name)]
import {
[for ( type : OclAny | namespaceToTypes.mapGet(namespace).asSequence()->asOrderedSet())]
    [type.oclAsType(String)/],
[/for]    
} from "./internal"
[else]
[let namespaceName : String = namespace.oclAsType(String)]
import * as [namespaceName/] from "[aPackage.getImportModule(namespaceName)/]"
[/let]
[/if]
[/for]
[/let]
[/template]
