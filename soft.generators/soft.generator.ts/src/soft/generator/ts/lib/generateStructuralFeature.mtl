[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon /]
[import soft::generator::common::generateStructuralFeature /]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateType /]
[import soft::generator::ts::lib::generateCommon /]

[query public isInitializationDefered( aStructuralFeature : EStructuralFeature ) : Boolean = isListType() or isProxy()/]

[template public generateDeclaration(aStructuralFeature : EStructuralFeature)]
[if isGet() or isSet()]
[aStructuralFeature.generatePropertyDeclaration()/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetDeclaration()/]
[/if]
[/template]

[template private generatePropertyDeclaration(aStructuralFeature : EStructuralFeature)]
[if aStructuralFeature.isGet() and not aStructuralFeature.isSet()]readonly [/if][aStructuralFeature.name/] : [aStructuralFeature.generateType()/];
[/template]

[template private generateUnSetDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getUnSetterName()/]() : void;
[/template]

[template public generateVariableDeclaration(aStructuralFeature : EStructuralFeature)]
[aStructuralFeature.getVariableName()/] : [aStructuralFeature.generateType()/];

[/template]

[template public generateImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass)]
[if isGet()]
[aStructuralFeature.generateGetImplementation(aClass)/]
[/if]
[/template]

[template public generateGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass)]
// get the value of [aStructuralFeature.name/]
get [aStructuralFeature.name/]() : [aStructuralFeature.generateType()/] {
[let aPackage : EPackage =  aClass.ePackage ]
[let varName : String = aStructuralFeature.getVariableName() ]
[if isContainer()]
    if (this.eContainerFeatureID() == [aClass.getFeatureIDName(aStructuralFeature)/]) {
        return <[aStructuralFeature.generateType()/]>this.eContainer();
    } 
    return null;
[elseif not isVolatile()]
    [if not isListType() and isProxy()]
    if (this.[varName/] != null && this.[varName/].eIsProxy()) {
        [let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
        [let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
        [oldVarName/] := this.[varName/];
        [newVarName/] := this.eResolveProxy([oldVarName/]).([aStructuralFeature.generateType()/]);
        this.[varName/] = [newVarName/]
        if ([newVarName/] != [oldVarName/]) {
        [if isContains()]
            let notifications : ENotificationChain = null;
            [if not isBidirectional()]
            notifications = (<EObjectInternal>[oldVarName/]).eInverseRemove( this, EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications );
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = (<EObjectInternal>[oldVarName/]).eInverseRemove( this, [reverseClass.getFeatureIDName(reverseFeature)/] , notifications );
                [/let]
                [/let]
            [/if]
            if ((<EObjectInternal>[newVarName/]).eInternalContainer() == null) {
            [if not isBidirectional()]
            notifications = (<EObjectInternal>[newVarName/]).eInverseAdd( this, EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications );
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = (<EObjectInternal>[newVarName/]).eInverseAdd( this, [reverseClass.getFeatureIDName(reverseFeature)/] , notifications );
                [/let]
                [/let]
            [/if]
            }
            if notifications != null {
                notifications.Dispatch();
            }
        [/if]
            if (this.eNotificationRequired()) {
                this.eNotify( new Notification(this, EventType.RESOLVE, [aClass.getFeatureIDName(aStructuralFeature)/], [oldVarName/], [newVarName/], NO_INDEX) );
            }
        }
        [/let]
        [/let]
    }
    [elseif aStructuralFeature.isLazy()]
        [let lazy : String = aStructuralFeature.getLazy()]
        [if lazy <> 'no']
            [if  lazy = 'function']
                [if aStructuralFeature.oclIsKindOf(EAttribute)]
    if (this.[varName/] == [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/]) {
                [else]
    if (this.[varName/] == null) {
                [/if]
        this.[varName/] = this.[aStructuralFeature.getInitializationMethodName()/]();
    }
            [elseif lazy = 'action']
    this.[aStructuralFeature.getInitializationMethodName()/]();
            [/if]
        [/if]
        [/let]
	[elseif aStructuralFeature.isListType()]
	if (this.[varName/] == null) {
		this.[varName/] = [aStructuralFeature.getListConstructor(aClass)/]
	}
	[/if]
    return this.[varName/];
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
	throw new Error("get [aStructuralFeature.name/] not implemented");
[/if]
[/let]
[/let]
}
[/template]


[template private getListConstructor( anEAttribute : EStructuralFeature , aClass : EClass) post(trim())]
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass ) ? (not anEAttribute.isFeatureMapType()) post(trim()) ]
[let aPackage : EPackage = aClass.ePackage]
new BasicEList([anEAttribute.unique/])
[/let]
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass ) ? (anEAttribute.isFeatureMapType()) post(trim()) ]
null
[/template]


[template private getListConstructor( anEReference : EReference , aClass : EClass ) post(trim())]
[let aPackage : EPackage = aClass.ePackage]
[if (anEReference.containment)]
    [if anEReference.eOpposite.oclIsUndefined() ]
new BasicEObjectList(this , [aClass.getFeatureIDName(anEReference)/] , -1, true , true , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
new BasicEObjectList(this , [aClass.getFeatureIDName(anEReference)/] , [reverseClass.getFeatureIDName(reverseFeature)/], true , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
        [/let]
    [/if]
[else]
    [if anEReference.eOpposite.oclIsUndefined() ]
        [let featureID : String = anEReference.eContainingClass.getFeatureIDName( anEReference )]
new BasicEObjectList(this , [featureID/] , -1 , false , false , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
new BasicEObjectList(this , [aClass.getFeatureIDName(anEReference)/] , [reverseClass.getFeatureIDName(reverseFeature)/] , false , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/]  )
        [/let]
        [/let]
    [/if]
[/if]
[/let]
[/template]