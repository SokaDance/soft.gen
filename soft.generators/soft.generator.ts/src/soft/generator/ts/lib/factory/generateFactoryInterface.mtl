[comment encoding = UTF-8 /]
[module generateFactoryInterface('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]

[template public generateFactoryInterface(anEPackage : EPackage) { 
    className : String = anEPackage.getFactoryName(); 
    packageName : String = anEPackage.name;
    extension : Boolean = anEPackage.hasKey('factory') and anEPackage.valueKey('factory') = 'extension';
    factoryName : String = if extension then anEPackage.getFactoryExtensionName() else anEPackage.getFactoryImplementationName() endif;
}]
[file (anEPackage.getOutputDirectory() + '/' + anEPackage.getInterfaceFileName(anEPackage.getFactoryName() ), false, 'UTF-8')]
[fileComment()/]

[let referencesTypes : OclAny = anEPackage.eClassifiers->selectByKind(EClass)->iterate( eClass : EClass ; res : OclAny = mapNew() | (
	let typeName : String = eClass.getInterfaceName() in
	let typeImport : String = eClass.getTypeImport() in
	if ( typeImport <> '') then
		res.mapPut(typeName,typeImport)
	else
		res
	endif
))]
[let importTypes : OclAny = mapNew(className)
							 		.mapPut('EFactory',getTypeImport('EFactory'))
                                    .mapPut(factoryName,getTypeImport(factoryName))
							     	.mapPutAll(referencesTypes)]
[for (k : OclAny | importTypes.mapKeys()->sortedBy(oclAsType(String)))]
import {[k.oclAsType(String)/]} from [importTypes.mapGet(k).oclAsType(String)/]
[/for]
[/let]
[/let]

export interface [className/] extends EFactory {
[for (aEClass : EClass | anEPackage.eAllContents(EClass)->sortedBy(name))]
[if (aEClass.abstract = false)]

	create[aEClass.name/]() : [aEClass.getInterfaceName()/];
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
	create[aEClass.name/]FromContainer(eContainer: [aReference.generateType()/]): [aEClass.getInterfaceName()/];
[if(aEClass.getElementIDAccessorName().size() > 0)]
	create[aEClass.name/]FromContainerAndClassID(eContainer: [aReference.generateType()/],classID: number ): [aEClass.getInterfaceName()/];
[/if]
[/for]
[/let]
[/if]
[/for]
}

export function get[className/]() : [className/] {
	return [factoryName/].eInstance;
}

[/file]
[/template]
