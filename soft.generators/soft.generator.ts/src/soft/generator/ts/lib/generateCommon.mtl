[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateType/]

[query private getMapTypeParameter(aClass : EClass , featureName : String) : String =
	let aFeature : EStructuralFeature = aClass.getEStructuralFeature(featureName) in
	aFeature.generateType(null)
/]

[query private getMapKeyType(aClass : EClass): String = aClass.getMapTypeParameter('key')/]

[query private getMapValueType(aClass : EClass): String = aClass.getMapTypeParameter('value')/]

[query public getInterfaceExtends(aClass : EClass ) : Sequence(String) =
	let ecore : EPackage = getEcorePackage() in
	if ( aClass.isMapEntry() ) then
		Sequence{ ecore.getQualifiedIdentifier('EObject'), ecore.getQualifiedIdentifier('EMapEntry<'+aClass.getMapKeyType()+','+aClass.getMapValueType()+'>')}
    else if ( aClass.eSuperTypes->isEmpty() ) then
		let aPackage : EPackage = aClass.ePackage in 
	    if ( aClass.name = 'EObject' ) then
            Sequence{ecore.getQualifiedIdentifier('ENotifier')}
        else if ( aPackage.hasPackageProperty('rootExtendsInterface') ) then
			Sequence{aPackage.getPackageProperty('rootExtendsInterface')}
		else
            Sequence{ecore.getQualifiedIdentifier('EObject')}
        endif endif
    else
        aClass.eSuperTypes->iterate( cl ; res : Sequence(String) = Sequence{} | res->append(cl.getQualifiedInterfaceIdentifier()))
    endif endif
/]

[query public getClassExtends(aClass : EClass ) : String =
	let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
		let aPackage : EPackage = aClass.ePackage in 
        let ecore : EPackage = getEcorePackage() in
    	if ( aClass.name = 'EObject' ) then
			 ecore.getQualifiedIdentifier('BasicEObject')
        else if ( aPackage.hasPackageProperty('rootExtendsClass') ) then
			aPackage.getPackageProperty('rootExtendsClass')
		else
			ecore.getQualifiedIdentifier('EObjectImpl')
        endif endif  
    else
        if ( extendsClass.hasExtension() ) then
            extendsClass.getQualifiedExtensionIdentifier()
        else
            extendsClass.getQualifiedImplementationIdentifier()
        endif
    endif
/]


[query public getPropertyName( aFeature : EStructuralFeature ) : String =
if aFeature.eType.name = 'EBoolean' then 'is' + aFeature.name.toUpperFirst() else aFeature.name endif/]

[query public getVariableName( aFeature : EStructuralFeature ) : String = 
'_' + aFeature.getPropertyName()/]

