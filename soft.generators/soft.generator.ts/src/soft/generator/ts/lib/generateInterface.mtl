[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement]
[import soft::generator::common::generateUtils]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateElement/]
[import soft::generator::ts::generateModule]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]
[import soft::generator::ts::lib::generateOperation/]
[import soft::generator::ts::lib::generateStructuralFeature/]



[template public generateInterface(aClass : EClass) {
	ecorePackage : EPackage = getEcorePackage(); 
	aPackage : EPackage = aClass.ePackage;
	interfaceName : String = aClass.getInterfaceName(); 
    interfaceExtends : Sequence(String) = aClass.getInterfaceExtends();
    isDiamond : Boolean = interfaceExtends->size() > 1;
	types : Set(String) = Set{  interfaceExtends
								, (if isDiamond then aClass.eSuperTypes.getReferencedTypes() else aClass.getReferencedTypes() endif)
									->select( cls | not cls.oclIsTypeOf(EClass) or not cls.oclAsType(EClass).isMapEntry())
									->collect( cls | cls.getQualifiedInterfaceIdentifier())
								, Set{
										if aClass.requiresList() then Set{ 'EList' } else Set{} endif,
										if aClass.requiresMap() then Set{ 'EMap' } else Set{} endif
									}->flatten()->collect(t | ecorePackage.getQualifiedIdentifier(t))
								}->flatten()->select(s | s <> '' and s <> aClass.getQualifiedInterfaceIdentifier() );
	modules : OclAny = aClass.getModules('interface',types);
}]
[file (aPackage.getPackageDirectory() + '/' + aClass.getInterfaceFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

[if isDebug()]
// module : [aPackage.getModule()/]
// path : [getModulePath(aPackage.getModule())/]
// namespace : [getModuleNamespace(aPackage.getModule())/]

// types
[for (type : String| types)]
// [type/]
[/for]

// modules
[for (mod : OclAny | modules.mapKeys())]
// [mod/] => [modules.mapGet(mod)/]
[/for]
[/if]

[aClass.generateImports('interface', types, modules)/]

export interface [interfaceName/][for ( qualifiedIdentifier : String | interfaceExtends ) before (' extends ') separator (', ')][getImportedIdentifier( qualifiedIdentifier , modules)/][/for] {
[let properties : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->asOrderedSet()->select( isPropertyAccessors() and (isGet() or isSet()))]
	[properties.generatePropertyDeclaration(modules)/]	
[/let]
[let methods : OrderedSet(EStructuralFeature) = aClass.eStructuralFeatures->asOrderedSet()->select( isMethodAccessors() and (isGet() or isSet()))]
	[methods.generateMethodsDeclaration(modules)/]
[/let]
[let operations : OrderedSet(EOperation) = aClass.eOperations->asOrderedSet()]
[if operations->notEmpty()]
	// operations
    [operations.generateDeclaration(modules)/]
[/if]
[/let]
}

[/file]
[/template]