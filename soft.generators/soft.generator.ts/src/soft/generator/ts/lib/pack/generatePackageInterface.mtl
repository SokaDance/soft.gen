[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageInterface('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]
[import soft::generator::ts::lib::pack::generateCommon/]

[template private generateGetter(anENamedElement : ENamedElement, aPackage : EPackage, modules : OclAny )]

// Returns the meta object for the [anENamedElement.name.toUpperFirst()/]
[anENamedElement.getReflectiveGetterName()/](): [getImportedIdentifier(anENamedElement.eClass().getQualifiedInterfaceIdentifier(), modules)/]
[/template]

[template public generatePackageInterface(aPackage : EPackage) {
	ecorePackage : EPackage = getEcorePackage();
	className : String = aPackage.getInterfaceName();
		types : Set(String) = Set{
								Set{'EAttribute',
									'EReference',
									'EClass',
									'EEnum',
									'EOperation',
									'EDataType',
									'EPackage'
									}->collect(t | ecorePackage.getQualifiedInterfaceIdentifier(t)),
								Set{ aPackage.getQualifiedImplementationIdentifier(aPackage.getImplementationName()) }
							}->flatten();
	modules : OclAny = aPackage.getModules('package-interface',types);
}]
[file (aPackage.getPackageDirectory() + '/'+  aPackage.getInterfaceFileName(aPackage.getPackageName() ) , false, 'UTF-8')]
[fileComment()/]

[aPackage.generateImports('package-interface', types, modules)/]

export interface [className/] extends [getImportedIdentifier( ecorePackage.getQualifiedInterfaceIdentifier('EPackage') , modules)/] {
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    [aClass.generateGetter(aPackage,modules)/]
    [aClass.eAttributes->sortedBy(name).generateGetter(aPackage,modules)/]
    [aClass.eReferences->sortedBy(name).generateGetter(aPackage,modules)/]
    [aClass.eOperations->sortedBy(name).generateGetter(aPackage,modules)/]
[/for]
    [aPackage.eAllContents(EDataType)->sortedBy(name).generateGetter(aPackage,modules)/]
}

export function get[className/](): [className/] {
    return [aPackage.getImplementationName()/].getInstance()
}


[/file]
[/template]
