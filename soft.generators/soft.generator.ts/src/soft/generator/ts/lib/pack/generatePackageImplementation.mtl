[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generatePackage/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]
[import soft::generator::ts::lib::pack::generateCommon/]



[template public generatePackageImplementation(aPackage : EPackage){
	ecorePackage : EPackage = getEcorePackage();  
    className : String = aPackage.getImplementationName();
    allClasses :  OrderedSet(EClass) = aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
    allDataTypes : OrderedSet(EDataType) = aPackage.eAllContents(EDataType)->asOrderedSet()->sortedBy(name);
    annotationSources : OrderedSet(String) = aPackage.getAnnotationSources();
	types : Set(String) = Set {
								Set{'EAttribute',
									'EReference',
									'EClass',
									'EEnum',
									'EOperation',
									'EDataType',
									'EcoreFactory',
									'EPackageExt',
									'getEcoreFactory'
								}->collect(t | ecorePackage.getQualifiedIdentifier(t)),
								Set{aPackage.getInterfaceName(), 
									aPackage.getConstantsName(),
									'get' + aPackage.getFactoryName()
								}->collect(t | aPackage.getQualifiedIdentifier(t)), 
								aPackage.eClassifiers->filter(EClass).eAllStructuralFeatures.eType.ePackage->collect(p | p.getQualifiedInterfaceIdentifier())
	 						  }->flatten();
	modules : OclAny = aPackage.getModules('package-implementation',types);
}]
[file (aPackage.getPackageDirectory() + '/'+  aPackage.getImplementationFileName(aPackage.getPackageName()),false, 'UTF-8')]
[fileComment()/]

[aPackage.generateImports('package-implementation', types, modules)/]

export class [className/] extends [if not aPackage.isEcorePackage()]ecore.[/if]EPackageExt implements [aPackage.getInterfaceName()/] {

    private static _instance: [className/] = null
    [allClasses.generateDataMember(aPackage,modules)/]
    [allDataTypes.generateDataMember(aPackage,modules)/]

    public static getInstance(): [className/] {
        if (!this._instance) {
            this._instance = new [className/]()
        }
        return this._instance
    }

    constructor() {
        super()
        this.setName([aPackage.getConstantsName()/].eNAME)
        this.setNsPrefix([aPackage.getConstantsName()/].eNS_PREFIX)
        this.setNsURI([aPackage.getConstantsName()/].eNS_URI)
        this.setEFactoryInstance(get[aPackage.getFactoryName()/]())
        this.createPackageContents()
        this.initializePackageContents()
        this.createResource()
    }

[for (aClass : EClass | allClasses)]
    [aClass.generateGetter(aPackage,modules)/]
    [aClass.eAttributes->sortedBy(name).generateGetter(aPackage,modules)/]
    [aClass.eReferences->sortedBy(name).generateGetter(aPackage,modules)/]
    [aClass.eOperations->sortedBy(name).generateGetter(aPackage,modules)/]
[/for]
    [allDataTypes.generateGetter(aPackage,modules)/]


    private createPackageContents(): void {
[if allClasses->notEmpty() or allDataTypes->notEmpty()]
        const factory = [if not aPackage.isEcorePackage()]ecore.[/if]getEcoreFactory();
[for (aClass : EClass | allClasses)]
    
        [aClass.generateCreation(modules)/]
        [Sequence{ aClass.eStructuralFeatures, aClass.eOperations}->flatten().generateCreation(modules)/]
[/for]

        [allDataTypes.generateCreation(modules)/]
[/if]
    }

    private initializePackageContents(): void {

[if allClasses->notEmpty()]
        [allClasses.initSuperTypes(modules)/]

        [for (aClass : EClass | allClasses)]
        [aClass.generateInitialization()/]
        [Sequence{ aClass.eAttributes, aClass.eReferences, aClass.eOperations}->flatten().generateInitialization(aPackage,modules)/]
        [/for]
[/if]
[if allDataTypes->notEmpty()]
        [allDataTypes.generateInitialization(aPackage,modules)/]
[/if]
[if not aPackage.isEcorePackage()]

[for (aAnnotationSource : String | annotationSources)]
        this.initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations()
[/for]
[/if]
    }

[if not aPackage.isEcorePackage()]
[for (aAnnotationSource : String | annotationSources)]
    private initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations(): void {
        const source = "[aAnnotationSource/]"
        const factory = [if not aPackage.isEcorePackage()]ecore.[/if]getEcoreFactory();
        [for (eAnnotation : EAnnotation | aPackage.eAllContents(EAnnotation)->select( a | a.source = aAnnotationSource))]
        {
            const eAnnotation = factory.createEAnnotationFromContainer([eAnnotation.eModelElement.getPackageGetter(modules)/])
            eAnnotation.setSource(source)
            [for (eEntry : EStringToStringMapEntry | eAnnotation.details)]
            [let value : String = if eEntry.value.oclIsUndefined() then '' else eEntry.value endif]
            eAnnotation.getDetails().put("[eEntry.key/]","[value.replaceAll('\\\\','\\\\\\\\').replaceAll('"', '\\\\"').replaceAll('\\n','\\\\n').replaceAll('\\r','\\\\r')/]")
            [/let]
            [/for]
        }
        [/for]
    }

[/for]
[/if]   
}

[/file]
[/template]

[query private getElementInstance(anENamedElement : ENamedElement) : String = 
	'_' + 
	anENamedElement.getMemberName() + 
	if anENamedElement.oclIsKindOf(EClass) then 
		'Class' 
	else if anENamedElement.oclIsKindOf(EDataType) then 
		'Type' 
	else '' 
	endif endif
/]

[query private getPackageInstance(aClassifier : EClassifier, modules : OclAny ) : String =
	let aPackage : EPackage = aClassifier.ePackage in 
	getImportedIdentifier( aPackage.getQualifiedIdentifier('get'+ aPackage.getInterfaceName()+ '()'),modules )
/]

[query private getPackageGetter(aModelElement : EModelElement, modules : OclAny) : String =
    if aModelElement.oclIsKindOf(EPackage) then  
        'this'
    else if aModelElement.oclIsKindOf(EEnumLiteral) then 
        let aEnumLiteral : EEnumLiteral = aModelElement.oclAsType(EEnumLiteral) in 
        aEnumLiteral.eEnum.getPackageGetter(modules) + '.getEEnumLiteralByName("' + aEnumLiteral.name +'")' 
    else if aModelElement.oclIsKindOf(ENamedElement) then 
        aModelElement.oclAsType(ENamedElement).getPackageGetter(modules)
    else 
        'null' 
    endif endif endif/]
[query private getPackageGetter(aNamedElement : ENamedElement, modules : OclAny) : String = if oclIsUndefined() then 'null' else 'this.' + aNamedElement.getReflectiveGetterName() + '()' endif/]
[query private getPackageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature, modules : OclAny) : String = getPackageGetter(aEClassifier,aStruct.eContainingClass,modules) /]
[query private getPackageGetter(aEClass : EClass, supertype : EClass, modules : OclAny) : String = getPackageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier),modules) /]
[query private getPackageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier, modules : OclAny) : String = getPackageInstance(aEClassifier1, aEClassifier2,modules) + '.' +aEClassifier1.getReflectiveGetterName() + '()' /]
[query private getPackageInstance(aClassifier1 : EClassifier ,aClassifier2 : EClassifier , modules : OclAny) : String = if (aClassifier1.ePackage.name = aClassifier2.ePackage.name ) then 'this' else  aClassifier1.getPackageInstance(modules) endif /]
[query private getPackageGetter(anEClassifier : EClassifier, anOperation: EOperation, modules : OclAny) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'null' else getPackageInstance(anEClassifier, anOperation.eContainingClass,modules) + '.' + anEClassifier.getReflectiveGetterName() + '()' endif/]

[template private generateDataMember(anENamedElement : ENamedElement, aPackage : EPackage, modules : OclAny)] 
private [anENamedElement.getElementInstance()/]: [aPackage.getMetaType(anENamedElement,modules)/]

[/template]

[template private generateGetter(aClassifier : EClassifier, anEPackage : EPackage, modules : OclAny)]
[aClassifier.getReflectiveGetterName()/](): [anEPackage.getMetaType(aClassifier,modules)/] {
    return this.[aClassifier.getElementInstance()/]
}

[/template]

[template private generateGetter(aFeature : EStructuralFeature, anEPackage : EPackage, modules : OclAny)]
[let aClass : EClass = aFeature.eContainingClass]
[aFeature.getReflectiveGetterName()/](): [anEPackage.getMetaType(aFeature,modules)/] {
    return this.[aClass.getElementInstance()/].getEStructuralFeatures().get([aClass.eStructuralFeatures->indexOf(aFeature)-1/]) as [anEPackage.getMetaType(aFeature,modules)/]
}
[/let]
[/template]

[template private generateGetter(aOperation : EOperation, anEPackage : EPackage, modules : OclAny)]
[let aClass : EClass = aOperation.eContainingClass]
[aOperation.getReflectiveGetterName()/](): [anEPackage.getMetaType(aOperation,modules)/] {
    return this.[aClass.getElementInstance()/].getEOperations().get([aClass.eOperations->indexOf(aOperation)-1/]) as [anEPackage.getMetaType(aOperation,modules)/]
}
[/let]
[/template]

[template private generateCreation(aEClass : EClass, modules : OclAny)]
this.[aEClass.getElementInstance()/] = factory.createEClassFromContainerAndClassID(this, [aEClass.getImportedIDName(modules)/])
[/template]

[template private generateCreation(anEAttribute : EAttribute, modules : OclAny)]
factory.createEAttributeFromContainerAndClassID(this.[anEAttribute.eContainingClass.getElementInstance()/], [anEAttribute.eContainingClass.getImportedIDName(anEAttribute,modules)/])

[/template]

[template private generateCreation(anEReference : EReference, modules : OclAny)]
factory.createEReferenceFromContainerAndClassID(this.[anEReference.eContainingClass.getElementInstance()/], [anEReference.eContainingClass.getImportedIDName(anEReference,modules)/])

[/template] 

[template private generateCreation(anEOperation : EOperation, modules : OclAny)]
factory.createEOperationFromContainerAndClassID(this.[anEOperation.eContainingClass.getElementInstance()/], [anEOperation.eContainingClass.getImportedIDName(anEOperation,modules)/])

[/template]

[template private generateCreation(aTypeElement : ETypedElement, modules : OclAny)]
[/template]

[template private generateCreation(aEnum : EEnum, modules : OclAny)]
this.[aEnum.getElementInstance()/] = factory.createEEnumFromContainerAndClassID(this, [aEnum.getImportedIDName(modules)/])

[/template]

[template private generateCreation(anEDatatype : EDataType, modules : OclAny)]
this.[anEDatatype.getElementInstance()/] = factory.createEDataTypeFromContainerAndClassID(this, [anEDatatype.getImportedIDName(modules)/])

[/template]

[query private getGetter(aClassifier : EClassifier , aPackage : EPackage, modules : OclAny ) : String =
    if aClassifier.oclIsUndefined() then 'null'
    else if ( aClassifier.ePackage = aPackage ) or ( aClassifier.ePackage.name = aPackage.name ) then 'this.' + aClassifier.getElementInstance()
    else getImportedIdentifier(aPackage.getQualifiedIdentifier('get'+aClassifier.ePackage.getInterfaceName()), modules)+ '().' + aClassifier.getReflectiveGetterName() + '()'
    endif endif
/]

[template public initSuperTypes(aEClass : EClass, modules : OclAny )]
[for (superClass : EClass | aEClass.eSuperTypes)]
this.[aEClass.getElementInstance()/].getESuperTypes().add([superClass.getGetter(aEClass.ePackage,modules)/])
[/for]
[/template]

[template private generateInitialization(aEClass : EClass)]
this.initEClass(this.[aEClass.getElementInstance()/], "[aEClass.name/]", "[aEClass.getInstanceTypeName()/]", [aEClass.abstract.toString()/], [aEClass.interface.toString()/])
[/template]

[template private generateInitialization(anEAttribute : EAttribute, aPackage : EPackage, modules : OclAny )]
this.initEAttribute([anEAttribute.getPackageGetter(modules)/], [anEAttribute.eType.oclAsType(EDataType).getPackageGetter(anEAttribute,modules)/], "[anEAttribute.name/]", "[anEAttribute.defaultValueLiteral/]", [anEAttribute.lowerBound/], [anEAttribute.upperBound/], [anEAttribute.transient.toString()/], [anEAttribute.volatile.toString()/], [anEAttribute.changeable.toString()/], [anEAttribute.unsettable.toString()/], [anEAttribute.unique.toString()/], [anEAttribute.derived.toString()/], [anEAttribute.ordered.toString()/], [anEAttribute.iD.toString()/])

[/template]

[template private generateInitialization(anEReference : EReference, aPackage : EPackage , modules : OclAny)]
this.initEReference([anEReference.getPackageGetter(modules)/], [anEReference.eGenericType.eClassifier.getPackageGetter(anEReference,modules)/], [if anEReference.eOpposite.oclIsUndefined()]null[else][anEReference.eOpposite.getPackageGetter(modules)/][/if], "[anEReference.name/]", "[anEReference.defaultValueLiteral/]", [anEReference.lowerBound/], [anEReference.upperBound/], [anEReference.transient.toString()/], [anEReference.volatile.toString()/], [anEReference.changeable.toString()/], [anEReference.containment.toString()/], [anEReference.resolveProxies.toString()/], [anEReference.unsettable.toString()/], [anEReference.unique.toString()/], [anEReference.derived.toString()/], [anEReference.ordered.toString()/])

[/template]

[template private generateInitialization(anEOperation : EOperation , aPackage : EPackage , modules : OclAny)? (anEOperation.eParameters->isEmpty())]
this.initEOperation([anEOperation.getPackageGetter(modules)/], [anEOperation.eType.getPackageGetter(anEOperation,modules)/], "[anEOperation.name.toString()/]", [anEOperation.lowerBound/], [anEOperation.upperBound/], [anEOperation.unique.toString()/], [anEOperation.ordered.toString()/])

[/template]

[template private generateInitialization(anEOperation : EOperation , aPackage : EPackage , modules : OclAny)? (anEOperation.eParameters->notEmpty())]
{
    const operation = [anEOperation.getPackageGetter(modules)/]
    this.initEOperation(operation, [anEOperation.eType.getPackageGetter(anEOperation,modules)/], "[anEOperation.name.toString()/]", [anEOperation.lowerBound/], [anEOperation.upperBound/], [anEOperation.unique.toString()/], [anEOperation.ordered.toString()/])
    [for (anEParameter : EParameter | anEOperation.eParameters)]
    this.addEParameter(operation, [anEParameter.eType.getPackageGetter(anEParameter.eOperation,modules)/], "[anEParameter.name/]", 0, 1, [anEParameter.unique.toString()/], [anEParameter.ordered.toString()/])
    [/for]
}

[/template]


[template private generateInitialization(aTypedElement : ETypedElement, aPackage : EPackage, modules : OclAny)]
[/template]

[template private generateInitialization(aEnum : EEnum,anEPackage : EPackage, modules : OclAny)]
this.initEEnum([aEnum.getPackageGetter(modules)/], "[aEnum.name/]","[if aEnum.instanceTypeName.oclIsUndefined()]number[else][aEnum.getInstanceTypeName()/][/if]")
[for (anEEnumLiteral : EEnumLiteral | aEnum.eLiterals)]
this.addEEnumLiteral([aEnum.getPackageGetter(modules)/], "[anEEnumLiteral.name/]", "[anEEnumLiteral.literal/]", [anEEnumLiteral.value.toString()/])
[/for]

[/template]

[template private generateInitialization(aDataType : EDataType,anEPackage : EPackage, modules : OclAny)]
this.initEDataType([aDataType.getPackageGetter(modules)/], "[aDataType.name/]", "[aDataType.getInstanceTypeName()/]",[let defaultValue : String = aDataType.getDefaultValue(anEPackage).replaceAll('\'|"', '')][if defaultValue = '' or defaultValue = 'null']""[else]"[defaultValue/]"[/if][/let],[aDataType.serializable.toString()/])

[/template]

