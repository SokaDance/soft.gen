[comment encoding = UTF-8 /]
[module generatePackageImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]
[import soft::generator::ts::lib::pack::generateCommon/]




[template public generatePackageImplementation(anEPackage : EPackage){ 
	className : String = anEPackage.getImplementationName();
	classes :  OrderedSet(EClass) = anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
	dataTypes : OrderedSet(EDataType) = anEPackage.eAllContents(EDataType)->asOrderedSet()->sortedBy(name);
}]
[file (anEPackage.getOutputDirectory() + '/'+  anEPackage.getImplementationFileName(anEPackage.getPackageName()),false, 'UTF-8')]
[fileComment()/]

[let importTypes : OclAny = mapNew(className)
							 		.mapPut('EPackageExt',getTypeImport('EPackageExt'))
									.mapPut(anEPackage.getInterfaceName(),getTypeImport(anEPackage.getInterfaceName()))
									.mapPut(anEPackage.getConstantsName(),getTypeImport(anEPackage.getConstantsName()))
									.mapPut('get' + anEPackage.getFactoryName(),getTypeImport(anEPackage.getFactoryName()))
									.mapPut('getEcoreFactory',getTypeImport('EcoreFactory'))
									.mapPut('EcoreFactory',getTypeImport('EcoreFactory'))
									.mapPut('EAttribute',getTypeImport('EAttribute'))
									.mapPut('EClass',getTypeImport('EClass'))
									.mapPut('EDataType',getTypeImport('EDataType'))
									.mapPut('EEnum',getTypeImport('EEnum'))
									.mapPut('EOperation',getTypeImport('EOperation'))
									.mapPut('EReference',getTypeImport('EReference'))
]
[for (k : OclAny | importTypes.mapKeys()->sortedBy(oclAsType(String)))]
import {[k.oclAsType(String)/]} from [importTypes.mapGet(k).oclAsType(String)/]
[/for]
[/let]

export class [className/] extends EPackageExt implements [anEPackage.getInterfaceName()/] {

	static readonly eInstance : [className/] = new [className/]();

[for (aClass : EClass | classes)]
    [let data : Sequence(ENamedElement) = Sequence{ Sequence{ aClass } , aClass.eStructuralFeatures, aClass.eOperations}->flatten()]
    [data.generateVariableDeclaration(anEPackage)/]
    [/let]
[/for]
    [anEPackage.eAllContents(EDataType)->sortedBy(name).generateVariableDeclaration(anEPackage)/]

	private constructor() {
		super();
		this.name = [anEPackage.getConstantsName()/].eNAME;
		this.nsPrefix = [anEPackage.getConstantsName()/].eNS_PREFIX;
		this.nsURI = [anEPackage.getConstantsName()/].eNS_URI;
		this.eFactoryInstance = get[anEPackage.getFactoryName()/]();
        let factory = getEcoreFactory();
	    this.createPackageContents(factory);
    	this.initializePackageContents(factory);
	}

[for (aClass : EClass | classes)]
    [aClass.generateGetter(anEPackage)/]
    [aClass.eAttributes->sortedBy(name).generateGetter(anEPackage)/]
    [aClass.eReferences->sortedBy(name).generateGetter(anEPackage)/]
    [aClass.eOperations->sortedBy(name).generateGetter(anEPackage)/]
[/for]
    [dataTypes.generateGetter(anEPackage)/]


	private createPackageContents(factory : EcoreFactory) : void {		
[for (aClass : EClass | classes)]
		this.create[aClass.name.toUpperFirst()/]Content(factory);
[/for]
		this.createPackageEDataTypes(factory);		
	}
[for (aClass : EClass | classes)]

	private create[aClass.name.toUpperFirst()/]Content(factory : EcoreFactory) : void{
	    [aClass.generateCreation()/]
	    [aClass.eStructuralFeatures.generateCreation()/]
	    [aClass.eOperations.generateCreation()/]
	}
[/for]

	private createPackageEDataTypes(factory : EcoreFactory) : void {
    	[dataTypes.generateCreation()/]
	}

	private initializePackageContents(factory : EcoreFactory) : void {
        // Add supertypes to classes
        [classes.initSuperTypes()/]
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
        this.initialize[aClass.name.toUpperFirst()/]Content(factory);
[/for]
        this.initializePackageEDataTypes(factory);
	}
	
[for (aClass : EClass | classes)]
    private initialize[aClass.name.toUpperFirst()/]Content(factory : EcoreFactory) : void {
        [aClass.generateInitialization()/]
        [aClass.eAttributes->sortedBy(name).generateInitialization()/]
        [aClass.eReferences->sortedBy(name).generateInitialization()/]
        [aClass.eOperations->sortedBy(name).generateInitialization()/]
    }
[/for]

    private initializePackageEDataTypes(factory : EcoreFactory) : void {
        [anEPackage.eAllContents(EDataType)->sortedBy(name).generateInitialization()/]
    }

}

[/file]
[/template]



[query private getInstanceName(anENamedElement : ENamedElement) : String = 
    if anENamedElement.oclIsKindOf(EDataType) then 
        anENamedElement.oclAsType(EDataType).getInstanceName()
	else if anENamedElement.oclIsKindOf(EClass) then 
        anENamedElement.oclAsType(EClass).getInstanceName() 
    else if anENamedElement.oclIsKindOf(EStructuralFeature) then 
        anENamedElement.oclAsType(EStructuralFeature).getInstanceName()
    else if anENamedElement.oclIsKindOf(EOperation) then
        anENamedElement.oclAsType(EOperation).getInstanceName()
    else
        anENamedElement.name.toLowerFirst()
    endif endif endif endif
/]
[query private getInstanceName(aDataType : EDataType) : String = '_' + aDataType.name.toLowerFirst() + 'Type'/]
[query private getInstanceName(aClass : EClass) : String = '_' + aClass.name.toLowerFirst() + 'Class'/]
[query private getInstanceName(aStructural : EStructuralFeature) : String = '_' + aStructural.eContainingClass.name.toLowerFirst() + '_' + aStructural.name.toUpperFirst() /]
[query private getInstanceName(aOperation : EOperation) : String = '_' + aOperation.eContainingClass.name.toLowerFirst() + '_' + aOperation.name.toUpperFirst() + aOperation.getParameterListName() /]
[query private getParameterListName( aOperation : EOperation) : String = if aOperation.eParameters->notEmpty() then '_' + aOperation.getParameterListDetailsName() else '' endif /]
[query private getParameterListDetailsName(aOperation : EOperation) : String = if aOperation.eParameters->size()>1 then aOperation.eParameters->first().eType.name + '_' + aOperation.eParameters->last().eType.name else aOperation.eParameters->first().eType.name endif /]


[template private generateVariableDeclaration(anENamedElement : ENamedElement, anEPackage : EPackage)] 
private [anENamedElement.getInstanceName()/] : [anENamedElement.eClass().getInterfaceName()/]; 

[/template]

[template private generateGetter(anENamedElement : ENamedElement, anEPackage : EPackage)]
[anENamedElement.getReflectiveGetterName()/]() : [anENamedElement.eClass().getInterfaceName()/] {
    return this.[anENamedElement.getInstanceName()/];
}

[/template]

[template private generateCreation(aEClass : EClass)]
this.[aEClass.getInstanceName()/] = factory.createEClassFromContainerAndClassID(this, [aEClass.getQualifiedIDName()/]);

[/template]

[template private generateCreation(aStructuralFeature : EStructuralFeature)]
[/template]

[template private generateCreation(anEAttribute : EAttribute)]
this.[anEAttribute.getInstanceName()/] = factory.createEAttributeFromContainerAndClassID(this.[anEAttribute.eContainingClass.getInstanceName()/], [anEAttribute.eContainingClass.getQualifiedIDName(anEAttribute)/]);

[/template]

[template private generateCreation(anEReference : EReference)]
this.[anEReference.getInstanceName()/] = factory.createEReferenceFromContainerAndClassID(this.[anEReference.eContainingClass.getInstanceName()/], [anEReference.eContainingClass.getQualifiedIDName(anEReference)/]);

[/template] 

[template private generateCreation(anEOperation : EOperation)]
this.[anEOperation.getInstanceName()/] = factory.createEOperationFromContainerAndClassID(this.[anEOperation.eContainingClass.getInstanceName()/], [anEOperation.eContainingClass.getQualifiedIDName(anEOperation)/]);

[/template]

[template private generateCreation(anEDatatype : EDataType)]
this.[anEDatatype.getInstanceName()/] = factory.create[if (anEDatatype.oclIsKindOf(EEnum))]EEnum[else]EDataType[/if]FromContainerAndClassID(this, [anEDatatype.getQualifiedIDName()/]);

[/template]

[query public getPackageGetter(aReference : EReference) : String = if oclIsUndefined() then 'null' else 'this.' + aReference.getReflectiveGetterName() + '()' endif/]
[query public getPackageGetter(aAttribute : EAttribute) : String = aAttribute.getReflectiveGetterName() + '()' /]

[query private getPackageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature) : String = getPackageGetter(aEClassifier,aStruct.eContainingClass) /]
[query private getPackageGetter(aEClass : EClass, supertype : EClass) : String = getPackageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier)) /]
[query private getPackageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier) : String = getPackageInstance(aEClassifier1, aEClassifier2) + aEClassifier1.getReflectiveGetterName() + '()' /]
[query private getPackageInstance(aClassifier1 : EClassifier ,aClassifier2 : EClassifier ) : String = if(aClassifier1.ePackage.name = aClassifier2.ePackage.name ) then 'this.' else  'get' + aClassifier1.ePackage.getInterfaceName() endif /]

[query private getPackageGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'null' else getPackageInstance(anEClassifier, anOperation.eContainingClass) + anEClassifier.getReflectiveGetterName() + '()' endif/]


[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
this.[aEClass.getInstanceName()/].eSuperTypes.add([aEClass.getPackageGetter(superClass)/]);
[/for]
[/template]

[template private generateInitialization(aEClass : EClass)]
this.[aEClass.getInstanceName()/].name="[aEClass.name/]";
this.[aEClass.getInstanceName()/].abstract=[aEClass.abstract.toString()/];
this.[aEClass.getInstanceName()/].interface=[aEClass.interface.toString()/];
[/template]

[template private generateInitialization(anEAttribute : EAttribute)]
this.[anEAttribute.getInstanceName()/].name="[anEAttribute.name/]";
this.[anEAttribute.getInstanceName()/].eType=[anEAttribute.eType.oclAsType(EDataType).getPackageGetter(anEAttribute)/];
this.[anEAttribute.getInstanceName()/].lowerBound=[anEAttribute.lowerBound/];
this.[anEAttribute.getInstanceName()/].upperBound=[anEAttribute.upperBound/];
this.[anEAttribute.getInstanceName()/].transient=[anEAttribute.transient.toString()/];
this.[anEAttribute.getInstanceName()/].volatile=[anEAttribute.volatile.toString()/];
this.[anEAttribute.getInstanceName()/].changeable=[anEAttribute.changeable.toString()/];
this.[anEAttribute.getInstanceName()/].unsettable=[anEAttribute.unsettable.toString()/];
this.[anEAttribute.getInstanceName()/].unique=[anEAttribute.unique.toString()/];
this.[anEAttribute.getInstanceName()/].derived=[anEAttribute.derived.toString()/];
this.[anEAttribute.getInstanceName()/].ordered=[anEAttribute.ordered.toString()/];
this.[anEAttribute.getInstanceName()/].iD=[anEAttribute.iD.toString()/];
[if ( anEAttribute.defaultValueLiteral <> '' )]
this.[anEAttribute.getInstanceName()/].defaultValueLiteral="[anEAttribute.defaultValueLiteral/]";
[/if]

[/template]

[template private generateInitialization(anEReference : EReference)]
this.[anEReference.getInstanceName()/].name="[anEReference.name/]";
this.[anEReference.getInstanceName()/].eType=[anEReference.eGenericType.eClassifier.getPackageGetter(anEReference)/];
this.[anEReference.getInstanceName()/].lowerBound=[anEReference.lowerBound/];
this.[anEReference.getInstanceName()/].upperBound=[anEReference.upperBound/];
this.[anEReference.getInstanceName()/].transient=[anEReference.transient.toString()/];
this.[anEReference.getInstanceName()/].volatile=[anEReference.volatile.toString()/];
this.[anEReference.getInstanceName()/].changeable=[anEReference.changeable.toString()/];
this.[anEReference.getInstanceName()/].unsettable=[anEReference.unsettable.toString()/];
this.[anEReference.getInstanceName()/].unique=[anEReference.unique.toString()/];
this.[anEReference.getInstanceName()/].derived=[anEReference.derived.toString()/];
this.[anEReference.getInstanceName()/].ordered=[anEReference.ordered.toString()/];
this.[anEReference.getInstanceName()/].containment=[anEReference.containment.toString()/];
this.[anEReference.getInstanceName()/].resolveProxies=[anEReference.resolveProxies.toString()/];
[if ( anEReference.defaultValueLiteral <> '' )]
this.[anEReference.getInstanceName()/].defaultValueLiteral ="[anEReference.defaultValueLiteral/]";
[/if]
[if not anEReference.eOpposite.oclIsUndefined()]
this.[anEReference.getInstanceName()/].eOpposite=[anEReference.eOpposite.getPackageGetter()/];
[/if]

[/template]

[template private generateInitialization(anEOperation : EOperation)]
this.[anEOperation.getInstanceName()/].eType=[anEOperation.eType.getPackageGetter(anEOperation)/];
this.[anEOperation.getInstanceName()/].name="[anEOperation.name.toString()/]";
this.[anEOperation.getInstanceName()/].lowerBound=[anEOperation.lowerBound/];
this.[anEOperation.getInstanceName()/].upperBound=[anEOperation.upperBound/];
this.[anEOperation.getInstanceName()/].unique=[anEOperation.unique.toString()/];
this.[anEOperation.getInstanceName()/].ordered=[anEOperation.ordered.toString()/];
[for (anEParameter : EParameter | anEOperation.eParameters)]
{
[let factoryName : String = if anEOperation.eContainingClass.ePackage.name = 'ecore' then '' else 'ecore.' endif + 'GetFactory']
    let parameter = factory.createEParameterFromContainer(this.[anEOperation.getInstanceName()/]);
[/let]
    parameter.name="[anEParameter.name/]";
    parameter.eType=[anEParameter.eType.getPackageGetter(anEParameter.eOperation)/];
    parameter.lowerBound=0;
    parameter.upperBound=1;
    parameter.unique=true;
    parameter.ordered=true;
}
[/for]
[/template]

[template private generateInitialization(aDataType : EDataType)]
this.[aDataType.getInstanceName()/].name ="[aDataType.name/]";
[if not aDataType.instanceTypeName.oclIsUndefined() and not (aDataType.instanceTypeName = '')] 
//this.[aDataType.getInstanceName()/].instanceClass( typeOf [aDataType.instanceTypeName/]);
[/if]
[if (not aDataType.oclIsKindOf(EEnum))]
this.[aDataType.getInstanceName()/].serializable = [aDataType.serializable.toString()/];
[/if]

[/template]

