[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon]
[import soft::generator::common::generateUtils]
[import soft::generator::common::generateElement]
[import soft::generator::common::generateStructuralFeature]

[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateElement/]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]
[import soft::generator::ts::lib::generateOperation/]
[import soft::generator::ts::lib::generateReflectives/]
[import soft::generator::ts::lib::generateStructuralFeature/]

[template public generateImplementation(aClass : EClass) {
	aPackage : EPackage = aClass.ePackage; 
    ecorePackage : EPackage = getEcorePackage();  
    className : String = aClass.getImplementationName();
    classExtend : String = aClass.getClassExtends(); 
    classImplement : String = aClass.getQualifiedInterfaceIdentifier();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( getVariableName() );
    variableFeatures : Collection(EStructuralFeature) = features->select(isField());
    initializerFeatures : Collection(EStructuralFeature) = features->select(hasInitializationMethod());
    operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName());
    
	types : OrderedSet(String) = Set{ aClass.getReferencedTypes()
											->select( cls | not cls.oclIsTypeOf(EClass) or not cls.oclAsType(EClass).isMapEntry())
											->collect( cls | cls.getType() )->asSet()
									, Set{
										 	if aClass.requiresMap()  then Set{'EMap','BasicEObjectMap','EMapEntry'} else Set{} endif,
											if aClass.requiresList() then Set{'EList','BasicEList','BasicEObjectList','BasicEDataTypeList'} else Set{} endif,
		 									if aClass.hasReflectives() then Set{'EObject','EObjectInternal','EList','ENotifyingList','ENotificationChain','isEObjectList'} else Set{} endif,
											if features->exists(requiresNotification()) then Set{'ENotification','ENotificationChain','EventType','Notification','EOPPOSITE_FEATURE_BASE'} else Set{} endif,
											Set{'EClass','isEObjectInternal'}
									    }->flatten()->collect(t | ecorePackage.getQualifiedInterfaceIdentifier(t))->asSet()
									, Set { 
											aPackage.getConstantsName(), 
											'get' + aPackage.getPackageName() 
										  }->collect(t | aPackage.getQualifiedInterfaceIdentifier(t))->asSet()
									, Set {
											classImplement,
											classExtend
										  }
									}->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s);
	modules : OclAny = aClass.getModules('implementation',types);
}]
[file (aPackage.getPackageDirectory() + '/' + aClass.getImplementationFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

[aClass.generateImports('implementation', types, modules)/]

export class [className/] extends [getImportedIdentifier(classExtend, modules)/] implements [getImportedIdentifier(classImplement,modules)/] {
[let dataDeclarationFeatures : Set(EStructuralFeature) = features->select( isField() )]
    [dataDeclarationFeatures.generateVariableDeclaration(modules)/]
[/let]

    constructor() {
        super()
        [variableFeatures.generateVariableInitialization(modules)/]
    }

    eStaticClass(): [if not aPackage.isEcorePackage()]ecore.[/if]EClass {
        return get[aPackage.getInterfaceName()/]().[aClass.getReflectiveGetterName()/]()
    }

[let properties : OrderedSet(EStructuralFeature) = features->select( isPropertyAccessors() and (isGet() or isSet()))]
	[properties.generatePropertyImplementation(aClass,modules)/]	
[/let]

    [features.generateMethodsImplementation(aClass,modules)/]

    [operations.generateImplementation(aClass,modules)/]

    [initializerFeatures.generateVariableInitializationMethodDefinition(aClass,modules)/]

    [aClass.generateReflectivesDefinition(modules)/]
}

[/file]
[/template]