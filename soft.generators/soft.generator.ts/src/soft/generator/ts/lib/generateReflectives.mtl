[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateReflectives('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateReflectives/]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]
[import soft::generator::ts::lib::generateStructuralFeature/]

[query public hasReflectives(aClass : EClass) : Boolean = 
    aClass.hasElementID() or
    aClass.getEGetFeatures()->notEmpty() or
    aClass.getESetFeatures()->notEmpty() or
    aClass.getEUnSetFeatures()->notEmpty() or
    aClass.getEIsSetFeatures()->notEmpty() or
    aClass.getEInvokeOperations()->notEmpty() or
    aClass.getEInverseAddFeatures()->notEmpty() or
    aClass.getEInverseRemoveFeatures()->notEmpty()/]

[template public generateReflectivesDefinition(aClass : EClass,modules : OclAny)]
[if aClass.hasReflectives()]
[if aClass.hasElementID()]
[aClass.generateElementIDDefinition(modules)/]

[/if]
[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetDefinition(modules)/]

[/if]
[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetAsyncDefinition(modules)/]

[/if]
[if aClass.getESetFeatures()->notEmpty()]
[aClass.generateESetDefinition(modules)/]

[/if]
[if aClass.getEUnSetFeatures()->notEmpty()]
[aClass.generateEUnSetDefinition(modules)/]

[/if]
[if aClass.getEIsSetFeatures()->notEmpty()]
[aClass.generateEIsSetDefinition(modules)/]

[/if]
[if aClass.getEInvokeOperations()->notEmpty()]
[aClass.generateEInvokeDefinition(modules)/]

[/if]
[if aClass.getEInverseAddFeatures()->notEmpty()]
[aClass.generateEInverseAddDefinition(modules)/]

[/if]
[if aClass.getEInverseRemoveFeatures()->notEmpty()]
[aClass.generateEInverseRemoveDefinition(modules)/]
[/if]
[/if]
[/template]

[template private generateElementIDDefinition(aClass : EClass,modules : OclAny)]
[let aPackage : EPackage = aClass.ePackage]
[let mixinClasses : Set(EClass) = aClass.getMixinClasses()]
[if mixinClasses->exists( c : EClass | c.getImplementedFeatures()->notEmpty())] 
eDerivedFeatureID(eContainer: [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID : number): number {
    let eClass = eContainer as [if not aPackage.isEcorePackage()]ecore.[/if]EClass;
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == get[aPackage.getInterfaceName()/]().get[aMixinClass.getElementAccessorName()/]()) {
        switch (featureID) {
[for (aFeature : EStructuralFeature | aMixinClass.getImplementedFeatures() )]
            case [aMixinClass.getImportedIDName(aFeature,modules)/] : {
                return [aClass.getImportedIDName(aFeature,modules)/]
            }
[/for]
            default: {
                return -1
            }
        }
    }
[/for]  
    return super.eDerivedFeatureID(eContainer, featureID);
}
[/if]

[if mixinClasses->exists( c : EClass | c.getImplementedOperations()->notEmpty())]
eDerivedOperationID(eContainer: [if not aPackage.isEcorePackage()]ecore.[/if]EObject, operationID: number): number {
    let eClass = eContainer as [if not aPackage.isEcorePackage()]ecore.[/if]EClass;
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == get[aPackage.getInterfaceName()/]().get[aMixinClass.getElementAccessorName()/]()) {
        switch (featureID) {
[for (aOperation : EOperation | aMixinClass.getImplementedOperations() )]
            case [aMixinClass.getImportedIDName(aOperation,modules)/] : {
                return [aClass.getImportedIDName(aOperation,modules)/];
            }
[/for]
            default: {
                return -1
            }
        }
    }
[/for]  
    return super.eDerivedOperationID(eContainer, featureID);
}
[/if]
[/let]
[/let]
[/template]

[template private generateEGetDefinition(aClass : EClass,modules : OclAny)]
[let aPackage : EPackage = aClass.ePackage]
eGetFromID(featureID: number, resolve: boolean): any {
    switch (featureID) {
    [for (anStructFeature : EStructuralFeature | aClass.getEGetFeatures()->asOrderedSet()->sortedBy(name))]
        case [aClass.getImportedIDName(anStructFeature,modules)/]: {
    [if anStructFeature.isProxy()]
        [if anStructFeature.isListType()]
			const list = this.[anStructFeature.getGetterName()/]()
            return !resolve && [if not aPackage.isEcorePackage()]ecore.[/if]isEObjectList(list) ? list.getUnResolvedList() : list
        [else]
			return resolve ? this.[anStructFeature.getGetterName()/]() : this.basic[anStructFeature.getGetterName().toUpperFirst()/]()
        [/if]       
    [else] 
            return this.[anStructFeature.getGetterName()/]()
    [/if]
        }
    [/for]
        default: {
            return super.eGetFromID(featureID, resolve)
        }
    }
}
[/let]
[/template]

[template private generateEGetAsyncDefinition(aClass : EClass,modules : OclAny){
	aPackage : EPackage = aClass.ePackage;
	proxies :Set(EStructuralFeature) =  aClass.getEGetFeatures()->select( isProxy() and not isListType())->asOrderedSet()->sortedBy(name);
}]
async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
[if proxies->isEmpty()]
	return this.eGetFromID(featureID, resolve)
[else]
	if (resolve) {
		switch (featureID) {
    [for (aFeature : EStructuralFeature | proxies)]
        	case [aClass.getImportedIDName(aFeature,modules)/]:
    			return this.[aFeature.getGetterName()/]Async()
    [/for]
		}
    }
	return this.eGetFromID(featureID, resolve)
[/if]    
}
[/template]


[template private generateEIsSetDefinition(aClass : EClass,modules : OclAny)]
eIsSetFromID(featureID: number): boolean {
    switch (featureID) {
[for (anStructFeature : EStructuralFeature | aClass.getEIsSetFeatures()->sortedBy(name))]
        case [aClass.getImportedIDName(anStructFeature,modules)/]: {
            return [anStructFeature.generateComparison(modules)/]
        }
[/for]
        default: {
            return super.eIsSetFromID(featureID)
        }
    }
}
[/template]

[template private generateESetDefinition(aClass : EClass,modules : OclAny)]
eSetFromID(featureID: number, newValue: any) {
    switch (featureID) {
[for (anStructFeature : EStructuralFeature | aClass.getESetFeatures()->sortedBy(name))]
        case [aClass.getImportedIDName(anStructFeature,modules)/]: {
    [if anStructFeature.isMapType()]
    [let aPackage : EPackage = aClass.ePackage]
    [let aDataType : EGenericType = anStructFeature.eGenericType]
			const list = this.[anStructFeature.getGetterName()/]()
            list.clear()
            list.addAll(newValue as [if not aPackage.isEcorePackage()]ecore.[/if]EList<[if not aPackage.isEcorePackage()]ecore.[/if]EMapEntry<[aDataType.generateMapTypeParameters(modules)/]>>)
    [/let]
    [/let]
    [elseif anStructFeature.isListType()]
            const list = this.[anStructFeature.getGetterName()/]()
            list.clear()
            list.addAll(newValue as [anStructFeature.generateType(modules)/])
    [else]
			this.[anStructFeature.getSetterName()/](newValue as [anStructFeature.generateType(modules)/])
	[/if]
            break
        }
[/for]
        default: {
        	super.eSetFromID(featureID, newValue)
        }
    }
}
[/template]

[template private generateEUnSetDefinition(aClass : EClass,modules : OclAny)]
eUnsetFromID(featureID: number) {
    switch (featureID) {
[for (aStructFeature : EStructuralFeature | aClass.getEUnSetFeatures()->sortedBy(name))]
        case [aClass.getImportedIDName(aStructFeature,modules)/]: {
    [if aStructFeature.isListType() and not aStructFeature.isUnSettable()]
            this.[aStructFeature.getGetterName()/]().clear()
    [elseif aStructFeature.isUnSet() and not aStructFeature.isPropertyAccessors()]
            this.[aStructFeature.getUnSetterName()/]()
    [elseif aStructFeature.oclIsKindOf(EReference)]
			this.[aStructFeature.getSetterName()/](null)
	[else]
        [let aAttribute : EAttribute = aStructFeature.oclAsType(EAttribute)]
        [let defaultValue : String = aAttribute.getDefaultValue(modules)]
        [let newValue : String = if defaultValue <> '' then defaultValue else 'null' endif]
			this.[aStructFeature.getSetterName()/]([if defaultValue <> ''][defaultValue/][else]null[/if])
		[/let]
		[/let]
        [/let]
    [/if]
            break
        }
[/for]
        default: {
            super.eUnsetFromID(featureID)
        }
    }
}
[/template]

[template private generateEInvokeDefinition(aClass : EClass,modules : OclAny)]
[let aPackage : EPackage = aClass.ePackage]
eInvokeFromID(operationID: number , args: [if not aPackage.isEcorePackage()]ecore.[/if]EList<any>): any {
    switch (operationID) {
    [for ( eOperation : EOperation | aClass.getEInvokeOperations()->sortedBy( getOperationName() ) )]
        case [aClass.getImportedIDName(eOperation,modules)/]: {
        [if eOperation.isVoid() ]
            this.[eOperation.generateOperationInvoke(modules)/]
            return null
        [else]
            return this.[eOperation.generateOperationInvoke(modules)/] 
        [/if]
        }
    [/for]
        default: {
            return super.eInvokeFromID(operationID,args)
        }
    }
}
[/let]
[/template]

[template private generateOperationInvoke(eOperation : EOperation , modules : OclAny)]
[eOperation.getOperationName()/]([for (eParameter : EParameter | eOperation.eParameters) separator (',')][let needCast : Boolean = not(not eParameter.oclIsUndefined() and eParameter.upperBound = 1 and not eParameter.eGenericType.oclIsUndefined() and eParameter.eGenericType.eClassifier.isAny())]args.get([i-1/])[if needCast] as [eParameter.generateType(modules)/][/if][/let][/for])
[/template]

[template private generateVariableOrGetter(anStructFeature : EStructuralFeature) post (trim())]
	[if isField()][anStructFeature.getVariableName()/][else][anStructFeature.getGetterName()/]()[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, modules : OclAny) ? (oclIsKindOf(EAttribute) and not eType.isAny()) post (trim()){
	aAttribute : EAttribute = anStructFeature.oclAsType(EAttribute);
}]
[if isListType()]
	[if isField()]this.[anStructFeature.getVariableName()/] && [/if]!this.[anStructFeature.generateVariableOrGetter()/].isEmpty()
[else] 
    this.[anStructFeature.generateVariableOrGetter()/] != [aAttribute.getDefaultValue(modules)/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, modules : OclAny ) ? (oclIsKindOf(EReference) and not eType.isAny()) post (trim()){
	aReference : EReference = anStructFeature.oclAsType(EReference);
}]
[if isListType()]
    [if isField()]this.[aReference.getVariableName()/] && [/if]!this.[aReference.generateVariableOrGetter()/].isEmpty()
[elseif aReference.isBackReference() ]
    [if aReference.eType.name <> 'EBoolean']
    this.[aReference.generateVariableOrGetter()/] != null
    [else]
    this.[aReference.generateVariableOrGetter()/]
    [/if]
[else]
	this.[aReference.generateVariableOrGetter()/] != [aReference.getDefaultValue(modules)/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, modules : OclAny) ? (eType.isAny()) post (trim())]
this.[generateVariableOrGetter(anStructFeature)/] != null
[/template]

[template public generateEInverseAddDefinition(aClass : EClass,modules : OclAny) ]
[let aPackage : EPackage = aClass.ePackage]
eBasicInverseAdd(otherEnd: [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID: number, notifications: [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain): [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
    switch (featureID) {
[for ( aFeature : EStructuralFeature | aClass.getEInverseAddFeatures()->sortedBy(name) )]
        case [aClass.getImportedIDName(aFeature,modules)/]: {
    [if aFeature.isMapType()]
            return notifications
    [elseif aFeature.isListType()]
        [let type : String = aFeature.eGenericType.generateType(modules)]
            const list = this.[aFeature.getGetterName()/]() as [if not aPackage.isEcorePackage()]ecore.[/if]ENotifyingList<[type/]>
            const end = otherEnd as [type/]
        [/let]      
            return list.addWithNotification(end, notifications);
    [elseif aFeature.isContainer()]
            let msgs = notifications
            if (this.eContainer() != null) {
                msgs = this.eBasicRemoveFromContainer(msgs)
            }
        [if aFeature.isBasicSet()]
            return this.basicSet[aFeature.getPropertyName().toUpperFirst()/](otherEnd as [aFeature.generateType(modules)/], msgs)
        [else]
            return this.eBasicSetContainer(otherEnd, [aClass.getImportedIDName(aFeature,modules)/], msgs)
        [/if]
    [else]
            let msgs = notifications;
			const [aFeature.name/] = this.[if aFeature.isProxy()]basic[aFeature.getGetterName().toUpperFirst()/]()[else][aFeature.getGetterName()/]()[/if]	
            if ([if not aPackage.isEcorePackage()]ecore.[/if]isEObjectInternal([aFeature.name/])) {
            [if aFeature.isContains()]
                msgs = [aFeature.name/].eInverseRemove(this, [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aFeature,modules)/], msgs)
            [else]
                [let reverseFeature : EStructuralFeature = aFeature.oclAsType(EReference).eOpposite]
                msgs = [aFeature.name/].eInverseRemove(this, [reverseFeature.eContainingClass.getImportedIDName(reverseFeature,modules)/], msgs)
                [/let]
            [/if]
            }
            return this.basic[aFeature.getSetterName().toUpperFirst()/](otherEnd as [aFeature.generateType(modules)/],msgs)
    [/if]
        }
[/for]
        default: {
            return super.eBasicInverseAdd(otherEnd, featureID, notifications)
        }
    }
}
[/let]
[/template]

[template public generateEInverseRemoveDefinition(aClass : EClass,modules : OclAny) ? (aClass.getEInverseRemoveFeatures()->notEmpty()) ]
[let aPackage : EPackage = aClass.ePackage]
eBasicInverseRemove(otherEnd: [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID: number, notifications: [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain): [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
    switch (featureID) {
[for ( aFeature : EStructuralFeature | aClass.getEInverseRemoveFeatures()->sortedBy(name) )]
        case [aClass.getImportedIDName(aFeature,modules)/]: {
    [if aFeature.isMapType()]
            return notifications
    [elseif aFeature.isListType()]
        [let type : String = aFeature.eGenericType.generateType(modules)]
            const list = this.[aFeature.getGetterName()/]() as [if not aPackage.isEcorePackage()]ecore.[/if]ENotifyingList<[type/]>
            const end = otherEnd as [type/]
            return list.removeWithNotification(end, notifications)
        [/let]
    [elseif aFeature.isContainer() and not aFeature.isBasicSet()]
            return this.eBasicSetContainer(null, [aClass.getImportedIDName(aFeature,modules)/], notifications)
    [elseif aFeature.isUnSet()]
            return this.basicUnSet[aFeature.getPropertyName().toUpperFirst()/](notifications)
    [else]
            return this.basicSet[aFeature.getPropertyName().toUpperFirst()/](null, notifications)
    [/if]
        }
[/for]
        default: {
            return super.eBasicInverseRemove(otherEnd, featureID, notifications)
        }
    }
}
[/let]
[/template]
