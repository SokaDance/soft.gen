[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, value. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateStructuralFeature /]

[query private getPackageEnumTypes(aPackage : EPackage) : Set(String) =
	 aPackage.eAllContents(EEnum)->iterate( aEnum : EEnum ; res : Set(String) = Set{} | ( 
                                                	res->union(Set{ aEnum.name
                                                              	  , aEnum.name.toLowerFirst() + 'ToString'
                                                                  , aEnum.name.toLowerFirst() + 'FromString' 
                                                                  }
													          )
										  ))->collect(t | aPackage.getQualifiedIdentifier(t))->asSet()
/]

[template public generateFactoryTests(aPackage : EPackage) {
	ecorePackage : EPackage = getEcorePackage();
	className : String = aPackage.getFactoryImplementationName(); 
	allClasses : Sequence(EClass) = aPackage.eAllContents(EClass)->select( cls | not cls.interface and not cls.abstract)->sortedBy(name);
	allDataTypes : Sequence(EDataType) = aPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name);
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.' else '' endif;
	types : Set(String) = Set{ allClasses->collect(c | c.getQualifiedInterfaceIdentifier())
	                            , aPackage.eClassifiers->selectByKind(EClass)->collect(c | c.getQualifiedInterfaceIdentifier() )
								, Set{'EObject' , 'EClass', 'EFactoryExt' , 'EDataType','EList'}->collect(t | ecorePackage.getQualifiedIdentifier(t))
								, Set{aPackage.getConstantsName(), aPackage.getFactoryName(), aPackage.getFactoryImplementationName()}->collect(t | aPackage.getQualifiedIdentifier(t))->asSet()
								, aPackage.getPackageEnumTypes()
								}->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s);
	modules : OclAny = aPackage.getModules('factory-tests',types);
 } ]
[file (aPackage.getPackageDirectory() + '/' + aPackage.getFactoryTestFileName(aPackage.name), false, 'UTF-8')]
[fileComment()/]

[if aPackage.isVitest()]
import { describe, expect, test } from "vitest"
[/if]
import { anything , capture, instance, mock, reset, verify, when } from "ts-mockito";
[aPackage.generateImports('factory-tests', types, modules)/]	

describe("[className/]", () => {

	test("createFromEClass", () => {
        let factory = [className/].getInstance()
		{
			let mockEClass = mock<[ecorePrefix/]EClass>()
			let eClass = instance(mockEClass)
			when(mockEClass.getClassifierID()).thenReturn(-1)
			expect(() => factory.create(eClass)).toThrow(Error)
		}
		[for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
		{
			let mockEClass = mock<[ecorePrefix/]EClass>()
			let eClass = instance(mockEClass)
			when(mockEClass.getClassifierID()).thenReturn([aClass.getImportedIDName(modules)/])
			expect(factory.create(eClass)).not.toBeNull()
		}
	    [/for]
	});

[for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
	test("create[aClass.name/]", () => {
		expect([className/].getInstance().create[aClass.name/]()).not.toBeNull()
	})

	[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
	[for(aReference:EReference | ref->sortedBy(name))]
		[let eClassType : EClass = aReference.eType.oclAsType(EClass)]
	test("create[aClass.name/]FromContainer", () => {
		let mockContainer = mock<[getImportedIdentifier(eClassType.getQualifiedInterfaceIdentifier(), modules)/]>()
		let container = instance(mockContainer)
		[if(aReference.eOpposite.upperBound <> 1)]
		let mockList = mock<[ecorePrefix/]EList<[aReference.eOpposite.eGenericType.generateListTypeParameters(modules)/]>>()
		let list = instance(mockList)
		when(mockList.add(anything())).thenReturn(true)
		when(mockContainer.[aReference.eOpposite.generateGetCall()/]).thenReturn(list)
		[/if]
		expect([className/].getInstance().create[aClass.name/]FromContainer(container)).not.toBeNull()
	});

		[if(aClass.getElementIDAccessorName().size() > 0)]
	test("create[aClass.name/]FromContainerAndClassID", () => {
		let mockContainer = mock<[getImportedIdentifier(eClassType.getQualifiedInterfaceIdentifier(), modules)/]>()
		let container = instance(mockContainer)
		[if(aReference.eOpposite.upperBound <> 1)]
		let mockList = mock<[ecorePrefix/]EList<[aReference.eOpposite.eGenericType.generateListTypeParameters(modules)/]>>()
		let list = instance(mockList)
		when(mockList.add(anything())).thenReturn(true)
	when(mockContainer.[aReference.eOpposite.generateGetCall()/]).thenReturn(list)
		[/if]
		expect([className/].getInstance().create[aClass.name/]FromContainerAndClassID(container,0)).not.toBeNull()
	});
		[/if]
		[/let]
	[/for]
	[/let]
[/for]

	test("createFromStringInvalid", () => {
		let mockDataType = mock<[ecorePrefix/]EDataType>()
		let eDataType = instance(mockDataType)
		when(mockDataType.getClassifierID()).thenReturn(-1)
		expect(() => [className/].getInstance().createFromString(eDataType, "")).toThrow(Error)
	});
	test("convertToStringInvalid", () => {
		let mockDataType = mock<[ecorePrefix/]EDataType>()
		let eDataType = instance(mockDataType)
		when(mockDataType.getClassifierID()).thenReturn(-1)
		expect(() => [className/].getInstance().convertToString(eDataType, null)).toThrow(Error)
	})
[for (aDataType : EDataType | allDataTypes)]
	[ePackage.generateCreateFrom(aDataType,modules)/]
	[ePackage.generateConvertTo(aDataType,modules)/]
[/for]
})
[/file]
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny)? (aDataType.oclIsTypeOf(EEnum))]
[let eEnum : EEnum = aDataType.oclAsType(EEnum)]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
[for (eLiteral : EEnumLiteral | eEnum.eLiterals->asOrderedSet()->sortedBy(name) )]
	expect(factory.createFromString(eDataType, "[eLiteral.name/]")).toStrictEqual([eEnum.name/].[eLiteral.getConstantsName()/])
[/for]
})
[/let]
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'string')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "test")).toStrictEqual("test")
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'number')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'byte')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "")).toStrictEqual(0)
	expect(factory.createFromString(eDataType, "a")).toStrictEqual(97)
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'Uint8Array')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "ab")).toStrictEqual(Uint8Array.from(['['/]97,98[']'/]))
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'boolean')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "true")).toBeTruthy()
	expect(factory.createFromString(eDataType, "false")).toBeFalsy()
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'Date')]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.createFromString(eDataType, "2020-05-12T17:33:10.770Z")).toEqual(new Date(Date.UTC(2020, 4, 12, 17, 33, 10, 770)))
})
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType, modules : OclAny)]
test("create[aDataType.name/]FromString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(() => factory.createFromString(eDataType, "")).toThrow(Error)
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny)? (aDataType.oclIsTypeOf(EEnum))]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
[for (eLiteral : EEnumLiteral | aDataType.oclAsType(EEnum).eLiterals->asOrderedSet()->sortedBy(name) )]
	expect(factory.convertToString(eDataType, [eEnum.name/].[eLiteral.getConstantsName()/])).toStrictEqual("[eLiteral.name/]")
[/for]
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'string')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType, "test")).toStrictEqual("test")
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'boolean')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType,true)).toStrictEqual("true")
	expect(factory.convertToString(eDataType,false)).toStrictEqual("false")
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'number')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType,3)).toStrictEqual("3")
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'byte')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType,97)).toStrictEqual("a")
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'Uint8Array')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType,Uint8Array.from(['['/]97,98[']'/]))).toStrictEqual("ab")
})
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny) ? (aDataType.getType() = 'Date')]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(factory.convertToString(eDataType,new Date(Date.UTC(2020, 4, 12, 17, 33, 10, 770)))).toStrictEqual("2020-05-12T17:33:10.770Z")
})
[/template]


[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType, modules : OclAny)]
test("convert[aDataType.name/]ToString", () => {
	let factory = [aPackage.getFactoryImplementationName()/].getInstance()
	let mockDataType = mock<[if not aPackage.isEcorePackage()]ecore.[/if]EDataType>()
	let eDataType = instance(mockDataType)
	when(mockDataType.getClassifierID()).thenReturn([aDataType.getImportedIDName(modules)/])
	expect(() => factory.convertToString(eDataType, "")).toThrow(Error)
})
[/template]
