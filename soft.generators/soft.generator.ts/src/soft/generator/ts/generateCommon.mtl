[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]



[**
 * package property
*/]
[query public hasPackageProperty(anPackage : EPackage, aProperty : String ) : Boolean =
	let property : OclAny = getProperty(aProperty) in 
	if property.oclIsUndefined() or property = '' then
		anPackage.hasKey(aProperty)
	else
		true
	endif
/]

[query public getPackageProperty(anPackage : EPackage, aProperty : String ) : String =
	let property : OclAny = getProperty(aProperty) in 
	if property.oclIsUndefined() or property = '' then
		anPackage.valueKey(aProperty)
	else
		property
	endif
/]


[**
 * return the package output directory. 
 * property: packageDir
 * default : .
*/]
[query public getPackageDirectory( anPackage : EPackage ) : String =
	let replacement : String = if anPackage.hasPackageProperty('packageDir') 
							   then anPackage.getPackageProperty('packageDir') 
							   else '$1' endif in
	anPackage.name.replaceFirst('(.*)', replacement)
/]

[**
 * return the package module resolution. 
 * property: moduleResolution
 * default : nodenext
*/]
[query public getModuleResolution(anPackage : EPackage) : String =
 	if anPackage.hasPackageProperty('moduleResolution')
	then anPackage.getPackageProperty('moduleResolution').toLower()
	else 'nodenext'
	endif
/]

[**
 * return the package test framework. 
 * property: testFramework
 * default : jest
*/]
[query public getTestFramework(anPackage : EPackage) : String =
 	if anPackage.hasPackageProperty('testFramework')
	then anPackage.getPackageProperty('testFramework').toLower()
	else 'jest'
	endif
/]


[**
 * return true if the package test framework is vitest 
*/]
[query public isVitest(anPackage : EPackage) : Boolean =
	anPackage.getTestFramework() = 'vitest' 
/]

[query public isExplicitFileExtension(anPackage : EPackage) : Boolean =
	let moduleResolution : String = anPackage.getModuleResolution() in
	moduleResolution = 'nodenext' or moduleResolution = 'node16'
/]

[query public isSyntheticDefaultImports (anPackage : EPackage) : Boolean =
	if anPackage.hasPackageProperty('allowSyntheticDefaultImports')
	then anPackage.getPackageProperty('allowSyntheticDefaultImports') = 'true'
	else false
	endif
/]

[**
 * return the package accesors type for features. 
 * property: accessors
 * default : method
*/]
[query public getAccessorsType(aPackage : EPackage) : Sequence(String) =
	if aPackage.hasPackageProperty('accessors') then
		aPackage.getPackageProperty('accessors').tokenize(',')
	else
		Sequence{'method'}
	endif 
/]

[**
 * return true if feature accessors are defined as property 
*/]
[query public isPropertyAccessors(aPackage : EPackage) : Boolean = 
	aPackage.getAccessorsType()->includes('property') 
/]

[**
 * return true if feature accessors are defined as property 
*/]
[query public isPropertyAccessors(aFeature : EStructuralFeature) : Boolean =
	let aPackage : EPackage = aFeature.getEPackage() in 
	aPackage.isPropertyAccessors()
/]

[**
 * return true if feature accessors are defined as methods 
*/]
[query public isMethodAccessors(aPackage : EPackage) : Boolean = 
	aPackage.getAccessorsType()->includes('method') 
/]

[**
 * return true if feature accessors are defined as methods 
*/]
[query public isMethodAccessors(aFeature : EStructuralFeature) : Boolean =
	let aPackage : EPackage = aFeature.getEPackage() in 
	aPackage.isMethodAccessors()
/]


[**
 * File Comments 
*/]
[template public fileComment(aAny : OclAny)]
// Code generated by soft.generator.ts. DO NOT EDIT.

[getFileNotes()/]
[/template]

[query public hasExtension( aModelElement : EModelElement ) : Boolean = hasKey('extension') and valueKey('extension' )='true'/]
[query public isExported( aNamedElement : ENamedElement ) : Boolean = if ( hasKey('exported') ) then valueKey('exported') = 'true' else false endif/]

[**
 * Factory / Package / Classes Interfaces and Implementations Names  
*/]
[** search for an annotation in an element and in its ancestors if not present. **/]
[query private getAncestor( aElement : EModelElement ) : EModelElement = 
if aElement.oclIsKindOf(EOperation) then aElement.oclAsType(EOperation).eContainingClass
else if aElement.oclIsKindOf(EStructuralFeature) then aElement.oclAsType(EStructuralFeature).eContainingClass
else if aElement.oclIsKindOf(EClass) then aElement.oclAsType(EClass).ePackage
else null
endif endif endif 
/]

[query private getAncestors( aElement : EModelElement ) : Sequence(EModelElement) = 
    let ancestor : EModelElement = aElement.getAncestor() in
    if ( ancestor.oclIsUndefined() ) then
        Sequence(EModelElement){}
    else
        ancestor.getAncestors()->prepend( ancestor )
    endif
/]

[query private getAnnotationValue(aElement : EModelElement, aKey:String ) : String =
    if aElement.hasKey(aKey) then
        aElement.valueKey( aKey )
    else
        let ancestor : EModelElement = aElement.getAncestor() in
        if ancestor.oclIsUndefined() then
            null
        else
            ancestor.getAnnotationValue(aKey)
        endif
    endif     
/]
[** Retrieve a key in an element and its ancestors and then regexp replace the value with the default rule**/]
[query private getElementName( aElement : ENamedElement, aKey:String ) : String = aElement.getElementName(aElement.name, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String ) : String = aElement.getElementName(aName, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String , defaultRule : String ) : String =
    let value : String = aElement.getAnnotationValue( aKey ) in
    let rule : String = if value.oclIsUndefined() then defaultRule else value endif in
    if rule.oclIsUndefined() then
        aName
    else
        let index : Integer = rule.index( ':' ) in
        let pattern : String = if index = -1 then '(.*)' else rule.substring(1, index - 1) endif in
        let replacement : String = if index = -1 then rule else rule.substring(index + 1) endif in
        aName.replaceFirst( pattern , replacement )
    endif
/]

[** Factory Names **/]
[query public getFactoryName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'factoryName','$1Factory').toUpperFirst()/]
[query public getFactoryImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getFactoryName() )/]
[query public getFactoryExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( aPackage.getFactoryName() )/]

[** Package Names **/]
[query public getPackageName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'packageName','$1Package').toUpperFirst()/]

[** Interface Names **/]
[query public getInterfaceName( aClass : EClass ) : String = aClass.getInterfaceName(aClass.name)/]
[query public getInterfaceName( aPackage : EPackage ) : String = aPackage.getInterfaceName( getPackageName() )/]
[query private getInterfaceName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceName').toUpperFirst() /]

[** Implementation Names **/]
[query public getImplementationName( aClass : EClass ) : String = aClass.getImplementationName( aClass.name )/]
[query public getImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getPackageName() ) /]
[query private getImplementationName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationName', '$1Impl')/]

[** Constants Names **/]
[query public getConstantsName( aPackage : EPackage ) : String = aPackage.getConstantsName( aPackage.name.toUpperFirst() ) /]
[query private getConstantsName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'constantsName', '$1Constants')/]

[** Extension Names **/]
[query public getExtensionName( aClass : EClass ) : String = aClass.getExtensionName(aClass.name )/]
[query public getExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( getPackageName() )/]
[query private getExtensionName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'extensionName', '$1Ext')/]

[** FileNames **/]
[query public getInterfaceFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceFileName', '$1.ts')/]
[query public getImplementationFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationFileName', '$1Impl.ts')/]
[query public getImplementationTestFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationTestsFileName', '$1Impl.test.ts')/]
[query public getFactoryTestFileName( aNamedElement : ENamedElement, packageName : String ) : String = aNamedElement.getElementName( packageName.toUpperFirst() + 'Factory', 'factoryTestFileName', '$1Impl.test.ts')/]
[query public getExtensionFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'extensionFileName', '$1Ext.ts')/]
[query public getConstantsFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'constantsFileName', '$1.ts')/]
[query public getInternalFileName( aPackage : EPackage ) : String = aPackage.getElementName( aPackage.getPackageName(), 'internalFileName', 'internal.ts')/]
[query public getIndexFileName( aPackage : EPackage ) : String = aPackage.getElementName( aPackage.getPackageName(), 'indexFileName', 'index.ts')/]

[query private getElementTypeName(anENamedElement : ENamedElement) : String =
if anENamedElement.oclIsTypeOf(EClass) then 'Class'
else if anENamedElement.oclIsTypeOf(EAttribute) then 'Attribute'
else if ( anENamedElement.oclIsTypeOf(EOperation) ) then 'Operation'
else if ( anENamedElement.oclIsTypeOf(EReference) ) then 'Reference'
else ''
endif endif endif endif
/]

[** Accessors Names **/]
[query private getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'is' else 'get' endif/]

[query public getSetterName(feature : EStructuralFeature) : String   = feature.getElementName( feature.name.toUpperFirst(), 'setterName', 'set$1')/]

[query public getGetterName(feature : EStructuralFeature) : String   = feature.getElementName( feature.name.toUpperFirst(), 'getterName', feature.getterPrefix() + '$1')/]

[query public getUnSetterName(feature : EStructuralFeature) : String = feature.getElementName( feature.name.toUpperFirst(), 'unSetterName', 'unSet$1')/]

[query public getIsSetName(feature : EStructuralFeature) : String    = feature.getElementName( feature.name.toUpperFirst(), 'isSetName', 'isSet$1')/]

[query public getOperationName(aOperation : EOperation ) : String = aOperation.getElementName( aOperation.name , 'operationName' )/]

[query public getParameterName(aParameter : EParameter) : String =
 	let n : String = aParameter.name in
	if n = 'arguments' then 'args'
	else n
	endif  
/]

[query public getPropertyName( aFeature : EStructuralFeature ) : String =
if aFeature.eType.name = 'EBoolean' then 
	'is' + aFeature.name.toUpperFirst() 
else if getReservedKeywords()->exists(s | s = aFeature.name) then
	aFeature.name + '_'
else
	aFeature.name 
endif endif/]

[query public getVariableName( aFeature : EStructuralFeature ) : String = 
'_' + aFeature.getPropertyName()/]

[query public getReflectiveGetterName(anENamedElement : ENamedElement) : String = 
let getterName : String = 'get' + anENamedElement.getElementAccessorName() in
let ecorePackageClass : EClass = anENamedElement.eClass().ePackage.eClass() in
let methodName : String = if ecorePackageClass.eAllOperations->exists( name = getterName ) then getterName + anENamedElement.getElementTypeName() else getterName endif in
methodName
/]

[query public getConstantsName(eLiteral : EEnumLiteral) : String =
	if eLiteral.name = '_' then '_' else splitAndCombineWords( eLiteral.name, '_').toUpperCase() endif 		
/]

[query public getReservedKeywords(oclAny : OclAny) : Sequence(String) = 
Sequence{ 'break','case','catch','class','const','continue','debugger','default','delete','do','else','enum','export','extends',
		  'false','finally','for','function','if','import','in','instanceof','new','null,','return','super','switch','this',
		  'throw','true','try','typeof','var','void','while','with','as','implements','interface','let','package','private',
		  'protected','public','static','yield','any','boolean','constructor','declare','get','module','require','number',
		  'set','string','symbol','type','from','of'}
/]



