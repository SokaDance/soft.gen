[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]

[**
 * File Comments 
*/]
[template public fileComment(aAny : OclAny)]
// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2020 MASA Group
//
// *****************************************************************************

// *****************************************************************************
//
// Warning: This file was generated by soft.generator.go Generator
//
// *****************************************************************************
[/template]

[query public hasExtension( aModelElement : EModelElement ) : Boolean = hasKey('extension') and valueKey('extension' )='true'/]
[query public isExported( aNamedElement : ENamedElement ) : Boolean = if ( hasKey('exported') ) then valueKey('exported') = 'true' else false endif/]

[**
 * Factory / Package / Classes Interfaces and Implementations Names  
*/]
[** search for an annotation in an element and in its ancestors if not present. **/]
[query private getAncestor( aElement : EModelElement ) : EModelElement = 
if aElement.oclIsKindOf(EOperation) then aElement.oclAsType(EOperation).eContainingClass
else if aElement.oclIsKindOf(EStructuralFeature) then aElement.oclAsType(EStructuralFeature).eContainingClass
else if aElement.oclIsKindOf(EClass) then aElement.oclAsType(EClass).ePackage
else null
endif endif endif 
/]

[query private getAncestors( aElement : EModelElement ) : Sequence(EModelElement) = 
    let ancestor : EModelElement = aElement.getAncestor() in
    if ( ancestor.oclIsUndefined() ) then
        Sequence(EModelElement){}
    else
        ancestor.getAncestors()->prepend( ancestor )
    endif
/]

[query private getAnnotationValue(aElement : EModelElement, aKey:String ) : String =
    if aElement.hasKey(aKey) then
        aElement.valueKey( aKey )
    else
        let ancestor : EModelElement = aElement.getAncestor() in
        if ancestor.oclIsUndefined() then
            null
        else
            ancestor.getAnnotationValue(aKey)
        endif
    endif     
/]
[** Retrieve a key in an element and its ancestors and then regexp replace the value with the default rule**/]
[query private getElementName( aElement : ENamedElement, aKey:String ) : String = aElement.getElementName(aElement.name, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String ) : String = aElement.getElementName(aName, aKey, null)/]
[query private getElementName( aElement : ENamedElement, aName : String , aKey:String , defaultRule : String ) : String =
    let value : String = aElement.getAnnotationValue( aKey ) in
    let rule : String = if value.oclIsUndefined() then defaultRule else value endif in
    if rule.oclIsUndefined() then
        aName
    else
        let index : Integer = rule.index( ':' ) in
        let pattern : String = if index = -1 then '(.*)' else rule.substring(1, index - 1) endif in
        let replacement : String = if index = -1 then rule else rule.substring(index + 1) endif in
        aName.replaceFirst( pattern , replacement )
    endif
/]

[** Factory Names **/]
[query public getFactoryName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'factoryName','$1Factory').toUpperFirst()/]
[query public getFactoryImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getFactoryName() )/]
[query public getFactoryInternalName( aPackage : EPackage ) : String = aPackage.name + 'FactoryInternal'/]
[query public getFactoryExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( aPackage.getFactoryName() )/]

[** Package Names **/]
[query public getPackageName( aPackage : EPackage ) : String = aPackage.getElementName(aPackage.name, 'packageName','$1Package').toUpperFirst()/]

[** Interface Names **/]
[query public getInterfaceName( aClass : EClass ) : String = aClass.getInterfaceName(aClass.name)/]
[query public getInterfaceName( aPackage : EPackage ) : String = aPackage.getInterfaceName( getPackageName() )/]
[query private getInterfaceName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceName').toUpperFirst() /]

[** Implementation Names **/]
[query public getImplementationName( aClass : EClass ) : String = aClass.getImplementationName( aClass.name )/]
[query public getImplementationName( aPackage : EPackage ) : String = aPackage.getImplementationName( getPackageName() ) /]
[query private getImplementationName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationName', '$1Impl')/]

[** Extension Names **/]
[query public getExtensionName( aClass : EClass ) : String = aClass.getExtensionName(aClass.name )/]
[query public getExtensionName( aPackage : EPackage ) : String = aPackage.getExtensionName( getPackageName() )/]
[query private getExtensionName( aNamedElement : ENamedElement , aName : String ) : String = 
    let name : String = aNamedElement.getElementName( aName, 'extensionName', '$1Ext') in
    if  aNamedElement.isExported() then name.toUpperFirst()
    else name.toLowerFirst() endif/]

[** FileNames **/]
[query public getInterfaceFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'interfaceFileName', '$1.ts')/]
[query public getImplementationFileName( aNamedElement : ENamedElement , aName : String ) : String = aNamedElement.getElementName( aName, 'implementationFileName', '$1Impl.ts')/]

[query public getElementInstanceName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName()/]

[query private getElementTypeName(anENamedElement : ENamedElement) : String =
if anENamedElement.oclIsTypeOf(EClass) then 'Class'
else if anENamedElement.oclIsTypeOf(EAttribute) then 'Attribute'
else if ( anENamedElement.oclIsTypeOf(EOperation) ) then 'Operation'
else if ( anENamedElement.oclIsTypeOf(EReference) ) then 'Reference'
else ''
endif endif endif endif
/]

[** Accessors Names **/]
[query public getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'Is' else 'Get' endif/]

[query public getUnSetterName(feature : EStructuralFeature) : String = feature.getElementName( name , 'unSetterName', 'Unset$1')/]
[query public getIsSetName(feature : EStructuralFeature) : String = feature.getElementName( name , 'isSetName', 'IsSet$1')/]

[query public getOperationName(aOperation : EOperation ) : String = aOperation.getElementName( aOperation.name , 'operationName' )/]

[query public getParameterName(aParameter : EParameter) : String =
 	let n : String = aParameter.name in
	if n = 'arguments' then 'args'
	else n
	endif  
/]
