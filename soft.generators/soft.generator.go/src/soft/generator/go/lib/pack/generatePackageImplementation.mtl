[comment encoding = UTF-8 /]
[module generatePackageImplementation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::pack::generateCommon/]

[query private getPackageGetter(aModelElement : EModelElement) : String =
	if aModelElement.oclIsKindOf(EPackage) then  
		'p'
	else if aModelElement.oclIsKindOf(EEnumLiteral) then 
		let aEnumLiteral : EEnumLiteral = aModelElement.oclAsType(EEnumLiteral) in 
		aEnumLiteral.eEnum.getPackageGetter() + '.GetEEnumLiteralByName("' + aEnumLiteral.name +'")' 
	else if aModelElement.oclIsKindOf(ENamedElement) then 
		aModelElement.oclAsType(ENamedElement).getPackageGetter()
	else 
		'nil' 
	endif endif endif/]
[query private getPackageGetter(aNamedElement : ENamedElement) : String = if oclIsUndefined() then 'nil' else 'p.' + aNamedElement.getReflectiveGetterName() + '()' endif/]

[query private getPackageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature) : String = getPackageGetter(aEClassifier,aStruct.eContainingClass) /]
[query private getPackageGetter(aEClass : EClass, supertype : EClass) : String = getPackageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier)) /]
[query private getPackageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier) : String = getPackageInstance(aEClassifier1, aEClassifier2) + aEClassifier1.getReflectiveGetterName() + '()' /]
[query private getPackageInstance(aClassifier1 : EClassifier ,aClassifier2 : EClassifier ) : String = if(aClassifier1.ePackage.name = aClassifier2.ePackage.name ) then 'p.' else  aClassifier1.ePackage.name + '.GetPackage().'  endif /]
[query private getPackageGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'nil' else getPackageInstance(anEClassifier, anOperation.eContainingClass) + anEClassifier.getReflectiveGetterName() + '()' endif/]

[query private getAnnotionSourceIdentifierLastIndex(aAnnotationSource : String) : Integer = 
	let index : Integer = aAnnotationSource.lastIndexOf('/') in
	if ( index = aAnnotationSource.size() - 1 ) then
		aAnnotationSource.first(index).lastIndexOf('/')
	else
		index
	endif
/]
[query private getAnnotationSourceIdentifier(aAnnotationSource : String) : String = 
	let index : Integer = getAnnotionSourceIdentifierLastIndex(aAnnotationSource) in
	if ( index = -1 ) then
		aAnnotationSource
    else
        aAnnotationSource.substring(index + 1 )
    endif
/]
[query private getSuppressedAnnotations(aPackage : EPackage ) : Sequence(String) =
	if aPackage.hasKey('supressAnnotations') then
		let supressAnnotations : String = aPackage.valueKey('supressAnnotations') in
		supressAnnotations.tokenize(' ')
	else
		Sequence{}
	endif
/]
[query private getAnnotationSources(aPackage : EPackage) : OrderedSet(String) =
	let allAnnotationsSources : Set(String) = aPackage.eAllContents(EAnnotation)->collect( a | a.source )->asSet() in
	let supressedAnnotationsSources : Set(String) = aPackage.getSuppressedAnnotations()->asSet() in
	(allAnnotationsSources - supressedAnnotationsSources)->asOrderedSet()->sortedBy(s | s) 
/]

[template private generateDataMember(anENamedElement : ENamedElement, anEPackage : EPackage)] 
[anENamedElement.getElementInstanceName()/] [anEPackage.getMetaType(anENamedElement)/] 

[/template]

[template private generateGetter(aClassifier : EClassifier, anEPackage : EPackage)]
// [aClassifier.getReflectiveGetterName()/] returns the meta object corresponding to 
func (p *[anEPackage.getImplementationName()/]) [aClassifier.getReflectiveGetterName()/]() [anEPackage.getMetaType(aClassifier)/] {
    return p.[aClassifier.getElementInstanceName()/]
}

[/template]

[template private generateGetter(aFeature : EStructuralFeature, anEPackage : EPackage)]
[let aClass : EClass = aFeature.eContainingClass]
// [aFeature.getReflectiveGetterName()/] returns the meta object corresponding to 
func (p *[anEPackage.getImplementationName()/]) [aFeature.getReflectiveGetterName()/]() [anEPackage.getMetaType(aFeature)/] {
    return p.[aClass.getElementInstanceName()/].GetEStructuralFeatures().Get([aClass.eStructuralFeatures->indexOf(aFeature)-1/]).([anEPackage.getMetaType(aFeature)/])
}
[/let]
[/template]

[template private generateGetter(aOperation : EOperation, anEPackage : EPackage)]
[let aClass : EClass = aOperation.eContainingClass]
// [aOperation.getReflectiveGetterName()/] returns the meta object corresponding to 
func (p *[anEPackage.getImplementationName()/]) [aOperation.getReflectiveGetterName()/]() [anEPackage.getMetaType(aOperation)/] {
    return p.[aClass.getElementInstanceName()/].GetEOperations().Get([aClass.eOperations->indexOf(aOperation)-1/]).([anEPackage.getMetaType(aOperation)/])
}
[/let]
[/template]

[template private generateCreation(aEClass : EClass)]
p.[aEClass.getElementInstanceName()/] = factory.CreateEClassFromContainerAndClassID(p, [aEClass.getClassifierIDName()/])

[/template]

[template private generateCreation(aAttribute : EAttribute)]
factory.CreateEAttributeFromContainerAndClassID(p.[aAttribute.eContainingClass.getElementInstanceName()/], [aAttribute.eContainingClass.getFeatureIDName(aAttribute)/])

[/template]

[template private generateCreation(aReference : EReference)]
factory.CreateEReferenceFromContainerAndClassID(p.[aReference.eContainingClass.getElementInstanceName()/], [aReference.eContainingClass.getFeatureIDName(aReference)/])

[/template]

[template private generateCreation(aFeature : EStructuralFeature)]
[/template]

[template private generateCreation(anEOperation : EOperation)]
factory.CreateEOperationFromContainerAndClassID(p.[anEOperation.eContainingClass.getElementInstanceName()/], [anEOperation.eContainingClass.getOperationIDName(anEOperation)/])

[/template]

[template private generateCreation(anEDatatype : EDataType)]
p.[anEDatatype.getElementInstanceName()/] = factory.Create[if (anEDatatype.oclIsKindOf(EEnum))]EEnum[else]EDataType[/if]FromContainerAndClassID(p, [anEDatatype.getClassifierIDName()/])

[/template]

[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
p.[aEClass.getElementInstanceName()/].GetESuperTypes().Add([aEClass.getPackageGetter(superClass)/])
[/for]
[/template]

[template private generateInitialization(aEClass : EClass)]
p.[aEClass.getElementInstanceName()/].SetName("[aEClass.name/]")
p.[aEClass.getElementInstanceName()/].SetAbstract([aEClass.abstract.toString()/])
p.[aEClass.getElementInstanceName()/].SetInterface([aEClass.interface.toString()/])
p.[aEClass.getElementInstanceName()/].SetInstanceTypeName("[aEClass.getInstanceTypeName()/]")

[/template]

[template private generateInitialization(anEAttribute : EAttribute)]
[let localVar : String = anEAttribute.getElementInstanceName()]
[localVar/] := [anEAttribute.getPackageGetter()/]
[localVar/].SetName("[anEAttribute.name/]")
[localVar/].SetEType([anEAttribute.eType.oclAsType(EDataType).getPackageGetter(anEAttribute)/])
[localVar/].SetLowerBound([anEAttribute.lowerBound/])
[localVar/].SetUpperBound([anEAttribute.upperBound/])
[localVar/].SetTransient([anEAttribute.transient.toString()/])
[localVar/].SetVolatile([anEAttribute.volatile.toString()/])
[localVar/].SetChangeable([anEAttribute.changeable.toString()/])
[localVar/].SetUnsettable([anEAttribute.unsettable.toString()/])
[localVar/].SetUnique([anEAttribute.unique.toString()/])
[localVar/].SetDerived([anEAttribute.derived.toString()/])
[localVar/].SetOrdered([anEAttribute.ordered.toString()/])
[localVar/].SetID([anEAttribute.iD.toString()/])
[if ( anEAttribute.defaultValueLiteral <> '' )]
[localVar/].SetDefaultValueLiteral("[anEAttribute.defaultValueLiteral/]")
[/if]
[/let]

[/template]

[template private generateInitialization(anEReference : EReference)]
[let localVar : String = anEReference.getElementInstanceName()]
[localVar/] := [anEReference.getPackageGetter()/]
[localVar/].SetName("[anEReference.name/]")
[localVar/].SetEType([anEReference.eGenericType.eClassifier.getPackageGetter(anEReference)/])
[localVar/].SetLowerBound([anEReference.lowerBound/])
[localVar/].SetUpperBound([anEReference.upperBound/])
[localVar/].SetTransient([anEReference.transient.toString()/])
[localVar/].SetVolatile([anEReference.volatile.toString()/])
[localVar/].SetChangeable([anEReference.changeable.toString()/])
[localVar/].SetUnsettable([anEReference.unsettable.toString()/])
[localVar/].SetUnique([anEReference.unique.toString()/])
[localVar/].SetDerived([anEReference.derived.toString()/])
[localVar/].SetOrdered([anEReference.ordered.toString()/])
[localVar/].SetContainment([anEReference.containment.toString()/])
[localVar/].SetResolveProxies([anEReference.resolveProxies.toString()/])
[if ( anEReference.defaultValueLiteral <> '' )]
[localVar/].SetDefaultValueLiteral("[anEReference.defaultValueLiteral/]")
[/if]
[if not anEReference.eOpposite.oclIsUndefined()]
[localVar/].SetEOpposite([anEReference.eOpposite.getPackageGetter()/])
[/if]
[/let]

[/template]

[template private generateInitialization(anEOperation : EOperation)]
[let localVar : String = anEOperation.getElementInstanceName()]
[localVar/] := [anEOperation.getPackageGetter()/]
[localVar/].SetEType([anEOperation.eType.getPackageGetter(anEOperation)/])
[localVar/].SetName("[anEOperation.name.toString()/]")
[localVar/].SetLowerBound([anEOperation.lowerBound/])
[localVar/].SetUpperBound([anEOperation.upperBound/])
[localVar/].SetUnique([anEOperation.unique.toString()/])
[localVar/].SetOrdered([anEOperation.ordered.toString()/])
[for (anEParameter : EParameter | anEOperation.eParameters)]
{
    parameter := [if not anEOperation.eContainingClass.ePackage.isEcorePackage()]ecore.[/if]GetFactory().CreateEParameterFromContainer([localVar/])
    parameter.SetName("[anEParameter.name/]")
    parameter.SetEType([anEParameter.eType.getPackageGetter(anEParameter.eOperation)/])
    parameter.SetLowerBound(0)
    parameter.SetUpperBound(1)
    parameter.SetUnique(true)
    parameter.SetOrdered(true)
}
[/for]
[/let]

[/template]

[template private generateInitialization(aDataType : EDataType,anEPackage : EPackage)]
p.[aDataType.getElementInstanceName()/].SetName("[aDataType.name/]")
p.[aDataType.getElementInstanceName()/].SetInstanceTypeName("[aDataType.getInstanceTypeName()/]")
[if (not aDataType.oclIsKindOf(EEnum))]
p.[aDataType.getElementInstanceName()/].SetSerializable([aDataType.serializable.toString()/])
[/if]
[let defaultValue : String = aDataType.getDefaultValue()]
[if defaultValue <> '' and defaultValue <> 'nil']
[let unquotedDefaultValue : String = defaultValue.replaceAll('\'|"', '')]
p.[aDataType.getElementInstanceName()/].([if not anEPackage.isEcorePackage()]ecore.[/if]EDataTypeInternal).SetDefaultValue( p.GetEFactoryInstance().CreateFromString(p.[aDataType.getElementInstanceName()/],"[unquotedDefaultValue/]"))
[/let]
[/if]
[/let]

[/template]

[template public generatePackageImplementation(anEPackage : EPackage){ 
	className : String = anEPackage.getImplementationName();
	annotationSources : OrderedSet(String) = anEPackage.getAnnotationSources();
}]
[file (anEPackage.getOutputDirectory() + '/'+ anEPackage.getImplementationFileName(anEPackage.getPackageName() ) , false, 'UTF-8')]
[fileComment()/]

package [anEPackage.name/]

[if not anEPackage.isEcorePackage()]
import "[getImportForPackage('ecore')/]"
[/if]

// [className/] is the [anEPackage.getInterfaceName()/] implementation
type [className/] struct {
    [if not anEPackage.isEcorePackage()]ecore.[/if]EPackageExt
	[anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name).generateDataMember(anEPackage)/]
    [anEPackage.eAllContents(EDataType)->asOrderedSet()->sortedBy(name).generateDataMember(anEPackage)/]
}

func new[className.toUpperFirst()/]() *[className/] {
    p := new([className/])
    p.SetInterfaces(p)
	p.Initialize()
    return p
}

func (p *[className/])Initialize() {
	p.EPackageExt.Initialize()
	p.SetName(NAME)
    p.SetNsPrefix(NS_PREFIX)
    p.SetNsURI(NS_URI)
	p.SetEFactoryInstance(GetFactory())
    p.createPackageContents()
    p.initializePackageContents()
    p.CreateResource()
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
[aClass.generateGetter(anEPackage)/]
[aClass.eAttributes->sortedBy(name).generateGetter(anEPackage)/]
[aClass.eReferences->sortedBy(name).generateGetter(anEPackage)/]
[aClass.eOperations->sortedBy(name).generateGetter(anEPackage)/]
[/for]
[anEPackage.eAllContents(EDataType)->sortedBy(name).generateGetter(anEPackage)/]

func (p *[className/])createPackageContents() {
    factory := [if not anEPackage.isEcorePackage()]ecore.[/if]GetFactory()
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    p.create[aClass.name.toUpperFirst()/]Content(factory)
[/for]
    p.createPackageEDataTypes(factory)
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
func (p *[className/])create[aClass.name.toUpperFirst()/]Content(factory [if not anEPackage.isEcorePackage()]ecore.[/if]EcoreFactory) {
    [aClass.generateCreation()/]
    [aClass.eStructuralFeatures.generateCreation()/]
    [aClass.eOperations.generateCreation()/]
}
[/for]

func (p *[className/])createPackageEDataTypes(factory [if not anEPackage.isEcorePackage()]ecore.[/if]EcoreFactory) {
    [anEPackage.eAllContents(EDataType)->sortedBy(name).generateCreation()/]
}

func (p *[className/])initializePackageContents() {
    // Add supertypes to classes
    [anEPackage.eAllContents(EClass)->sortedBy(name).initSuperTypes()/]

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    p.initialize[aClass.name.toUpperFirst()/]Content()
[/for]
    p.initializePackageEDataTypes()
[if not anEPackage.isEcorePackage()]
[for (aAnnotationSource : String | annotationSources)]
	p.initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations()
[/for]
[/if]
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
func (p *[className/])initialize[aClass.name.toUpperFirst()/]Content() {
    [aClass.generateInitialization()/]
    [aClass.eAttributes->sortedBy(name).generateInitialization()/]
    [aClass.eReferences->sortedBy(name).generateInitialization()/]
    [aClass.eOperations->sortedBy(name).generateInitialization()/]
}

[/for]

func (p *[className/])initializePackageEDataTypes() {
    [anEPackage.eAllContents(EDataType)->sortedBy(name).generateInitialization(anEPackage)/]
}

[if not anEPackage.isEcorePackage()]
[for (aAnnotationSource : String | annotationSources)]
func (p *[className/])initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations() {
	source := "[aAnnotationSource/]"
	[for (eAnnotation : EAnnotation | anEPackage.eAllContents(EAnnotation)->select( a | a.source = aAnnotationSource))]
	{
		eAnnotation := [if not anEPackage.isEcorePackage()]ecore.[/if]GetFactory().CreateEAnnotationFromContainer([eAnnotation.eModelElement.getPackageGetter()/])
		eAnnotation.SetSource(source)
		[for (eEntry : EStringToStringMapEntry | eAnnotation.details)]
		[let value : String = if eEntry.value.oclIsUndefined() then '' else eEntry.value endif]
		eAnnotation.GetDetails().Put("[eEntry.key/]","[value.replaceAll('\\\\','\\\\\\\\').replaceAll('"', '\\\\"').replaceAll('\\n','\\\\n').replaceAll('\\r','\\\\r')/]")
		[/let]
		[/for]
	}
	[/for]	    
}

[/for]
[/if]
	
[/file]
[/template]
