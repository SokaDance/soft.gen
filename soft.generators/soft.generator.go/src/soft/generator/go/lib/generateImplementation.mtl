[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateStructuralFeature/]
[import soft::generator::common::generateUtils/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]

[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateReflectives/]

[query private getReferencedMapTypes(aClass : EClass) : Set(EClassifier) = 
	aClass.getImplementedFeatures()->select(feature : EStructuralFeature | feature.isMapType() ).eType->asSet()
/]

[template public generateImplementation(aClass : EClass) { 
	implementationName : String = aClass.getImplementationName();
	ecore : EPackage = getEcorePackage();	
	aPackage : EPackage = aClass.ePackage; 
	packagePath : String = aPackage.getImplementationPackagePath();
	classExtend : String = aClass.getClassExtends();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( getVariableName() );
	variableFeatures : Collection(EStructuralFeature) = features->select(isField());
	initializerFeatures : Collection(EStructuralFeature) = features->select(hasInitializationMethod());
	basicFeatures : Collection(EStructuralFeature) = features->select(not isReflectiveDelegation(aPackage) and (isBasicGet() or isBasicSet() or isBasicUnSet()));
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
	ecorePrefix : String = if aPackage.isEcorePackage() then '' else 'ecore.' endif;
	packages : Set(String) = Set{ Set{getIdentifierPackagePath(classExtend) , aPackage.getInterfacePackagePath() } 
								 ,if not aPackage.isEcorePackage() then Set{ ecore.getPackagePath()} else Set{} endif
								 ,if not aPackage.isEcorePackage() and aClass.getReferencedMapTypes()->exists( cls | cls.ePackage.isEcorePackage() ) then Set{ ecore.getPackagePath()} else Set{} endif
								 ,aClass.getReferencedTypes()->collect( cls | cls.getPackagePath() )->asSet()
								 ,aClass.getInterfaceExtends()->collect( i | getIdentifierPackagePath(i) )->asSet()
								 }->flatten();
	imports : OclAny = getPackageImports(packages);
}]
[file (aPackage.getImplementationOutputDirectory() + '/' + aClass.getImplementationFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [getPackageNameFromPath(packagePath)/]

[generateImports(imports,aPackage.getImplementationPackagePath())/]

// [implementationName/] is the implementation of the model object '[aClass.name/]'
type [implementationName/] struct {
	[getImportedIdentifier( classExtend ,packagePath, imports)/]
[if not aClass.isReflectiveDelegation()]
[let dataDeclarationFeatures : OrderedSet(EStructuralFeature) = features->select( isField() )]
    [ dataDeclarationFeatures.generateVariableDeclaration(packagePath,imports)/]
[/let]
[/if]
}
[if initializerFeatures->notEmpty()]
type [aClass.getInitializersInterface()/] interface {
    [initializerFeatures.generateVariableInitializationMethodDeclaration(packagePath,imports)/]
}
[/if]

[if basicFeatures->notEmpty()]
type [aClass.getBasicsInterface()/] interface {
    [basicFeatures.generateBasicsMethodDeclaration(aClass,packagePath,imports)/]
}
[/if]

// [aClass.getConstructorName()/] is the constructor of a [implementationName/]
func [aClass.getConstructorName()/]() *[implementationName/] {
    [aClass.getReceiverName()/] := new([implementationName/])
	[aClass.getReceiverName()/].SetInterfaces([aClass.getReceiverName()/])
	[aClass.getReceiverName()/].Initialize()
    return [aClass.getReceiverName()/]
}

[if variableFeatures->notEmpty() and not aClass.isReflectiveDelegation()]
[aClass.generateFunctionImplementationReceiver()/] Initialize() {
	[aClass.getReceiverName()/].[getSimpleIdentifier(classExtend)/].Initialize()
	[variableFeatures.generateVariableInitialization(aClass,packagePath,imports)/]
}
[/if]

[let interfaceName : String = getImportedIdentifier( aClass.getQualifiedInterfaceIdentifier() , packagePath,imports)]
[aClass.generateFunctionImplementationReceiver()/] as[aClass.getInterfaceName()/]() [interfaceName/] {
	return [aClass.getReceiverName()/].GetInterfaces().([interfaceName/])
}
[/let]

[if initializerFeatures->notEmpty()]
[aClass.generateFunctionImplementationReceiver()/] asInitializers() [aClass.getInitializersInterface()/] {
    return [aClass.getReceiverName()/].GetInterfaces().([aClass.getInitializersInterface()/])
}
[/if]

[if basicFeatures->notEmpty()]
[aClass.generateFunctionImplementationReceiver()/] asBasics() [aClass.getBasicsInterface()/] {
    return [aClass.getReceiverName()/].GetInterfaces().([aClass.getBasicsInterface()/])
}
[/if]


[aClass.generateFunctionImplementationReceiver()/] EStaticClass() [ecorePrefix/]EClass {
    return GetPackage().[aClass.getReflectiveGetterName()/]()
}

[aClass.generateFunctionImplementationReceiver()/] EStaticFeatureCount() int {
    return [if aClass.isReflectiveDelegation()]0[else][aClass.getFeatureCountIDName()/][/if]
}
[if aClass.isMapEntry()]
[let keyFeature : EStructuralFeature = aClass.getEStructuralFeature('key')]
[let valueFeature : EStructuralFeature = aClass.getEStructuralFeature('value')]
[aClass.generateFunctionImplementationReceiver()/] GetKey() [aPackage.getAnyType()/] {
    return [aClass.getReceiverName()/].[keyFeature.getGetterName()/]()
}

[aClass.generateFunctionImplementationReceiver()/] SetKey(key [aPackage.getAnyType()/]) {
[if keyFeature.isListType()]
	[aClass.getReceiverName()/].[keyFeature.getGetterName()/]().AddAll(key.([ecorePrefix/]EList))
[else]
    [aClass.getReceiverName()/].[keyFeature.getSetterName()/](key[if not aPackage.isAnyType(keyFeature.eType.getType())].([keyFeature.generateType(packagePath,imports)/])[/if])
[/if]
}

[aClass.generateFunctionImplementationReceiver()/] GetValue() [aPackage.getAnyType()/] {
    return [aClass.getReceiverName()/].[valueFeature.getGetterName()/]()
}

[aClass.generateFunctionImplementationReceiver()/] SetValue(value [aPackage.getAnyType()/]) {
[if valueFeature.isListType()]
	l := [aClass.getReceiverName()/].[valueFeature.getGetterName()/]()
	l.Clear()
	l.AddAll(value.([ecorePrefix/]EList))
[else]
    [aClass.getReceiverName()/].[valueFeature.getSetterName()/](value[if not aPackage.isAnyType(valueFeature.eType.getType())].([valueFeature.generateType(packagePath,imports)/])[/if])
[/if]
}
[/let]
[/let]
[/if]

[operations.generateImplementation(aClass,packagePath,imports)/]
[features.generateImplementation(aClass,packagePath,imports)/]
[initializerFeatures.generateVariableInitializationMethodDefinition(aClass,packagePath,imports)/]
[aClass.generateReflectivesDefinition(packagePath,imports)/]
[/file]
[/template]
