[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateReflectives/]

[template public generateImplementation(aClass : EClass) { 
	implementationName : String = aClass.getImplementationName(); 
	aPackage : EPackage = aClass.ePackage; 
	classExtend : String = aClass.getClassExtends();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( getVariableName() );
	variableFeatures : Collection(EStructuralFeature) = features->select(isField());
	initializerFeatures : Collection(EStructuralFeature) = features->select(hasInitializationMethod());
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
}]
[file (aPackage.getOutputDirectory() + '/' + aClass.getImplementationFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

[let imports : OrderedSet(String) = Set { if not aPackage.isEcorePackage() and ( aClass.eStructuralFeatures->notEmpty() or aClass.requiresList() ) then Set{ getImportForPackage('ecore') } else Set{} endif
										, Set { aPackage.getImport(classExtend) }
									    , aClass.getInterfaceExtends()->collect( extend | aPackage.getImport( extend ) )->asSet()
                                        , aClass.getReferencedTypes()->collect( cls | aPackage.getImport(cls) )->asSet()
                                        }->flatten()->select( s | s <> '')->asOrderedSet()->sortedBy( s | s) ]
[for ( i : String | imports )]
import "[i/]"
[/for]
[/let]


// [implementationName/] is the implementation of the model object '[aClass.name/]'
type [implementationName/] struct {
    *[getShortQualifiedName( classExtend ,aPackage.name)/]
    [ features.generateVariableDeclaration()/]
}

// [aClass.getConstructorName()/] is the constructor of a [aClass.getImplementationName()/]
func [aClass.getConstructorName()/]() *[aClass.getImplementationName()/] {
    [aClass.getReceiverName()/] := new([aClass.getImplementationName()/])
    [aClass.getReceiverName()/].[getUnQualifiedName(classExtend)/] = [getShortQualifiedName(getConstructorName(classExtend), aPackage.name)/]()
    [aClass.getReceiverName()/].SetInterfaces([aClass.getReceiverName()/]) 
    [variableFeatures.generateVariableInitialization(aClass)/]
    return [aClass.getReceiverName()/]
}
[if initializerFeatures->notEmpty()]

type [aClass.getInitializersInterface()/] interface {
    [initializerFeatures.generateVariableInitializationMethodDeclaration()/]
}

[aClass.generateFunctionImplementationReceiver()/] getInitializers() [aClass.getInitializersInterface()/] {
    return [aClass.getReceiverName()/].AsEObject().([aClass.getInitializersInterface()/])
}
[/if]

[let interfaceName : String = aClass.getInterfaceName()]
[aClass.generateFunctionImplementationReceiver()/] as[interfaceName/]() [interfaceName/] {
	return [aClass.getReceiverName()/].GetInterfaces().([interfaceName/])
}
[/let]

[aClass.generateFunctionImplementationReceiver()/] EStaticClass() [if not aPackage.isEcorePackage()]ecore.[/if]EClass {
    return GetPackage().[aClass.getReflectiveGetterName()/]()
}

[operations.generateImplementation(aClass)/]
[features.generateImplementation(aClass)/]
[initializerFeatures.generateVariableInitializationMethodDefinition(aClass)/]
[aClass.generateReflectivesDefinition()/]
[/file]
[/template]
