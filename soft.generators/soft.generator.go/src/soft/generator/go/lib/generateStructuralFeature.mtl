[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateStructuralFeature/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]


[query public isInitializationDefered( aStructuralFeature : EStructuralFeature ) : Boolean = isListType() or isProxy()/]

[query public getInitializersInterface( aClass : EClass ) : String = aClass.getInterfaceName().toLowerFirst() + 'Initializers'/]

[query public getBasicsInterface( aClass : EClass ) : String = aClass.getInterfaceName().toLowerFirst() + 'Basics'/]

[query private getPackageInstance(aClassifier : EClassifier, packagePath : String , imports : OclAny ) : String = 
	getImportedIdentifier( aClassifier.ePackage.getInterfacePackagePath() + '.GetPackage()', packagePath, imports )
/]

[template public generateDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[if isGet()]
[aStructuralFeature.generateGetDeclaration(packagePath,imports)/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetDeclaration(packagePath,imports)/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetDeclaration(packagePath,imports)/]
[/if]

[/template]

[template private generateGetDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[aStructuralFeature.getGetterName()/]() [aStructuralFeature.generateType(packagePath,imports)/]
[/template]

[template private generateSetDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[aStructuralFeature.getSetterName()/]( [aStructuralFeature.generateType(packagePath,imports)/] )
[/template]

[template private generateUnSetDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[aStructuralFeature.getUnSetterName()/]()
[/template]

[template private getMapConstructor( anStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) post(trim())]
[/template]

[template private getMapConstructor( anEReference : EReference, aClass : EClass, packagePath : String, imports : OclAny) post(trim()){
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
	packageInstance : String = anEReference.eType.getPackageInstance(packagePath, imports);
}]
[if anEReference.eOpposite.oclIsUndefined() ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectMap([packageInstance/].[anEReference.eType.getReflectiveGetterName()/](),[receiverName/].AsEObjectInternal(),[aClass.getImportedIDName(anEReference, packagePath,imports)/],-1,[anEReference.isUnSettable()/] )
[else]
	[let reverseFeature :EReference = anEReference.eOpposite ]
    [let reverseClass :EClass = reverseFeature.eContainingClass ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectMap([packageInstance/].[anEReference.eType.getReflectiveGetterName()/](),[receiverName/].AsEObjectInternal(),[aClass.getImportedIDName(anEReference, packagePath,imports)/],[reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/],[anEReference.isUnSettable()/] )
	[/let]
	[/let]
[/if]
[/template]

[template private getListConstructor( anEAttribute : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny) post(trim())]
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass , packagePath : String, imports : OclAny) ? (not anEAttribute.isFeatureMapType()) post(trim()) {
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
}]
[if not aPackage.isEcorePackage()]ecore[/if].NewBasicEDataTypeList([receiverName/].AsEObjectInternal() , [aClass.getImportedIDName(anEAttribute, packagePath,imports)/],[anEAttribute.unique/])
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass , packagePath : String, imports : OclAny) ? (anEAttribute.isFeatureMapType()) post(trim()) ]
nil
[/template]


[template private getListConstructor( anEReference : EReference , aClass : EClass , packagePath : String, imports : OclAny) post(trim()){
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
}]
[if (anEReference.containment)]
    [if anEReference.eOpposite.oclIsUndefined() ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectList([receiverName/].AsEObjectInternal() , [aClass.getImportedIDName(anEReference, packagePath,imports)/] , -1, true , true , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
		[let featureID : String = aClass.getImportedIDName(anEReference, packagePath,imports)]
		[let reverseID : String = reverseClass.getImportedIDName(reverseFeature, packagePath,imports)]	
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectList([receiverName/].AsEObjectInternal() , [featureID/] , [reverseID/], true , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
		[/let]
		[/let]
        [/let]
    [/if]
[else]
    [if anEReference.eOpposite.oclIsUndefined() ]
        [let featureID : String = anEReference.eContainingClass.getImportedIDName( anEReference, packagePath,imports) ]
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectList([receiverName/].AsEObjectInternal() , [featureID/] , -1 , false , false , false , [anEReference.isProxy()/] , [anEReference.isUnSettable()/] )
        [/let]
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        [let reverseClass :EClass = reverseFeature.eContainingClass ]
		[let featureID : String = aClass.getImportedIDName(anEReference, packagePath,imports)]
		[let reverseID : String = reverseClass.getImportedIDName(reverseFeature, packagePath,imports)]	
[if not aPackage.isEcorePackage()]ecore.[/if]NewBasicEObjectList([receiverName/].AsEObjectInternal() , [featureID/] , [reverseID/] , false , true , true , [anEReference.isProxy()/] , [anEReference.isUnSettable()/]  )
        [/let]
		[/let]
		[/let]
        [/let]
    [/if]
[/if]
[/template]

[template public generateVariableDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[aStructuralFeature.getVariableName()/] [aStructuralFeature.generateType(packagePath,imports)/]

[/template]

[template public generateVariableInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass , packagePath : String, imports : OclAny)]
[/template]

[template public generateVariableInitialization(aAttribute : EAttribute, aClass : EClass , packagePath : String, imports : OclAny) ]
[let defaultValue : String = aAttribute.getDefaultValue(packagePath,imports)]
[if defaultValue <> '']
[aClass.getReceiverName()/].[aAttribute.getVariableName()/] = [defaultValue/]
[/if]
[/let]
[/template]

[template public generateVariableInitializationMethodDeclaration(aStructuralFeature : EStructuralFeature, packagePath : String, imports : OclAny)]
[aStructuralFeature.getInitializationMethodName()/]()[if aStructuralFeature.getLazy() = 'function'] [aStructuralFeature.generateType(packagePath,imports)/][/if]

[/template]

[template public generateVariableInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) ? ( aStructuralFeature.getLazy() = 'function' )]
[aClass.generateFunctionImplementationReceiver()/] [aStructuralFeature.getInitializationMethodName()/]() [aStructuralFeature.generateType(packagePath,imports)/] {
[if isMapType()]
	return [getMapConstructor(aClass,packagePath,imports)/];
[elseif isListType()]
    return [getListConstructor(aClass,packagePath,imports)/];
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    return [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/];
[else]
    panic("[aStructuralFeature.getInitializationMethodName()/] not implemented")
[/if]
}


[/template]

[template public generateVariableInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) ? ( aStructuralFeature.getLazy() = 'action' ) {
	varName : String = aStructuralFeature.getVariableName();
	receiverName : String = aStructuralFeature.eContainingClass.getReceiverName();
}]
[aClass.generateFunctionImplementationReceiver()/] [aStructuralFeature.getInitializationMethodName()/]() {
[if isMapType()]
	[receiverName/].[varName/] = [getMapConstructor(aClass,packagePath,imports)/];
[elseif isListType()]
    [receiverName/].[varName/] = [getListConstructor(aClass,packagePath,imports)/];
[elseif isProxy()]
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    [receiverName/].[varName/] = [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/];
[else]
    panic("[aStructuralFeature.getInitializationMethodName()/] not implemented")
[/if]
}


[/template]

[template public generateBasicsMethodDeclaration(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny)]
[if isBasicGet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicGetDeclaration(aClass,packagePath,imports)/]
[/if]
[if isBasicSet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicSetDeclaration(aClass,packagePath,imports)/]
[/if]
[if isBasicUnSet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicUnSetDeclaration(aClass,packagePath,imports)/]
[/if]
[/template]

[template public generateImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny)]
[if isGet()]
[aStructuralFeature.generateGetImplementation(aClass,packagePath,imports)/]
[/if]
[if isBasicGet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicGetImplementation(aClass,packagePath,imports)/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetImplementation(aClass,packagePath,imports)/]
[/if]
[if isBasicSet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicSetImplementation(aClass,packagePath,imports)/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetImplementation(aClass,packagePath,imports)/]
[/if]
[if isBasicUnSet() and not isReflectiveDelegation()]
[aStructuralFeature.generateBasicUnSetImplementation(aClass,packagePath,imports)/]
[/if]
[/template]

[template public generateMock(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny)]
[if isGet()]
[aStructuralFeature.generateGetMock(aClass,packagePath,imports)/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetMock(aClass,packagePath,imports)/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetMock(aClass,packagePath,imports)/]
[/if]
[/template]

[template public generateMockTests(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny)]
[if isGet()]
[aStructuralFeature.generateGetMockTest(aClass,packagePath,imports)/]
[/if]
[if isSet()]
[aStructuralFeature.generateSetMockTest(aClass,packagePath,imports)/]
[/if]
[if isUnSet()]
[aStructuralFeature.generateUnSetMockTest(aClass,packagePath,imports)/]
[/if]
[/template]

[template private generateGetMock(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	methodName : String = aStructuralFeature.getGetterName();	
	mockName : String = aClass.getMockName();
	mockExpecterName : String =mockName +'_Expecter_Methods';
	mockCallName : String = mockName+'_' +methodName+'_Call';
}]
// [methodName/] get the value of [aStructuralFeature.getVariableName()/]
func ([aClass.getReceiverName()/] *[aClass.getMockName()/]_Prototype_Methods) [methodName/]() [aStructuralFeature.generateType(packagePath,imports)/] {
	ret := [aClass.getReceiverName()/].mock.Called()

	var res [aStructuralFeature.generateType(packagePath,imports)/]
	if rf, ok := ret.Get(0).(func() [aStructuralFeature.generateType(packagePath,imports)/]); ok {
		res = rf()
	} else {
		if ret.Get(0) != nil {
			res = ret.Get(0).([aStructuralFeature.generateType(packagePath,imports)/])
		}
	}

	return res
}

type [mockCallName/] struct {
	*mock.Call
}

func (e *[mockExpecterName/]) [methodName/]() *[mockCallName/] {
	return &[mockCallName/]{Call: e.mock.On("[methodName/]")}
}

func (c *[mockCallName/]) Run(run func()) *[mockCallName/] {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *[mockCallName/]) Return([aStructuralFeature.getVariableName()/] [aStructuralFeature.generateType(packagePath,imports)/]) *[mockCallName/] {
	c.Call.Return([aStructuralFeature.getVariableName()/])
	return c
}
[/template]

[template private generateGetMockTest(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) ? (not isListType()) {
	mockName : String = aClass.getMockName();
	getterMethodName : String = aStructuralFeature.getGetterName();
	testMethodName : String = 'Test' + mockName + getterMethodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [getterMethodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
	r := [aStructuralFeature.eType.getTestValue(packagePath,imports)/]
	m := [ecorePrefix/]NewMockRun(t)
	o.EXPECT().[getterMethodName/]().Return(r).Run(func() { m.Run() }).Once()
	o.EXPECT().[getterMethodName/]().Call.Return(func() [aStructuralFeature.generateType(packagePath,imports)/] { return r }).Once()
	assert.Equal(t,r,o.[getterMethodName/]())
	assert.Equal(t,r,o.[getterMethodName/]())
}

[/template]

[template private generateGetMockTest(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) ? (isListType()){
	mockName : String = aClass.getMockName();
	getterMethodName : String = aStructuralFeature.getGetterName();
	testMethodName : String = 'Test' + mockName + getterMethodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [getterMethodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
	l := [ecorePrefix/][if isMapType()]NewMockEMap[else]NewMockEList[/if](t)
	m := [ecorePrefix/]NewMockRun(t)
	o.EXPECT().[getterMethodName/]().Return(l).Run(func() { m.Run() }).Once()
	o.EXPECT().[getterMethodName/]().Call.Return(func() [aStructuralFeature.generateType(packagePath,imports)/] { return l }).Once()
	assert.Equal(t,l,o.[getterMethodName/]())
	assert.Equal(t,l,o.[getterMethodName/]())
}

[/template]

[template private generateGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) {
	aPackage : EPackage =  aClass.ePackage;
	varName : String = aStructuralFeature.getVariableName();
	receiverName : String = aClass.getReceiverName();
}]
// [aStructuralFeature.getGetterName()/] get the value of [aStructuralFeature.getVariableName()/]
[aClass.generateFunctionImplementationReceiver()/] [aStructuralFeature.getGetterName()/]() [aStructuralFeature.generateType(packagePath,imports)/] {
[if isReflectiveDelegation()]
	result, _ := [receiverName/].EGetFromID([aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], true)[if not aPackage.isAnyType(aStructuralFeature.eType.getType())].([aStructuralFeature.generateType(packagePath,imports)/])[/if]
	return result 
[elseif isContainer()]
    if [receiverName/].EContainerFeatureID() == [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] {
        return [receiverName/].EContainer().([aStructuralFeature.generateType(packagePath,imports)/]);
    } 
    return nil
[elseif not isVolatile()]
    [if not isListType() and isProxy()]
    if [receiverName/].[varName/] != nil && [receiverName/].[varName/].EIsProxy() {
        [let oldVarName : String = 'old' + varName.toUpperFirst()]
        [let newVarName : String = 'new' + varName.toUpperFirst()]
        [oldVarName/] := [receiverName/].[varName/]
        [newVarName/] := [receiverName/].EResolveProxy([oldVarName/]).([aStructuralFeature.generateType(packagePath,imports)/])
        [receiverName/].[varName/] = [newVarName/]
        if [newVarName/] != [oldVarName/] {
        [if isContains()]
            var notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
            [if not isBidirectional()]
            notifications = [oldVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] , notifications )
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [oldVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/], [reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/] , notifications )
                [/let]
                [/let]
            [/if]
            if [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInternalContainer() == nil {
            [if not isBidirectional()]
            notifications = [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseAdd( [receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] , notifications )
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseAdd( [receiverName/], [reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/] , notifications )
                [/let]
                [/let]
            [/if]
            }
            if notifications != nil {
                notifications.Dispatch()
            }
        [/if]
            if [receiverName/].ENotificationRequired() {
                [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]RESOLVE, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], [oldVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX) )
            }
        }
        [/let]
        [/let]
    }
    [elseif aStructuralFeature.isLazy()]
        [let lazy : String = aStructuralFeature.getLazy()]
        [if lazy <> 'no']
            [if  lazy = 'function']
                [if aStructuralFeature.oclIsKindOf(EAttribute)]
    if [receiverName/].[varName/] == [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/] {
                [else]
    if [receiverName/].[varName/] == nil {
                [/if]
        [receiverName/].[varName/] = [receiverName/].asInitializers().[aStructuralFeature.getInitializationMethodName()/]()
    }
            [elseif lazy = 'action']
    [receiverName/].asInitializers().[aStructuralFeature.getInitializationMethodName()/]()
            [/if]
        [/if]
        [/let]
	[elseif aStructuralFeature.isMapType()]
	if [receiverName/].[varName/] == nil {
		[receiverName/].[varName/] = [aStructuralFeature.getMapConstructor(aClass,packagePath,imports)/];
	}
	[elseif aStructuralFeature.isListType()]
	if [receiverName/].[varName/] == nil {
		[receiverName/].[varName/] = [aStructuralFeature.getListConstructor(aClass,packagePath,imports)/]
	}
	[/if]
    return [receiverName/].[varName/]
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
    panic("[aStructuralFeature.getGetterName()/] not implemented")
[/if]
}

[/template]

[template private generateBasicGetDeclaration(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny)]
basic[aStructuralFeature.getGetterName().toUpperFirst()/]() [aStructuralFeature.generateType(packagePath,imports)/]
[/template]

[template private generateBasicGetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) {
	aPackage : EPackage =  aClass.ePackage;
	varName : String = aStructuralFeature.getVariableName();
	receiverName : String = aClass.getReceiverName();
}]
[aClass.generateFunctionImplementationReceiver()/] basic[aStructuralFeature.getGetterName().toUpperFirst()/]() [aStructuralFeature.generateType(packagePath,imports)/] {
[if isContainer()]
    if [receiverName/].EContainerFeatureID() == [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] {
        return [receiverName/].EInternalContainer().([aStructuralFeature.generateType(packagePath,imports)/]);
    } 
    return nil
[elseif not isVolatile()]
    [let lazy : String = aStructuralFeature.getLazy()]
    [if lazy <> 'no']
        [if  lazy = 'function']
            [if aStructuralFeature.oclIsKindOf(EAttribute)]
    if [receiverName/].[varName/] == [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/] {
            [else]
    if [receiverName/].[varName/] == nil {
            [/if]
        [receiverName/].[varName/] = [receiverName/].asInitializers().[aStructuralFeature.getInitializationMethodName()/]()
    }
        [elseif lazy = 'action']
    [receiverName/].asInitializers().[aStructuralFeature.getInitializationMethodName()/]()
        [/if]
    [/if]
    [/let]
    return [receiverName/].[varName/]
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
    panic("[aStructuralFeature.getGetterName()/] not implemented")
[/if]
}

[/template]


[template private generateSetMock(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	varName : String = aStructuralFeature.getVariableName();
	methodName : String = aStructuralFeature.getSetterName();
	featureType : String = aStructuralFeature.generateType(packagePath,imports);
	mockName : String = aClass.getMockName();
	mockExpecterName : String =mockName +'_Expecter_Methods';
	mockCallName : String = mockName+'_' +methodName+'_Call';
}]
// [methodName/] provides mock implementation for setting the value of [aStructuralFeature.getVariableName()/]
func ([aClass.getReceiverName()/] *[aClass.getMockName()/]_Prototype_Methods) [methodName/]( [varName/] [featureType/] ) {
	[aClass.getReceiverName()/].mock.Called([varName/])
}

type [mockCallName/] struct {
	*mock.Call
}

// [methodName/] is a helper method to define mock.On call
// - [varName/] [featureType/]
func (e *[mockExpecterName/]) [methodName/]([varName/] any) *[mockCallName/] {
	return &[mockCallName/]{Call: e.mock.On("[methodName/]",[varName/])}
}

func (c *[mockCallName/]) Run(run func([varName/] [featureType/])) *[mockCallName/] {
	c.Call.Run(func(args mock.Arguments) {
		run(args['['/]0[']'/][if not aPackage.isAnyType(featureType)].([featureType/])[/if])
	})
	return c
}

func (c *[mockCallName/]) Return() *[mockCallName/] {
	c.Call.Return()
	return c
}
[/template]


[template private generateSetMockTest(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny) {
	mockName : String =aClass.getMockName();
	setterMethodName : String =aStructuralFeature.getSetterName();
	testMethodName : String ='Test' + mockName + setterMethodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [setterMethodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
	v := [aStructuralFeature.eType.getTestValue(packagePath,imports)/]
	m := [ecorePrefix/]NewMockRun(t,v)
	o.EXPECT().[setterMethodName/](v).Return().Run(func(_p0 [aStructuralFeature.generateType(packagePath,imports)/]) { m.Run(_p0) }).Once()
	o.[setterMethodName/](v)
}

[/template]


[template private generateSetImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	methodName : String = aStructuralFeature.getSetterName();
	receiverName : String = aClass.getReceiverName();
	varName : String = aStructuralFeature.getVariableName();
	newVarName : String = 'new' + varName.toUpperFirst();
	oldVarName : String = 'old' + varName.toUpperFirst();
}]
// [methodName/] set the value of [varName/]
[aClass.generateFunctionImplementationReceiver()/] [methodName/]( [newVarName/] [aStructuralFeature.generateType(packagePath,imports)/] ) {
[if isReflectiveDelegation()]
	[receiverName/].ESetFromID([aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/],[newVarName/])
[elseif not isVolatile()]
    [if isContainer()]
    if ( [newVarName/] != [receiverName/].EInternalContainer() || ([newVarName/] != nil && [receiverName/].EContainerFeatureID() !=  [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/])) {
        var notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        if ( [receiverName/].EInternalContainer() != nil) {
            notifications = [receiverName/].EBasicRemoveFromContainer(notifications)
        }
        if [newVarName/]Internal , _ := [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal); [newVarName/]Internal != nil {
		[let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
        [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [newVarName/]Internal.EInverseAdd( [receiverName/].AsEObject() , [reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/], notifications )
		[/let]
		[/let]
        }
        notifications = [receiverName/].asBasics().basic[methodName.toUpperFirst()/]( [newVarName/], notifications )
        if ( notifications != nil ) {
            notifications.Dispatch()
        }
    } else if ( [receiverName/].ENotificationRequired() ) {
        [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], [newVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX) )
    }
    [elseif isBidirectional() or isContains()]
    if ( [newVarName/] != [receiverName/].[varName/] ) {
        var notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        if  [oldVarName/]Internal , _ := [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal); [oldVarName/]Internal != nil {
        [if not isBidirectional()]
            notifications = [oldVarName/]Internal.EInverseRemove( [receiverName/], [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] , notifications )
        }
        if [newVarName/]Internal , _ := [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal); [newVarName/]Internal != nil  {
            notifications = [newVarName/]Internal.EInverseAdd( [receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] , notifications )
        }
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
            [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [oldVarName/]Internal.EInverseRemove( [receiverName/], [reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/] , notifications )
        }
        if [newVarName/]Internal , _ := [newVarName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal); [newVarName/]Internal != nil {
            notifications = [newVarName/]Internal.EInverseAdd( [receiverName/].AsEObject(), [reverseClass.getImportedIDName(reverseFeature, packagePath,imports)/] , notifications )
        }
            [/let]
            [/let]
        [/if]
        notifications = [receiverName/].asBasics().basic[methodName.toUpperFirst()/]([newVarName/],notifications)
        if (notifications != nil) {
            notifications.Dispatch()
        }
    }
        [if isUnSettable()]
        [/if]
    [else]
    [oldVarName/] := [aClass.getReceiverName()/].[varName/]
    [aClass.getReceiverName()/].[varName/] = [newVarName/]
    if [aClass.getReceiverName()/].ENotificationRequired() {
        [aClass.getReceiverName()/].ENotify([if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], [oldVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
    }
    [/if]
[elseif hasKey('setterBody')]
    [valueKey('setterBody')/]
[else]
    panic("[aStructuralFeature.getSetterName()/] not implemented")
[/if]
}

[/template]

[template private generateBasicSetDeclaration(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
basic[aStructuralFeature.getSetterName().toUpperFirst()/]( [aStructuralFeature.generateType(packagePath,imports)/] ,[ecorePrefix/]ENotificationChain ) [ecorePrefix/]ENotificationChain
[/template]

[template private generateBasicSetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
	varName : String = aStructuralFeature.getVariableName();
	newVarName : String = 'new' + varName.toUpperFirst()
}]
[aClass.generateFunctionImplementationReceiver()/] basic[aStructuralFeature.getSetterName().toUpperFirst()/]( [newVarName/] [aStructuralFeature.generateType(packagePath,imports)/] , msgs [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain )  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
[if isContainer()]
    return [receiverName/].EBasicSetContainer([newVarName/],[aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/],msgs) 
[elseif not isVolatile()]
    [let oldVarName : String = 'old' + varName.toUpperFirst()]
    [oldVarName/] := [receiverName/].[varName/]
    [receiverName/].[varName/] = [newVarName/]
    notifications := msgs
    if ( [receiverName/].ENotificationRequired() ) {
        notification := [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]SET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], [oldVarName/], [newVarName/], [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX)
        if (notifications != nil ) {
            notifications.Add( notification );
        } else {
            notifications = notification;
        }
    }
    return notifications
    [/let]
[elseif (hasKey('setterBody'))]
    [valueKey('setterBody')/]
[else]
    panic("[aStructuralFeature.getSetterName()/] not implemented")
[/if]
}
[/template]

[template private generateUnSetMock(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny) {
	methodName : String = aStructuralFeature.getUnSetterName();
	mockName : String = aClass.getMockName();
	mockExpecterName : String =mockName +'_Expecter_Methods';
	mockCallName : String = mockName+'_' +methodName+'_Call';
}]
// [methodName/] provides mock implementation for unset the value of [aStructuralFeature.getVariableName()/]
func ([aClass.getReceiverName()/] *[aClass.getMockName()/]_Prototype_Methods) [methodName/]() {
	[aClass.getReceiverName()/].mock.Called()
}

type [mockCallName/] struct {
	*mock.Call
}

func (e *[mockExpecterName/]) [methodName/]() *[mockCallName/] {
	return &[mockCallName/]{Call: e.mock.On("[methodName/]")}
}

func (c *[mockCallName/]) Run(run func()) *[mockCallName/] {
	c.Call.Run(func(mock.Arguments) {
		run()
	})
	return c
}

func (c *[mockCallName/]) Return() *[mockCallName/] {
	c.Call.Return()
	return c
}
[/template]

[template private generateUnSetMockTest(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	mockName : String =aClass.getMockName();
	unsetMethodName : String =aStructuralFeature.getUnSetterName();
	testMethodName : String ='Test' + mockName + unsetMethodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [unsetMethodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
	m := [ecorePrefix/]NewMockRun(t)
	o.EXPECT().[unsetMethodName/]().Return().Run(func() { m.Run() }).Once()
	o.[unsetMethodName/]()
}

[/template]

[template private generateUnSetImplementation(aStructuralFeature : EStructuralFeature , aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
	varName : String = aStructuralFeature.getVariableName();
	oldVarName : String = 'old' + aStructuralFeature.getVariableName().toUpperFirst();
}]
// [aStructuralFeature.getUnSetterName()/] unset the value of [varName/]
[aClass.generateFunctionImplementationReceiver()/] [aStructuralFeature.getUnSetterName()/]() {
[if isReflectiveDelegation()]
	[receiverName/].EUnsetFromID([aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/])
[elseif not isVolatile()]
    [if isListType()]
		[let lazy : String = aStructuralFeature.getLazy()]
	    [if lazy = 'function']
	        [if aStructuralFeature.oclIsKindOf(EAttribute)]
	if [receiverName/].[varName/] == [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/] {
		[else]
	if [receiverName/].[varName/] != nil {
		[/if]
		[receiverName/].[varName/].Clear()
	}
		[else]
        [receiverName/].[varName/].Clear()
		[/if]
	    [/let]
    [elseif isBidirectional() or isContains()]
    if [receiverName/].[varName/] != nil {
        notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain
        [if not isBidirectional()]
        notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/] , notifications )
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
        notifications = [receiverName/].[varName/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove( [receiverName/].AsEObject(), [reverseFeature.eContainingClass.getImportedIDName(reverseFeature, packagePath,imports)/] , notifications )
            [/let]
        [/if]
        notifications = [receiverName/].asBasics().basic[aStructuralFeature.getUnSetterName().toUpperFirst()/](notifications)
        if notifications != nil {
            notifications.Dispatch()
        }
    } else if [receiverName/].ENotificationRequired() {
        [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/],nil,nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
    }
    [else]
		[oldVarName/] := [receiverName/].[varName/]
		[if aStructuralFeature.oclIsKindOf(EReference)]
		[receiverName/].[varName/] = nil
		[else]
		[receiverName/].[varName/] = [aStructuralFeature.oclAsType(EAttribute).getDefaultValue(packagePath,imports)/]
		[/if]
		if [receiverName/].ENotificationRequired() {
            [receiverName/].ENotify( [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/],[oldVarName/],nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX))
        }
    [/if]
[elseif hasKey('unsetterBody')]
    [valueKey('unsetterBody')/] 
[else]
    panic("[aStructuralFeature.getUnSetterName()/] not implemented")
[/if]
}

[/template]

[template private generateBasicUnSetDeclaration(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif;
}]
basic[aStructuralFeature.getUnSetterName().toUpperFirst()/]( [aStructuralFeature.generateType(packagePath,imports)/] ,[ecorePrefix/]ENotificationChain ) [ecorePrefix/]ENotificationChain
[/template]

[template private generateBasicUnSetImplementation(aStructuralFeature : EStructuralFeature, aClass : EClass, packagePath : String, imports : OclAny){
	aPackage : EPackage = aClass.ePackage;
	receiverName : String = aClass.getReceiverName();
	varName : String = aStructuralFeature.getVariableName();
	oldVarName : String = 'old' + varName.toUpperFirst();
}]
[aClass.generateFunctionImplementationReceiver()/] basic[aStructuralFeature.getUnSetterName().toUpperFirst()/]( msgs [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain )  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
[if not isVolatile()]
    [oldVarName/] := [receiverName/].[varName/]
    [receiverName/].[varName/] = nil
    notifications := msgs;
    if [receiverName/].ENotificationRequired() {
        notification := [if not aPackage.isEcorePackage()]ecore.[/if]NewNotificationByFeatureID([receiverName/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]UNSET, [aClass.getImportedIDName(aStructuralFeature, packagePath,imports)/], [oldVarName/], nil, [if not aPackage.isEcorePackage()]ecore.[/if]NO_INDEX)
        if ( notifications != nil ) {
            notifications.Add( notification )
        } else {
            notifications = notification
        }
    }
    return notifications
[else]
    panic("basic[aStructuralFeature.getUnSetterName().toUpperFirst()/] not implemented")
[/if] 
}
[/template]




