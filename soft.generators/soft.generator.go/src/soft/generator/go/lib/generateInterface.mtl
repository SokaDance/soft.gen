[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]


[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]

[template public generateInterface(aClass : EClass) { 
	interfaceName : String = aClass.getInterfaceName(); 
	aPackage : EPackage = aClass.ePackage; 
	interfaceExtends : Sequence(String) = aClass.getInterfaceExtends();
	isDiamond : Boolean = interfaceExtends->size() > 1;
}]
[file (aClass.ePackage.getOutputDirectory() + '/' + aClass.getInterfaceFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

[let refTypes : Set(EClassifier) = if isDiamond then aClass.eSuperTypes.getReferencedTypes()->asSet() else aClass.getReferencedTypes()->asSet() endif]
[let ecorePackage : Set(String) = if not aPackage.isEcorePackage() and ( aClass.requiresList() or isDiamond ) then Set{ getImportForPackage('ecore') } else Set{} endif]
[let imports : OrderedSet(String) = Set { interfaceExtends->collect( extend | aPackage.getImport(extend))->asSet()
                                        , refTypes->collect(cls | aPackage.getImport(cls))->asSet()
										, ecorePackage
                                        }->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s)]
[for ( i : String | imports )]
import "[i/]"
[/for]
[/let]
[/let]
[/let]


// [interfaceName/] is the representation of the model object '[aClass.name/]'
type [interfaceName/] interface {
[if isDiamond]
	[getShortQualifiedName('ecore.EObject', aPackage.name)/]
[else]
[for ( qualifiedExtend : String | interfaceExtends )]
    [getShortQualifiedName(qualifiedExtend, aPackage.name)/]
[/for]
[/if]

[let operations : OrderedSet(EOperation) = if isDiamond then aClass.eAllOperations else aClass.eOperations endif]
[if operations->notEmpty()]
    [operations.generateDeclaration()/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = (if isDiamond then aClass.eAllAttributes else aClass.eAttributes endif)->select( isGet() or isSet() )]
[if attributes->notEmpty()]
    [attributes.generateDeclaration()/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = (if isDiamond then aClass.eAllReferences else aClass.eReferences endif)->select( isGet() or isSet() )]
[if references->notEmpty()]
    [references.generateDeclaration()/]
[/if]
[/let]
    // [protected (interfaceName)]
    // [/protected]
}

[/file]
[/template]

