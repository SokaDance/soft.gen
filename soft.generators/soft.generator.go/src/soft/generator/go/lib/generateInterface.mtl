[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]


[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateOperation/]
[import soft::generator::go::lib::generateStructuralFeature/]

[template public generateInterface(aClass : EClass) { 
	ecore : EPackage = getEcorePackage();
	aPackage : EPackage = aClass.ePackage;
	packagePath : String = aPackage.getInterfacePackagePath();
	interfaceName : String = aClass.getInterfaceName();
	interfaceExtends : Sequence(String) = aClass.getInterfaceExtends();
	isDiamond : Boolean = aClass.eSuperTypes->size() > 1;
	packages : Set(String) = Set{ if not aPackage.isEcorePackage() and ( isDiamond or aClass.requiresList() )then Set{ ecore.getInterfacePackagePath()} else Set{} endif
								 , (if isDiamond then aClass.eSuperTypes.getReferencedTypes() else aClass.getAllReferencedTypes() endif)->collect( cls | cls.getInterfacePackagePath())
								 , interfaceExtends->collect( i | getIdentifierPackagePath(i))
								 }->flatten();
	imports : OclAny = getPackageImports(packages);
}]
[file (aPackage.getInterfaceOutputDirectory() + '/' + aClass.getInterfaceFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

package [getPackageNameFromPath(packagePath)/]

[generateImports(imports,aPackage.getInterfacePackagePath())/]

// [interfaceName/] is the representation of the model object '[aClass.name/]'
type [interfaceName/] interface {
[if isDiamond]
	[getImportedIdentifier( ecore.getQualifiedInterfaceIdentifier('EObject') ,packagePath, imports)/]
[else]
[for ( qualifiedIdentifier : String | interfaceExtends )]
    [getImportedIdentifier( qualifiedIdentifier ,packagePath, imports)/]
[/for]
[/if]

[let operations : OrderedSet(EOperation) = if isDiamond then aClass.eAllOperations else aClass.eOperations endif]
[if operations->notEmpty()]
    [operations.generateDeclaration(packagePath,imports)/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = (if isDiamond then aClass.eAllAttributes else aClass.eAttributes endif)->select( isGet() or isSet() )]
[if attributes->notEmpty()]
    [attributes.generateDeclaration(packagePath,imports)/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = (if isDiamond then aClass.eAllReferences else aClass.eReferences endif)->select( isGet() or isSet() )]
[if references->notEmpty()]
    [references.generateDeclaration(packagePath,imports)/]
[/if]
    // [protected (interfaceName)]
    // [/protected]
}
[/let]
[/file]
[/template]

