[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]

[query public isReflectiveDelegation(anPackage : EPackage ) : Boolean = anPackage.hasPackageProperty('featureDelegation') and anPackage.getPackageProperty('featureDelegation') = 'Reflective'/]

[query public isReflectiveDelegation(aClass : EClass) : Boolean = aClass.ePackage.isReflectiveDelegation()/]

[query public isReflectiveDelegation(anFeature : EStructuralFeature ) : Boolean = anFeature.eContainingClass.isReflectiveDelegation()/]

[query public getReceiverName(aClass : EClass) : String = aClass.name.first(1).toLower()/]

[template public generateFunctionImplementationReceiver(aClass : EClass)]
func ([aClass.getReceiverName()/] *[aClass.getImplementationName()/])
[/template]

[**
 * Classes Onthology
*/]
[query public getInterfaceExtends(aClass : EClass ) : Sequence(String) =
	let ecore : EPackage = getEcorePackage() in
	if ( aClass.isMapEntry() ) then
		Sequence{ ecore.getQualifiedInterfaceIdentifier('EObject'), ecore.getQualifiedInterfaceIdentifier('EMapEntry')}
    else if ( aClass.eSuperTypes->isEmpty() ) then
		let aPackage : EPackage = aClass.ePackage in 
	    if ( aClass.name = 'EObject' ) then
            Sequence{ecore.getQualifiedInterfaceIdentifier('ENotifier')}
        else if ( aPackage.hasPackageProperty('rootExtendsInterface') ) then
			Sequence{aPackage.getPackageProperty('rootExtendsInterface')}
		else
            Sequence{ecore.getQualifiedInterfaceIdentifier('EObject')}
        endif endif
    else
        aClass.eSuperTypes->iterate( cl ; res : Sequence(String) = Sequence{} | res->append(cl.getQualifiedInterfaceIdentifier()))
    endif endif
/]

[query public getClassExtends(aClass : EClass ) : String =
	let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
		let aPackage : EPackage = aClass.ePackage in 
        let ecore : EPackage = getEcorePackage() in
    	if ( aClass.name = 'EObject' ) then
			 ecore.getQualifiedImplementationIdentifier('BasicEObjectImpl')
        else if ( aPackage.hasPackageProperty('rootExtendsClass') ) then
			aPackage.getPackageProperty('rootExtendsClass')
		else if ( aPackage.isReflectiveDelegation() ) then
			ecore.getQualifiedImplementationIdentifier('ReflectiveEObjectImpl')
		else
			ecore.getQualifiedImplementationIdentifier('EObjectImpl')
        endif endif endif 
    else
        if ( extendsClass.hasExtension() ) then
            extendsClass.getQualifiedExtensionIdentifier()
        else
            extendsClass.getQualifiedImplementationIdentifier()
        endif
    endif
/]

[query public getConstructorName( aClass : EClass ) : String = getConstructorName(aClass.getImplementationName())/]
[query public getConstructorName( aQualifiedName : String ) : String =
    let index : Integer = aQualifiedName.index('.') in
    let className : String = if index = -1 then aQualifiedName else aQualifiedName.substring( index + 1 ) endif in
    if index = -1 then 'new' + className.toUpperFirst() else aQualifiedName.substring(1, index - 1) + '.' + 'new' + className.toUpperFirst() endif
/]
[query public getConstructorExtensionName( aClass : EClass ) : String = getConstructorName(aClass.getExtensionName())/]

[query public getVariableName( aFeature : EStructuralFeature ) : String = 
if aFeature.eType.getType() = 'bool' then 'is' + aFeature.name.toUpperFirst() 
else if getReservedKeywords()->exists(s  | s = aFeature.name) then aFeature.name + '_' 
else aFeature.name endif endif/]
