[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateOperation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]

[template public generateDeclaration(anEOperation : EOperation)]
[anEOperation.getOperationName()/]([anEOperation.generateParameterList(false)/]) [anEOperation.generateType()/]

[/template]

[template public generateImplementation(anEOperation : EOperation, aClass : EClass ) ? (not anEOperation.isDefault() )]
[/template]

[template public generateImplementation(anEOperation : EOperation, aClass : EClass ) ? ( anEOperation.isDefault() )]
// [anEOperation.getOperationName()/] default implementation
[aClass.generateFunctionImplementationReceiver()/] [anEOperation.getOperationName()/]([anEOperation.generateParameterList(false)/]) [anEOperation.generateType()/] {
    panic("[anEOperation.getOperationName()/] not implemented")
}

[/template]

[template public generateMock(anEOperation : EOperation, aClass : EClass) ? (anEOperation.oclIsUndefined() or anEOperation.eGenericType.oclIsUndefined()){
	methodName : String = anEOperation.getOperationName();
	mockName : String = aClass.getMockName();
	mockExpecterName : String =mockName +'_Expecter';
	mockCallName : String = mockName+'_' +methodName+'_Call';
}]
// [methodName/] provides mock implementation
[aClass.generateFunctionMockReceiver()/] [methodName/]([anEOperation.generateParameterList(true)/]) {
	[aClass.getReceiverName()/].Called([anEOperation.generateParameterCall()/])
}

type [mockCallName/] struct {
	*mock.Call
}

func (e *[mockExpecterName/]) [methodName/]([anEOperation.generateParameterList(true)/]) *[mockCallName/] {
	return &[mockCallName/]{Call: e.Mock.On("[methodName/]",[anEOperation.generateParameterCall()/])}
}

func (c *[mockCallName/]) Run(run func([anEOperation.generateParameterList(false)/])) *[mockCallName/] {
	c.Call.Run(func(_args mock.Arguments) {
		run([for (eParameter : EParameter | anEOperation.eParameters) separator (',')][let needCast : Boolean = not(not eParameter.oclIsUndefined() and eParameter.upperBound = 1 and not eParameter.eGenericType.oclIsUndefined() and eParameter.eGenericType.eClassifier.isAny())]_args['['/][i-1/][']'/][if needCast].([eParameter.generateEffectiveType()/])[/if][/let][/for])
	})
	return c
}

func (c *[mockCallName/]) Return() *[mockCallName/] {
	c.Call.Return()
	return c
}
[/template]

[template public generateMock(anEOperation : EOperation, aClass : EClass) ? (not (anEOperation.oclIsUndefined() or anEOperation.eGenericType.oclIsUndefined())){
	methodName : String = anEOperation.getOperationName();
	mockName : String = aClass.getMockName();
	mockExpecterName : String =mockName +'_Expecter';
	mockCallName : String = mockName+'_' +methodName+'_Call';
	needCast : Boolean = not(not anEOperation.eGenericType.oclIsUndefined() and anEOperation.eGenericType.eClassifier.isAny());
}]
// [methodName/] provides mock implementation
[aClass.generateFunctionMockReceiver()/] [methodName/]([anEOperation.generateParameterList(true)/]) [anEOperation.generateType()/] {
	ret := [aClass.getReceiverName()/].Called([anEOperation.generateParameterCall()/])

	var r [anEOperation.generateType()/]
	if rf, ok := ret.Get(0).(func() [anEOperation.generateType()/]); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0)[if needCast].([anEOperation.generateType()/])[/if]
		}
	}

	return r
}

type [mockCallName/] struct {
	*mock.Call
}

// [methodName/]is a helper method to define mock.On call
[for (sParameter : EParameter | anEOperation.eParameters)]
// - [sParameter.name/] [sParameter.generateType()/]
[/for]
func (e *[mockExpecterName/]) [methodName/]([for (sParameter : EParameter | anEOperation.eParameters) separator (', ')][sParameter.name/] any[/for]) *[mockCallName/] {
	return &[mockCallName/]{Call: e.Mock.On("[methodName/]",[anEOperation.generateParameterCall()/])}
}

func (c *[mockCallName/]) Run(run func([anEOperation.generateParameterList(false)/])) *[mockCallName/] {
	c.Call.Run(func(_args mock.Arguments) {
		run([for (eParameter : EParameter | anEOperation.eParameters) separator (',')][let needCast : Boolean = not(not eParameter.oclIsUndefined() and eParameter.upperBound = 1 and not eParameter.eGenericType.oclIsUndefined() and eParameter.eGenericType.eClassifier.isAny())]_args['['/][i-1/][']'/][if needCast].([eParameter.generateEffectiveType()/])[/if][/let][/for])
	})
	return c
}

func (c *[mockCallName/]) Return(_a0 [anEOperation.generateType()/]) *[mockCallName/] {
	c.Call.Return(_a0)
	return c
}

[/template]

[template public generateMockTests(aOperation : EOperation, aClass : EClass) ? (aOperation.oclIsUndefined() or aOperation.eGenericType.oclIsUndefined()){
	mockName : String =aClass.getMockName();
	methodName : String =aOperation.getOperationName();
	testMethodName : String ='Test' + mockName + methodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [methodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
[for (aParameter : EParameter | aOperation.eParameters)]
	[aParameter.name/] := [aParameter.eType.getTestValue(aClass.ePackage)/]
[/for]
	m := [ecorePrefix/]NewMockRun(t,[aOperation.generateParameterCall()/])
	o.EXPECT().[methodName/]([aOperation.generateParameterCall()/]).Return().Run(func([aOperation.generateParameterList(true)/]) { m.Run([aOperation.generateParameterCall()/]) }).Once()	
	o.[methodName/]([aOperation.generateParameterCall()/])
	o.AssertExpectations(t)
}
[/template]

[template public generateMockTests(aOperation : EOperation, aClass : EClass) ? (not (aOperation.oclIsUndefined() or aOperation.eGenericType.oclIsUndefined())){
	mockName : String =aClass.getMockName();
	methodName : String =aOperation.getOperationName();
	testMethodName : String ='Test' + mockName + methodName.toUpperFirst();
	aPackage : EPackage = aClass.ePackage;
	ecorePrefix : String = if not aPackage.isEcorePackage() then 'ecore.'else '' endif
}]
// [testMethodName/] tests method [methodName/]
func [testMethodName/](t *testing.T) {
	o := New[mockName/](t)
[for (aParameter : EParameter | aOperation.eParameters)]
	[aParameter.name/] := [aParameter.eType.getTestValue(aPackage)/]
[/for]
	m := [ecorePrefix/]NewMockRun(t,[aOperation.generateParameterCall()/])
	r := [aOperation.eGenericType.eClassifier.getTestValue(aPackage)/]
	o.EXPECT().[methodName/]([aOperation.generateParameterCall()/]).Return(r).Run(func([aOperation.generateParameterList(true)/]) { m.Run([aOperation.generateParameterCall()/]) }).Once()	
	o.EXPECT().[methodName/]([aOperation.generateParameterCall()/]).Call.Return(func() [aOperation.generateType()/] {
		return r
	}).Once()
	assert.Equal(t , r, o.[methodName/]([aOperation.generateParameterCall()/]) )
	assert.Equal(t , r, o.[methodName/]([aOperation.generateParameterCall()/]) )
	o.AssertExpectations(t)
}
[/template]

