[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateEnum('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::lib::generateCommon/]

[template public generateEnum(aEEnum : EEnum) { 
	enumName : String = aEEnum.name;
	varName : String = enumName.toLowerFirst(); 
	aPackage : EPackage = aEEnum.ePackage; 
	eLiterals : OrderedSet(EEnumLiteral) = aEEnum.eLiterals->asOrderedSet()->sortedBy(name);  }]
[file (aPackage.getInterfaceOutputDirectory() + '/' + aEEnum.getInterfaceFileName( enumName ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

type [enumName/] int32

const (
[for (literal : EEnumLiteral | eLiterals)]
    [literal.getConstantsName()/] [enumName/] = [literal.value.toString()/]
[/for]    
)

var [varName/]ToString = map['['/][enumName/][']'/]string{
[for (eLiteral : EEnumLiteral | eLiterals)]
	[eLiteral.getConstantsName()/]:"[eLiteral.literal/]",
[/for]	
}

var [varName/]ToID = map['['/]string[']'/][enumName/]{
[for (eLiteral : EEnumLiteral | eLiterals)]
	"[eLiteral.literal/]" : [eLiteral.getConstantsName()/],
[/for]	
}

func ([varName/] *[enumName/]) ToString() string {
	return [varName/]ToString['['/]*[varName/][']'/]
}

func ([varName/] *[enumName/]) FromString( value string ) {
	if literal, isLiteral := [varName/]ToID['['/]value[']'/]; isLiteral {
		*[varName/] = literal	
	} else {
		panic("invalid value for enum [enumName/]: " + value)
	}
}

[/file]
[/template]

