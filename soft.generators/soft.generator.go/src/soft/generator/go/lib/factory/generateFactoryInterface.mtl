[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryInterface('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::generateCommon/]

[template public generateFactoryInterface(aPackage : EPackage) { 
	className : String = aPackage.getFactoryName(); 
	packageName : String = aPackage.name;
	packagePath : String = aPackage.getInterfacePackagePath();
	ecore : EPackage = getEcorePackage();
	packages : Set(String) = if not aPackage.isEcorePackage() then Set{ ecore.getPackagePath()} else Set{} endif;
	imports : OclAny = getPackageImports(packages);
}]
[file (aPackage.getInterfaceOutputDirectory() + '/' + aPackage.getInterfaceFileName(aPackage.getFactoryName() ), false, 'UTF-8')]
[fileComment()/]

package [aPackage.getPackageNameFromPath(packagePath)/]

[generateImports(imports,packagePath)/]

type [className/] interface {
	[getImportedIdentifier( ecore.getQualifiedInterfaceIdentifier('EFactory') , packagePath,imports)/]
[for (aEClass : EClass | aPackage.eAllContents(EClass)->sortedBy(name))]
[if (aEClass.abstract = false)]
	Create[aEClass.name/]() [aEClass.getInterfaceName()/]
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
	Create[aEClass.name/]FromContainer(eContainer [aReference.generateType(packagePath,imports)/]) [aEClass.getInterfaceName()/]
[if(aEClass.getElementIDAccessorName().size() > 0)]
	Create[aEClass.name/]FromContainerAndClassID(eContainer [aReference.generateType(packagePath,imports)/], classID int) [aEClass.getInterfaceName()/]
[/if]
[/for]
[/let]
[/if]
[/for]
}

var factoryInstance [className/]

// GetFactory returns the factory for the model [aPackage.name/]
func GetFactory() [className/] {
    if factoryInstance == nil {
[let extension : Boolean = aPackage.hasKey('factory') and aPackage.valueKey('factory') = 'extension']
[let factoryName : String = if extension then aPackage.getFactoryExtensionName() else aPackage.getFactoryImplementationName() endif] 
		factoryInstance = new[factoryName.toUpperFirst()/]()
[/let]
[/let]
    }
    return factoryInstance
}

[/file]
[/template]