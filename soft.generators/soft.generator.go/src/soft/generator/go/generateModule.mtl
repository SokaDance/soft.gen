[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateModule('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]

[**
 * Returns package import path for a specific property if defined , otherwise default value
 */]
[query private getPackageImport(aPackage : EPackage, packageProperty : String, defaultValue : String) : String =
	if aPackage.hasPackageProperty(packageProperty) then 
		let p : String = aPackage.getPackageProperty(packageProperty) in
		let index : Integer = p.index('=') in 
        if index = -1 then
			p
		else
            p.substring(index+1) 
        endif
	else 
		defaultValue
	endif
/]

[**
 * Returns package name for a specific property if defined , otherwise default value
 */]
[query private getPackageName(aPackage : EPackage, packageProperty : String, defaultValue : String) : String =
	if aPackage.hasPackageProperty(packageProperty) then
		let p : String = aPackage.getPackageProperty(packageProperty) in
		let index : Integer = p.index('=') in 
        if index = -1 then
			let moduleIndex : Integer = p.lastIndexOf('/') in
			if moduleIndex = -1 then
				''
			else
				p.substring(moduleIndex+1)
			endif
		else
            p.substring(1,index-1)
        endif
	else 
		defaultValue
	endif
/]

[**
 * Returns package output directory
 */]
[query private getPackageOutputDirectory(aPackage : EPackage, packageProperty : String) : String =
	if aPackage.hasModulePath() then
		let modulePath : String = aPackage.getModulePath() in
		if aPackage.hasPackageProperty(packageProperty) then
			let packagePath : String = aPackage.getPackageProperty(packageProperty) in
			if packagePath.size() = modulePath.size() then
				if packagePath = modulePath then
					''
				else
					aPackage.name
				endif
			else 
				if packagePath.size() > modulePath.size() then
					let index : Integer = packagePath.indexOf(modulePath) in
					if index = 1 then
						packagePath.substring(modulePath.size() + 1)
					else
						aPackage.name
					endif
				else 
					aPackage.name
				endif
			endif
		else
			aPackage.name
		endif
	else 
		aPackage.name 
	endif
/]


[**
 * Returns Ecore module default path
*/]
[query public getDefaultEcoreModulePath(aPackage : EPackage) : String = 'github.com/masagroup/soft.go/ecore' /]

[**
 * Returns Ecore module default name
*/]
[query public getDefaultEcoreModuleName(aPackage : EPackage) : String = 'ecore' /]

[**
 * Returns Ecore module path
*/]
[query public getEcoreModulePath(aPackage : EPackage) : String =
	aPackage.getPackageImport('ecoreModule', aPackage.getDefaultEcoreModulePath())
/]

[**
 * Returns Ecore module name
*/]
[query public getEcoreModuleName(aPackage : EPackage) : String =
	aPackage.getPackageName('ecoreModule', aPackage.getDefaultEcoreModuleName())
/]

[**
 * Returns true if ecore module is the default one
*/]
[query public isDefaultEcoreModule(aPackage : EPackage) : Boolean =
	aPackage.getEcoreModulePath() = aPackage.getDefaultEcoreModulePath()
/]


[query public hasModulePath(aPackage : EPackage) : Boolean =
	aPackage.hasPackageProperty('modulePath')
/]

[**
 * Returns current module path
*/]
[query public getModulePath(aPackage : EPackage) : String =
	aPackage.getPackageProperty('modulePath')
/]

[query private getDefaultImportPath(aPackage : EPackage) : String =
	if aPackage.hasModulePath() then aPackage.getModulePath() + '/' + aPackage.name else aPackage.name endif
/]

[query public getInterfaceImportPath(aPackage : EPackage) : String =
	aPackage.getPackageImport('interfacePackage', aPackage.getDefaultImportPath())	
/]

[query public getInterfacePackageName(aPackage : EPackage) : String =
	aPackage.getPackageName('interfacePackage', aPackage.name)
/]

[query public getInterfaceOutputDirectory(aPackage : EPackage) : String =
	aPackage.getPackageOutputDirectory('interfacePackage')
/]

[query public getImplementationImportPath(aPackage : EPackage) : String =
	 aPackage.getPackageImport('implementationPackage', aPackage.getDefaultImportPath())
/]

[query public getImplementationPackageName(aPackage : EPackage) : String =
	 aPackage.getPackageName('implementationPackage', aPackage.name)
/]

[query public getImplementationOutputDirectory(aPackage : EPackage) : String =
	aPackage.getPackageOutputDirectory('implementationPackage')
/]

[query public getMockImportPath(aPackage : EPackage) : String =
	 aPackage.getPackageImport('mockPackage', aPackage.getDefaultImportPath())
/]

[query public getMockPackageName(aPackage : EPackage) : String =
	 aPackage.getPackageName('mockPackage', aPackage.name)
/]

[query public getMockOutputDirectory(aPackage : EPackage) : String =
	aPackage.getPackageOutputDirectory('mockPackage')
/]

[query private getAllImportPaths(aPackage : EPackage) : OclAny =
	let packageToImportPath : OclAny = mapNew('getPackageToImport_' + aPackage.name)
											.mapPut(getDefaultEcoreModuleName(),getDefaultEcoreModulePath())
											.mapPut(getEcoreModuleName(),getEcoreModulePath()) in
    let importProperty : OclAny = getProperty('imports') in 
	let imports : String = (if importProperty.oclIsUndefined() or importProperty = '' then '' else importProperty.oclAsType(String) endif) + 
							  (if aPackage.hasKey('imports') then ';' + aPackage.valueKey('imports') else '' endif) in
	if imports <> '' then
		let tokenized : Sequence(String) = imports.tokenize('; \r\n') in
        tokenized->iterate( import : String ; res : OclAny = packageToImportPath | (
        	let index : Integer = import.index('=') in 
            if index = -1 then
				let importIndex : Integer = import.lastIndexOf('/') in
				if importIndex = -1 then
					res
				else
					res.mapPut(import.substring(importIndex+1),import)
				endif
            else
                res.mapPut(import.substring(1,index-1),import.substring(index+1)) 
            endif
		))
    else
        packageToImportPath
    endif
/]

[query public getImportPathForPackage(aPackage : EPackage, aPackageName : String ) : String =
	aPackage.getAllImportPaths().mapGetOrDefault(aPackageName, '')
/]


[query public getImportPathForType( aPackage : EPackage , qualifiedName : String ) : String =
    let q : String = getQualification( qualifiedName ) in
    if q = '' then 
        ''
    else 
        if aPackage.name = q then 
            ''
        else
            let import : String = aPackage.getImportPathForPackage( q ) in
            if import = '' then
                q
            else
                import
            endif
        endif 
    endif
    
/]

[query public getImportPath( aPackage : EPackage , aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 
        ''
    else
		let type : String = aClassifier.getType() in
		if type.size() > 0 and type.first(1) = '*' then
        	aPackage.getImportPathForType(type.substring(2))
		else
			aPackage.getImportPathForType(type)
		endif
    endif
/]

[query public getImportPathForTestValue( aClassifier : EClassifier,aPackage : EPackage ) : String =
    if aClassifier.oclIsKindOf( EDataType ) then
		let d : EDataType = aClassifier.oclAsType(EDataType) in 
		let v : String = d.getUndecoratedTestValue(aPackage) in
		aPackage.getImportPathForType(v)
    else
		if aClassifier.ePackage <> aPackage then 
			aPackage.getImportPathForPackage(aClassifier.ePackage.name) 
		else 
			'' 
		endif
	endif
/]


