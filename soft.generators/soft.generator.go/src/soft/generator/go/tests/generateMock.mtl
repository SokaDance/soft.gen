[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateMock('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generateModule/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateOperation/]

[query public getMockExtends(aClass : EClass ) : Sequence(String) =
    let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
		let ecore : EPackage = getEcorePackage() in
		if ( aClass.isMapEntry() ) then
			Sequence{ ecore.getQualifiedInterfaceIdentifier('MockEObjectInternal'), ecore.getQualifiedInterfaceIdentifier('MockEMapEntry')}
        else if ( aClass.name = 'EObject' ) then
            Sequence{ecore.getQualifiedInterfaceIdentifier('MockENotifier')}
        else
            Sequence{ecore.getQualifiedInterfaceIdentifier('MockEObjectInternal')}
        endif endif
    else
        Sequence{ extendsClass.getQualifiedMockIdentifier()}
    endif 
/]

[query public getMockExpecterExtends(aClass : EClass ) : String = aClass.getMockExtends()+'_Expecter'/]

[template public generateMock(aClass : EClass) { 
	aPackage : EPackage = aClass.ePackage;
	mockExtends : Sequence(String) = aClass.getMockExtends();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
	mockName : String = aClass.getMockName();
	interfaceName : String = aClass.getInterfaceName();
	imports:OclAny;
}]
[file (aPackage.getMockOutputDirectory() + '/' + aClass.getMockFileName(aClass.name), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

[let imports : OrderedSet(String) = Set { if not aPackage.isEcorePackage() and aClass.requiresList() then Set{ aPackage.getImportPathForPackage('ecore') } else Set{} endif
										, mockExtends->collect( extend | aPackage.getImportPathForType( extend ) )->asSet()
									    , aClass.getInterfaceExtends()->collect( extend | aPackage.getImportPathForType( extend ) )->asSet()
                                        , aClass.getReferencedTypes()->collect( cls | aPackage.getImportPath(cls) )->asSet()
                                        }->flatten()->select( s | s <> '')->asOrderedSet()->sortedBy( s | s) ]
import (
	 "github.com/stretchr/testify/mock"
[for ( i : String | imports )]
	"[i/]"
[/for]
)
[/let]

// [mockName/] is an mock type for the [aClass.getInterfaceName()/] type
type [mockName/] struct {
	mock.Mock
	[mockName/]_Prototype
}

// [mockName/]_Prototype is the mock implementation of all [interfaceName/] methods ( inherited and declared )
type [mockName/]_Prototype struct {
	mock *mock.Mock
[for (mockExtend : String | mockExtends)]
	[aPackage.getImportedIdentifier( mockExtend, imports)/]_Prototype
[/for]
	[mockName/]_Prototype_Methods
}

func (_mp *[mockName/]_Prototype) SetMock(mock *mock.Mock) {
	_mp.mock = mock
[for (mockExtend : String | mockExtends)]
	_mp.[getSimpleIdentifier(mockExtend)/]_Prototype.SetMock(mock)
[/for]
	_mp.[mockName/]_Prototype_Methods.SetMock(mock)
}

// [mockName/]_Expecter is the expecter implementation for all [interfaceName/] methods ( inherited and declared )
type [mockName/]_Expecter struct {
[for (mockExtend : String | mockExtends)]
	[aPackage.getImportedIdentifier( mockExtend, imports)/]_Expecter
[/for]
	[mockName/]_Expecter_Methods
}

func (_me *[mockName/]_Expecter) SetMock(mock *mock.Mock) {
[for (mockExtend : String | mockExtends)]
	_me.[getSimpleIdentifier(mockExtend)/]_Expecter.SetMock(mock)
[/for]
	_me.[mockName/]_Expecter_Methods.SetMock(mock)
}

func ([aClass.getReceiverName()/] *[aClass.getMockName()/]_Prototype) EXPECT() *[mockName/]_Expecter {
	expecter := &[mockName/]_Expecter{}
	expecter.SetMock([aClass.getReceiverName()/].mock)
	return expecter
}

// [mockName/]_Prototype_Methods is the mock implementation of [interfaceName/] declared methods
type [mockName/]_Prototype_Methods struct {
	mock *mock.Mock
}

func (_mdp *[mockName/]_Prototype_Methods) SetMock(mock *mock.Mock) {
	_mdp.mock = mock
}

// [mockName/]_Expecter_Methods is the expecter implementation of [interfaceName/] declared methods
type [mockName/]_Expecter_Methods struct {
	mock *mock.Mock
}

func (_mde *[mockName/]_Expecter_Methods) SetMock(mock *mock.Mock) {
	_mde.mock = mock
}


[features.generateMock(aClass,imports)/]
[operations.generateMock(aClass,imports)/]

type mockConstructorTestingTNew[mockName/] interface {
	mock.TestingT
	Cleanup(func())
}

// New[mockName/] creates a new instance of [mockName/]. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func New[mockName/](t mockConstructorTestingTNew[mockName/]) *[mockName/] {
	mock := &[mockName/]{}
	mock.SetMock(&mock.Mock)
	mock.Mock.Test(t)
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}

[/file]
[/template]


