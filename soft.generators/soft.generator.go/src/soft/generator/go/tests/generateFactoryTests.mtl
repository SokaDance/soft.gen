[comment encoding = UTF-8 /]
[module generateFactoryTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::common::generateCommon/]

[template public generateFactoryTests(ePackage : EPackage) { 
	allClasses : OrderedSet(EClass) = ePackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
	allDataTypes : Sequence(EDataType) = ePackage.eAllContents(EDataType)->select( serializable )->sortedBy(name);
 } ]
[if allDataTypes->notEmpty() or allClasses->notEmpty()] 
[file (ePackage.getOutputDirectory() + '/' + ePackage.getFactoryTestFileName(ePackage.name), false, 'UTF-8')]
[fileComment()/]

package [ePackage.name/]

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
[if not ePackage.isEcorePackage()]
	"[getImportForPackage('ecore')/]"
[/if]
)


func TestFactoryCreateFromEClass(t *testing.T) {
	_ = mock.Anything
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	{
		mockEClass := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEClass{}
		mockEClass.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.Create(mockEClass) })
	}
    [for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
	{
		mockEClass := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEClass{}
		mockEClass.On("GetClassifierID").Return([aClass.getClassifierIDName()/])
		assert.NotNil(t, factory.Create(mockEClass))
	}
    [/for]
}

[for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
func TestFactoryCreate[aClass.name/](t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	assert.NotNil(t, factory.Create[aClass.name/]())
}

[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
func TestFactoryCreate[aClass.name/]From[aReference.name.toUpperFirst()/]Container(t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	mockContainer := [aReference.eType.getTestValue(aClass.ePackage)/]
[if(aReference.eOpposite.upperBound <> 1)]
	mockList := new([if not ePackage.isEcorePackage()]ecore.[/if]MockEList)
	mockList.On("Add",mock.Anything).Return(true).Once()
    mockContainer.On("Get[aReference.eOpposite.name.toUpperFirst()/]").Return(mockList).Once()
[else]
	mockContainer.On("Set[aReference.eOpposite.name.toUpperFirst()/]",mock.Anything).Once()    
[/if]
	o := factory.Create[aClass.name/]FromContainer(mockContainer)
	assert.NotNil(t,o)	
}

[if(aClass.getElementIDAccessorName().size() > 0)]
func TestFactoryCreate[aClass.name/]From[aReference.name.toUpperFirst()/]ContainerAndClassID(t *testing.T) {
		factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	mockContainer := [aReference.eType.getTestValue(aClass.ePackage)/]
[if(aReference.eOpposite.upperBound <> 1)]
	mockList := new([if not ePackage.isEcorePackage()]ecore.[/if]MockEList)
	mockList.On("Add",mock.Anything).Return(true).Once()
    mockContainer.On("Get[aReference.eOpposite.name.toUpperFirst()/]").Return(mockList).Once()
[else]
	mockContainer.On("Set[aReference.eOpposite.name.toUpperFirst()/]",mock.Anything).Once()    
[/if]
	o := factory.Create[aClass.name/]FromContainerAndClassID(mockContainer,0)
	assert.NotNil(t,o)	
}
[/if]
[/for]
[/let]

[/for]

func TestFactoryConvert(t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	{
		mockEDataType := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, nil) })
		mockEDataType.AssertExpectations(t)
	}
[for (aDataType : EDataType | allDataTypes)]
	[ePackage.generateCreateFrom(aDataType)/]
	[ePackage.generateConvertTo(aDataType)/]
[/for]	
}
[/file]
[/if]
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType)? (aDataType.oclIsTypeOf(EEnum))]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
[for (lit : EEnumLiteral | aDataType.oclAsType(EEnum).eLiterals->asOrderedSet()->sortedBy(name) )]
	assert.Equal(t, [lit.name.toUpperCase()/], factory.CreateFromString(mockEDataType, "[lit.name/]") )	
[/for]
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType)]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType)? (aDataType.oclIsTypeOf(EEnum))]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t, "", factory.ConvertToString(mockEDataType, nil) )
[for (lit : EEnumLiteral | aDataType.oclAsType(EEnum).eLiterals->asOrderedSet()->sortedBy(name) )]
	assert.Equal(t, "[lit.name/]", factory.ConvertToString(mockEDataType, [lit.name.toUpperCase()/]) )
[/for]
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType)]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
	mockEDataType.AssertExpectations(t)
}
[/template]
