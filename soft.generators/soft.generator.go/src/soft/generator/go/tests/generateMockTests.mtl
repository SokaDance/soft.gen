[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateMockTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateOperation/]

[template public generateMockTests(aClass : EClass) { 
	aPackage : EPackage = aClass.ePackage;
	packagePath : String = aPackage.getMockPackagePath();
	mockName : String = aClass.getMockName();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
	requiresEcore : Boolean = not aPackage.isEcorePackage() and ( aClass.eStructuralFeatures->notEmpty() or aClass.requiresList() );
	ecore : EPackage = getEcorePackage();
	packages : Set(String) = Set{ Set { 'testing/testing' , 'github.com/stretchr/testify/assert/assert'}
								, if requiresEcore then Set{ ecore.getInterfacePackagePath() } else Set{} endif
								, aClass.getReferencedTypes()->select( cls | not cls.oclIsUndefined() )->collect( cls | cls.getInterfacePackagePath() )->asSet()
								}->flatten();
	imports : OclAny = getPackageImports(packages);
}]
[file (aPackage.getMockOutputDirectory() + '/' + aClass.getMockTestFileName(aClass.name), false, 'UTF-8')]
[fileComment()/]

package [getPackageNameFromPath(packagePath)/]

[generateImports(imports,packagePath)/]

func discard[mockName.toUpperFirst()/]() {
	_ = assert.Equal
	_ = testing.Coverage
[if requiresEcore]
	_ = ecore.ADD
[/if]
}

[features.generateMockTests(aClass,packagePath,imports)/]
[operations.generateMockTests(aClass,packagePath,imports)/]

[/file]
[/template]