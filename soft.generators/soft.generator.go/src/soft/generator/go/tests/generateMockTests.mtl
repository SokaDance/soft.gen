[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateMockTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateOperation/]

[template public generateMockTests(aClass : EClass) { 
	aPackage : EPackage = aClass.ePackage;
	mockName : String = aClass.getMockName();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
	requiresEcore : Boolean = not aPackage.isEcorePackage() and ( aClass.eStructuralFeatures->notEmpty() or aClass.requiresList() );
}]
[file (ePackage.getOutputDirectory() + '/' + aClass.getMockTestFileName(aClass.name), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

import (
	"testing"
	"github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
[let imports : OrderedSet(String) = Set { if requiresEcore then Set{ aPackage.getImportForPackage('ecore') } else Set{} endif
										, aClass.getReferencedTypes()->select( cls | not cls.oclIsUndefined() )->collect( cls | aPackage.getImport(cls) )->asSet()
                                        , features->collect( f : EStructuralFeature | f.eType.getTestValueImport(aPackage) )->asSet()
										}->flatten()->select( s | s <> '')->asOrderedSet()->sortedBy( s | s) ]
[for ( i : String | imports )]
	"[i/]"
[/for]
[/let]
)

func discard[mockName.toUpperFirst()/]() {
	_ = assert.Equal
	_ = testing.Coverage
[if requiresEcore]
	_ = ecore.ADD
[/if]
}

type [mockName.toLowerFirst()/]Run struct {
	mock.Mock
}

func (m *[mockName.toLowerFirst()/]Run) Run(args ...any) {
	m.Called(args...)
}

type mockConstructorTestingT[mockName.toLowerFirst()/]Run interface {
	mock.TestingT
	Cleanup(func())
}

// new[mockName/]Run creates a new instance of [mockName.toLowerFirst()/]Run. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func new[mockName/]Run(t mockConstructorTestingT[mockName.toLowerFirst()/]Run, args ...any) *[mockName.toLowerFirst()/]Run {
	mock := &[mockName.toLowerFirst()/]Run{}
	mock.Test(t)
	mock.On("Run", args...).Once()
	t.Cleanup(func() { mock.AssertExpectations(t) })
	return mock
}


[features.generateMockTests(aClass)/]
[operations.generateMockTests(aClass)/]

[/file]
[/template]