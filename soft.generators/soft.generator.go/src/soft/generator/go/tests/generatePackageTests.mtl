[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generatePath/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::common::generateCommon/]

[template public generatePackageTests(aPackage : EPackage){
	allClasses : OrderedSet(EClass) = aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
	allDataTypes : OrderedSet(EDataType) = aPackage.eAllContents(EDataType)->asOrderedSet()->sortedBy(name);
	packagePath : String = aPackage.getImplementationPackagePath();
	packages : Set(String) = Set{ 'testing/testing' , 'github.com/stretchr/testify/assert/assert', aPackage.getInterfacePackagePath()}->flatten();
	imports : OclAny = getPackageImports(packages);
}]
[file (aPackage.getImplementationOutputDirectory() + '/' + aPackage.getPackageTestFileName(aPackage.name), false, 'UTF-8') ]
[fileComment()/]

package [getPackageNameFromPath(packagePath)/]

[generateImports(imports,packagePath)/]

func TestPackageInstance(t *testing.T) {
	p := GetPackage()
	assert.NotNil(t , p )
	assert.Equal(t, [getImportedIdentifier(aPackage.getQualifiedInterfaceIdentifier('NAME'),packagePath,imports)/] , p.GetName() )
	assert.Equal(t, [getImportedIdentifier(aPackage.getQualifiedInterfaceIdentifier('NS_URI'),packagePath,imports)/] , p.GetNsURI() )
	assert.Equal(t, [getImportedIdentifier(aPackage.getQualifiedInterfaceIdentifier('NS_PREFIX'),packagePath,imports)/] , p.GetNsPrefix() )

}

[if allClasses->notEmpty()]
func TestPackageClasses(t *testing.T) {
	p := GetPackage()
[for (aClass : EClass | allClasses)]
	assert.NotNil(t, p.[aClass.getReflectiveGetterName()/]())
	[for (aFeature : EStructuralFeature | aClass.eStructuralFeatures)]
	assert.NotNil(t, p.[aFeature.getReflectiveGetterName()/]())
	[/for]
	[for (aOperation : EOperation | aClass.eOperations)]
	assert.NotNil(t, p.[aOperation.getReflectiveGetterName()/]())
	[/for]
[/for]	
}
[/if]

[if allDataTypes->notEmpty()]
func TestPackageDataTypes(t *testing.T) {
	p := GetPackage()
[for (aDataType : EDataType | allDataTypes)]
	assert.NotNil(t, p.[aDataType.getReflectiveGetterName()/]())
[/for]	
}
[/if]

[/file]
[/template]

